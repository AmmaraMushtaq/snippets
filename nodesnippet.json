
{
	"nodejs": {
		"prefix": ["node","nod"],
		"body": [
			"Resource (nodres)",
			"",
			"Net (nodnet)",
			"",
			"Basic (nodbsic)",
			"",
			"Code (nodcod)",
			"",
			"Module (nodmod)",
			"",
			"Text (nodtxt)",
			"",
			"System (nodsys)",
			"",
			"Buffer/Stream (nodbuf)",
			"",
			"Process/Events (nodproev)",
			"",
			"HTTP (nodhttp)",
			"",
			"Domain (noddom)",
			"",
			"File (ilil)",
			"",
			"3rd Party (nod3rd)",
			""
			

		]},

	"JavaScript Resources": {
	  "prefix": ["nodresources","nodres"],
	  "body": [
		"Resource",
		"Online",
		"",
		"Official Website",
		"Related",
		"",
		"JavaScript"
	  ],
	  "description": "JavaScript resources"
	},
	"Net": {
		"prefix": ["nodnet"],
		"body": [
		  "net",
		  "net.createServer([options], [connectionListener])",
		  "",
		  "net.connect(options, [connectionListener])",
		  "",
		  "net.createConnection(options, [connectionListener])",
		  "",
		  "net.connect(port, [host], [connectListener])",
		  "",
		  "net.createConnection(port, [host], [connectListener])",
		  "",
		  "net.connect(path, [connectListener])",
		  "",
		  "net.createConnection(path, [connectListener])",
		  "",
		  "",
		  "Class: net.Server",
		  "",
		  "server.listen(port, [host], [backlog], [listeningListener])",
		  "",
		  "server.listen(path, [listeningListener])",
		  "",
		  "server.listen(handle, [listeningListener])",
		  "",
		  "server.close([cb])",
		  "",
		  "server.address()",
		  "",
		  "server.maxConnections",
		  "",
		  "server.connections",
		  "",
		  "Event: 'listening'",
		  "",
		  "Event: 'connection'",
		  "",
		  "Event: 'close'",
		  "",
		  "Event: 'error'",
		  "",
		  "Class: net.Socket",
		  "",
		  "new net.Socket([options])",
		  "",
		  "socket.connect(port, [host], [connectListener])",
		  "",
		  "socket.connect(path, [connectListener])",
		  "",
		  "socket.bufferSize",
		  "",
		  "socket.setEncoding([encoding])",
		  "",
		  "socket.write(data, [encoding], [callback])",
		  "",
		  "socket.end([data], [encoding])",
		  "",
		  "socket.destroy()",
		  "",
		  "socket.pause()",
		  "",
		  "socket.resume()",
		  "",
		  "socket.setTimeout(timeout, [callback])",
		  "",
		  "socket.setNoDelay([noDelay])",
		  "",
		  "socket.setKeepAlive([enable], [initialDelay])",
		  "",
		  "socket.address()",
		  "",
		  "socket.remoteAddress",
		  "",
		  "socket.remotePort",
		  "",
		  "socket.bytesRead",
		  "",
		  "socket.bytesWritten",
		  "",
		  "Event: 'connect'",
		  "",
		  "Event: 'data'",
		  "",
		  "Event: 'end'",
		  "",
		  "Event: 'timeout'",
		  "",
		  "Event: 'drain'",
		  "",
		  "Event: 'error'",
		  "",
		  "Event: 'close'",
		  "",
		  "net.isIP(input)",
		  "",
		  "net.isIPv4(input)",
		  "",
		  "net.isIPv6(input)",
		  "",
		  "UDP / Datagram Sockets",
		  "",
		  "dgram.createSocket(type, [callback])",
    "",
    "Class: Socket",
	"",
    "Event: 'message'",
	"",
    "Event: 'listening'",
	"",
    "Event: 'close'",
	"",
    "Event: 'error'",
    "",
    "dgram.send(buf, offset, length, port, address, [callback])",
	"",
    "dgram.bind(port, [address])",
	"",
    "dgram.close()",
	"",
    "dgram.address()",
	"",
    "dgram.setBroadcast(flag)",
	"",
    "dgram.setTTL(ttl)",
	"",
    "dgram.setMulticastTTL(ttl)",
	"",
    "dgram.setMulticastLoopback(flag)",
	"",
    "dgram.addMembership(multicastAddress, [multicastInterface])",
	"",
    "dgram.dropMembership(multicastAddress, [multicastInterface])",
	"",
	"dns",
	"",
	"dns.lookup(domain, [family], callback)",
	"",
    "dns.resolve(domain, [rrtype], callback)",
	"",
    "dns.resolve4(domain, callback)",
	"",
    "dns.resolve6(domain, callback)",
	"",
    "dns.resolveMx(domain, callback)",
	"",
    "dns.resolveTxt(domain, callback)",
	"",
    "dns.resolveSrv(domain, callback)",
	"",
    "dns.resolveNs(domain, callback)",
	"",
    "dns.resolveCname(domain, callback)",
	"",
    "dns.reverse(ip, callback)"
		],
		"description": "Net functions and classes"
	  },
	  "JavaScript Basics": {
		"prefix": ["nodbasics","nodbsic"],
		"body": [
		  "Global Objects",
		  "",
		  "global",
		  "",
		  "process",
		  "",
		  "console",
		  "",
		  "Class: Buffer",
		  "",
		  "require()",
		  "",
		  "require.resolve()",
		  "",
		  "require.cache",
		  "",
		  "require.extensions",
		  "",
		  "__filename",
		  "",
		  "__dirname",
		  "",
		  "module",
		  "",
		  "exports",
		  "",
		  "setTimeout(cb, ms)",
		  "",
		  "clearTimeout(t)",
		  "",
		  "setInterval(cb, ms)",
		  "",
		  "clearInterval(t)",
		  "",
		  "js_console",
		  "",
		  "console.log([data], ...)",
		  "",
      "console.info([data], ...)",
	  "",
      "console.error([data], ...)",
	  "",
      "console.warn([data], ...)",
	  "",
      "console.dir(obj)",
	  "",
      "console.time(label)",
	  "",
      "console.timeEnd(label)",
	  "",
      "console.trace(label)",
	  "",
      "console.assert(expression, [message])",
	  "",
	  "js_timers",
	  "",
	  "setTimeout(callback, delay, [arg], ...)",
	  "",
      "clearTimeout(timeoutId)",
	  "",
      "setInterval(callback, delay, [arg], ...)",
	  "",
      "clearInterval(intervalId)",
	  "",
	  "node_util",
	  "",
	  "util.format(format, ...)",
	  "",
      "util.debug(string)",
	  "",
      "util.error(...)",
	  "",
      "util.puts(...)",
	  "",
      "util.print(...)",
	  "",
      "util.log(string)",
	  "",
      "util.inspect(object, showHidden, depth, colors)",
	  "",
      "util.isArray(object)",
	  "",
      "util.isRegExp(object)",
	  "",
      "util.isDate(object)",
	  "",
      "util.isError(object)",
	  "",
      "util.pump(readableStream, writableStream, callback)",
	  "",
      "util.inherits(constructor, superConstructor)"
		],
		"description": "Basic JavaScript concepts and global objects"
	  },
	  "code": {
		"prefix": ["nodcode","nodcod"],
		"body": [
		  "Executing JS",
		  "",
		  "Caveats",
		  "",
		  "Sandboxes",
		  "",
		  "Globals",
		  "",
		  "vm.runInThisContextcode[filename])",
		  "",
		  "vm.runInNewContext[sandbox][filename])",
		  "",
		  "vm.runInContext codecontext [filename])",
		  "",
		  "vm.createContext([initSandbox])",
		  "",
		  "vm.createScript(code[filename])",
		  "",
		  "Class: Script",
		  "",
		  "script.runInThisContext()",
		  "",
		  "script.runInNewContext([sandbox])",
		  "",
		  "node_child_process",
		  "",
		  "Class: ChildProcess",
		  "",
		  "Event: 'exit'",
		  "",
		  "Event: 'close'",
		  "",
		  "Event: 'disconnect'",
		  "",
		  "Event: 'message'",
		  "",
		  "child.stdin",
		  "",
		  "child.stdout",
		  "",
		  "child.stderr",
		  "",
		  "child.pid",
		  "",
		  "child.kill([signal])",
		  "",
		  "child.send(message[sendHandle])",
		  "",
		  "child.disconnect()",
		  "",
		  "child_process.spawn(command[args][options])",
		  "",
		  "child_process.exec(command [options]callback)",
		  "",
		  "child_process.execFile(file args options callback)",
		  "",
		  "child_process.fork(modulePath [args] [options])",
		  "",
		  "node_assert",
		  "",
		  "assert.fail(actual,expected message operator)",
		  "",
		  "assert(value}, message), assert.ok(value [message]})",
		  "",
		  "assert.equal(actual, expected,[message])",
		  "",
		  "assert.notEqual(actual expected,[message])",
		  "",
		  "assert.deepEqual(actual expected[message])",
		  "",
		  "assert.notDeepEqual(actual, expected [message])",
		  "",
		  "assert.strictEqual(actual, expected, [message])",
		  "",
		  "assert.notStrictEqual(actual,expected,[message])",
		  "",
		  "assert.throws(block,[error], [message])",
		  "",
		  "assert.doesNotThrow(block,[error], [message])",
		  "",
		  "assert.ifError)"


		],
		"description": "Node.js VM module methods"
	  },
	  "Node.js Modules": {
		"prefix": ["nodmodules","nodmod"],
		"body": [
		  "Modules",
		  "",
		  "Cycles",
		  "",
		  "Core Modules",
		  "",
		  "File Modules",
		  "",
		  "Loading from node_modules Folders",
		  "",
		  "Folders as Modules",
		  "",
		  "Caching",
		  "",
		  "Module Caching Caveats",
		  "",
		  "The module Object",
		  "",
		  "module.exports",
		  "",
		  "module.require()",
		  "",
		  "module.id",
		  "",
		  "module.filename",
		  "",
		  "module.loaded",
		  "",
		  "module.parent",
		  "",
		  "module.children",
		  "",
		  "All Together...",
		  "",
		  "Loading from the global folders",
		  "",
		  "Accessing the main module",
		  "",
		  "Addenda: Package Manager Tips",
		  "",
		  "node_addons",
		  "",
		  "Addons",
		  "",
		  "Hello world",
		  "",
		  "Addon patterns",
		  "",
		  "Function arguments",
		  "",
		  "Callbacks",
		  "",
		  "Object factory",
		  "",
		  "Function factory",
		  "",
		  "Wrapping C++ objects",
		  "",
		  "Factory of wrapped objects",
		  "",
		  "Passing wrapped objects around"
		],
		"description": "Common topics related to Node.js modules and module loading"
	  },
	  "Node.js Text, Path, and QueryString": {
		"prefix": ["nostext","nodtxt"],
		"body": [
		  "Text",
		  "",
		  "Path",
		  "",
		  "path.normalize(1:p)",
		  "",
		  "path.join([path1], [path2], ...)",
		  "",
		  "path.resolve([from ...],to)",
		  "",
		  "path.relative(from, to)",
		  "",
		  "path.dirname(p)",
		  "",
		  "path.basename(p, [ext])",
		  "",
		  "path.extname(p)",
		  "",
		  "path.sep",
		  "",
		  "Query String",
		  "",
		  "querystring.stringify(obj, [sep], [eq])",
		  "",
		  "querystring.parse(str, [sep], [eq], [options])",
		  "",
		  "querystring.escape",
		  "",
		  "querystring.unescape",
		  "",
		  "node_punycode",
		  "",
		  "punnycode",
		  "",
      "punycode.decode(string)",
	  "",
      "punycode.encode(string)",
	  "",
      "punycode.toUnicode(domain)",
	  "",
      "punycode.toASCII(domain)",
	  "",
      "punycode.ucs2",
	  "",
      "punycode.ucs2.decode(string)",
	  "",
      "punycode.ucs2.encode(codePoints)",
	  "",
      "punycode.version",
	  "",
	  "node_readline",
	  "",
	  "readline.createInterface(options)",
	  "",
      "Class: Interface",
	  "",
      "rl.setPrompt(prompt,:length)",
	  "",
      "rl.prompt([preserveCursor])",
	  "",
      "rl.question(query, callback)",
	  "",
      "rl.pause()",
	  "",
      "rl.resume()",
	  "",
      "rl.close()",
	  "",
      "rl.write(data, [key])",
	  "",
      "Events",
	  "",
      "Event: 'line'",
	  "",
      "Event: 'pause'",
	  "",
      "Event: 'resume'",
	  "",
      "Event: 'close'",
	  "",
      "Event: 'SIGINT'",
	  "",
      "Event: 'SIGTSTP'",
	  "",
      "Event: 'SIGCONT'",
	  "",
      "Example: Tiny CLI",
	  "",
	  "node_repl",
	  "",
	  "repl.start(options)",
	  "",
      "Event: 'exit'",
	  "",
      "REPL Features"
		],
		"description": "Common methods in Node.js for Text, Path, and QueryString processing"
	  },
	  "Node.js System": {
		"prefix": ["nodsystem","nodsys"],
		"body": [
			"Zlib",
			"",
		  "Examples",
		  "",
		  "zlib.createGzip([options])",
		  "",
		  "zlib.createGunzip([options])",
		  "",
		  "zlib.createDeflate([options])",
		  "",
		  "zlib.createInflate([options])",
		  "",
		  "zlib.createDeflateRaw([options])",
		  "",
		  "zlib.createInflateRaw([options])",
		  "",
		  "zlib.createUnzip([options])",
		  "",
		  "Class: zlib.Gzip",
		  "",
		  "Class: zlib.Gunzip",
		  "",
		  "Class: zlib.Deflate",
		  "",
		  "Class: zlib.Inflate",
		  "",
		  "Class: zlib.DeflateRaw",
		  "",
		  "Class: zlib.InflateRaw",
		  "",
		  "Class: zlib.Unzip",
		  "",
		  "Convenience Methods",
		  "",
		  "zlib.deflate(buf, callback)",
		  "",
		  "zlib.deflateRaw(buf,callback)",
		  "",
		  "zlib.gzip(buf, callback)",
		  "",
		  "zlib.gunzip(buf, callback)",
		  "",
		  "zlib.inflate(buf, callback)",
		  "",
		  "zlib.inflateRaw(buf,callback)",
		  "",
		  "zlib.unzip(buf, callback)",
		  "",
		  "Options",
		  "",
		  "Memory Usage Tuning",
		  "",
		  "Constants",
		  "",
		  "node_os",
		  "",
		  "os.tmpDir()",
		  "",
		  "os.hostname()",
		  "",
		  "os.type()",
		  "",
		  "os.platform()",
		  "",
		  "os.arch()",
		  "",
		  "os.release()",
		  "",
		  "os.uptime()",
		  "",
		  "os.loadavg()",
		  "",
		  "os.totalmem()",
		  "",
		  "os.freemem()",
		  "",
		  "os.cpus()",
		  "",
		  "os.networkInterfaces()",
		  "",
		  "os.EOL",
		  "",
		  "node_debugger",
		  "",
		  "Debugger",
		  "",
      "Watchers",
	  "",
      "Commands reference",
	  "",
      "Stepping",
	  "",
      "Breakpoints",
	  "",
      "Info",
	  "",
      "Execution control",
	  "",
      "Various",
	  "",
      "Advanced Usage",
	  "",
	  "node_cluster",
	  "",
	  "How It Works",
	  "",
      "cluster.settings",
	  "",
      "cluster.isMaster",
	  "",
      "cluster.isWorker",
	  "",
      "Event: 'fork'",
	  "",
      "Event: 'online'",
	  "",
      "Event: 'listening'",
	  "",
      "Event: 'disconnect'",
	  "",
      "Event: 'exit'",
	  "",
      "Event: 'setup'",
	  "",
      "cluster.setupMaster([settings])",
	  "",
      "cluster.fork([env])",
	  "",
      "cluster.settings",
	  "",
      "cluster.disconnect([callback])",
	  "",
      "cluster.workers",
	  "",
      "Class: Worker",
	  "",
      "worker.id",
	  "",
      "worker.process",
	  "",
      "worker.suicide",
	  "",
      "worker.send(message, [sendHandle])",
	  "",
      "worker.destroy()",
	  "",
      "worker.disconnect()",
	  "",
      "Event: 'message'",
	  "",
      "Event: 'online'",
	  "",
      "Event: 'listening'",
	  "",
      "Event: 'disconnect'",
	  "",
      "Event: 'exit'"

		],
		"description": "Methods and classes in the Node.js zlib module"
	  },
	  "Node.js Buffer Class": {
		"prefix": ["nodbuffer","nodbuf"],
		"body": [
		  "Buffer",
		  "",
		  "Class: Buffer",
		  "",
		  "new Buffer( size)",
		  "",
		  "new Buffer( array)",
		  "",
		  "new Buffer( str,  [encoding])",
		  "",
		  "buf.write( string,  [offset],  [length],  [encoding])",
		  "",
		  "buf.toString( [encoding],[start],  [end])",
		  "",
		  "buf[ index]",
		  "",
		  "Class Method  Buffer.isBuffer( obj)",
		  "",
		  "Class Method  Buffer.byteLength( string,  [encoding])",
		  "",
		  "Class Method  Buffer.concat( list, [totalLength])",
		  "",
		  "buf.length",
		  "",
		  "buf.copy( targetBuffer, [targetStart],[sourceStart],  [sourceEnd])",
		  "",
		  "buf.slice( [start],  [end])",
		  "",
		  "buf.readUInt8( offset,  [noAssert])",
		  "",
		  "buf.readUInt6LE( offset,  [noAssert])",
		  "",
		  "buf.readUIntBE( offset,  [noAssert])",
		  "",
		  "buf.readUIntLE( offset,  [noAssert])",
		  "",
		  "buf.readUIntBE( offset,  [noAssert])",
		  "",
		  "buf.readInt8( offset,  [noAssert])",
		  "",
		  "buf.readIntLE( offset,  [noAssert])",
		  "",
		  "buf.readIntBE(offset, [noAssert])",
		  "",
		  "buf.readIntLE( offset,  [noAssert])",
		  "",
		  "buf.readIntBE( offset,  [noAssert])",
		  "",
		  "buf.readFloatLE( offset,  [noAssert])",
		  "",
		  "buf.readFloatBE( offset,  [noAssert])",
		  "",
		  "buf.readDoubleLE( offset,  [noAssert])",
		  "",
		  "buf.readDoubleBE( offset,  [noAssert])",
		  "",
		  "buf.writeUInt( value,  offset,  [noAssert])",
		  "",
		  "buf.writeUIntLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeUIntBE( value,  offset, [noAssert])",
		  "",
		  "buf.writeUIntLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeUIntBE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeInt( value,  offset,  [noAssert])",
		  "",
		  "buf.writeIntLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeIntBE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeIntLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeIntBE( value, offset,  [noAssert])",
		  "",
		  "buf.writeFloatLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeFloatBE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeDoubleLE( value,  offset,  [noAssert])",
		  "",
		  "buf.writeDoubleBE( value,  offset,  [noAssert])",
		  "",
		  "buf.fill( value,  [offset],  [end])",
		  "",
		  "buffer.INSPECT_MAX_BYTES",
		  "",
		  "Class: SlowBuffer",
		  "",
		  "node_readable_stream",
		  "",
		  "Event: 'data'",
		  "",
      "Event: 'end'",
	  "",
      "Event: 'error'",
	  "",
      "Event: 'close'",
	  "",
      "stream.readable",
	  "",
      "stream.setEncoding([encoding])",
	  "",
      "stream.pause()",
	  "",
      "stream.resume()",
	  "",
      "stream.destroy()",
	  "",
      "stream.pipe(destination, [options])",
	  "",
	  "node_writable_stream",
	  "",
	  "Event: 'drain'",
	  "",
      "Event: 'error'",
	  "",
      "Event: 'close'",
	  "",
      "Event: 'pipe'",
	  "",
      "stream.writable",
	  "",
      "stream.write(string,[encoding], [fd])",
	  "",
      "stream.write(buffer)",
	  "",
      "stream.end()",
	  "",
      "stream.end(string, encoding)",
	  "",
      "stream.end(buffer)",
	  "",
      "stream.destroy()",
	  "",
      "stream.destroySoon()",
	  "",
	  "node_tty",
	  "",
	  "tty.isatty(fd)",
	  "",
      "tty.setRawMode(mode)",
	  "",
      "Class: ReadStream",
	  "",
      "rs.isRaw",
	  "",
      "rs.setRawMode(mode)",
	  "",
      "Class: WriteStream",
	  "",
      "ws.columns",
	  "",
      "ws.rows",
	  "",
      "Event: 'resize'"
		],
		"description": "Methods and properties in the Node.js Buffer class"
	  },
	  "Node.js Process Events": {
		"prefix": ["nodrocessevents","nodproev"],
		"body": [
		  "Event: 'exit'",
		  "",
		  "Event: 'uncaughtException'",
		  "",
		  "Signal Events",
		  "",
		  "process.stdout",
		  "",
		  "process.stderr",
		  "",
      "process.stdin",
	  "",
      "process.argv",
	  "",
      "process.execPath",
	  "",
      "process.abort()",
	  "",
      "process.chdir( directory})",
	  "",
      "process.cwd()",
	  "",
      "process.env",
	  "",
      "process.exit( [code])",
	  "",
      "process.getgid()",
	  "",
      "process.setgid( id)",
	  "",
      "process.getuid()",
	  "",
      "process.setuid(id)",
	  "",
      "process.version",
	  "",
      "process.versions",
	  "",
      "process.config",
	  "",
      "process.kill( pid,  [signal])",
	  "",
      "process.pid",
	  "",
      "process.title",
	  "",
      "process.arch",
	  "",
      "process.platform",
	  "",
      "process.memoryUsage()",
	  "",
      "process.nextTick( callback)",
	  "",
      "process.umask( [mask])",
	  "",
      "process.uptime()",
	  "",
      "process.hrtime()",
	  "",
	  "node_events_emitter",
	  "",
	  "Class  events.EventEmitter",
	  "",
      "emitter.addListener( event,  listener)",
	  "",
      "emitter.on( event,  listener)",
	  "",
      "emitter.once( event,  listener)",
	  "",
      "emitter.removeListener( event,  listener)",
	  "",
      "emitter.removeAllListeners( [event])",
	  "",
      "emitter.setMaxListeners( n)",
	  "",
      "emitter.listeners(' event')",
	  "",
      "emitter.emit( event,  [arg],  [arg2], ...)",
	  "",
      "Event: 'newListener'"
		],
		"description": "Events and properties in the Node.js Process module"
	  },
	  "Node.js HTTP Module": {
		"prefix": ["nodhttp"],
		"body": [
		  "http",
		  "",
		  "http.STATUS_CODES",
		  "",
		  "http.createServer([requestListener])",
		  "",
		  "http.createClient([port], [host])",
		  "",
		  "http.request(options, callback)",
		  "",
		  "http.get(options, callback)",
		  "",
		  "http.globalAgent",
		  "",
		  "node_http_server",
		  "",
		  "Class: http.Server",
		  "",
		  "Event: 'request'",
		  "",
		  "Event: 'connection'",
		  "",
		  "Event: 'close'",
		  "",
		  "Event: 'checkContinue'",
		  "",
		  "Event: 'connect'",
		  "",
		  "Event: 'upgrade'",
		  "",
		  "Event: 'clientError'",
		  "",
		  "server.listen(port, [hostname], [backlog], [callback])",
		  "",
		  "server.listen(path, [callback])",
		  "",
		  "server.listen(handle, [listeningListener])",
		  "",
		  "server.close([cb])",
		  "",
		  "server.maxHeadersCount",
		  "",
		  "node_http_server_request",
		  "",
		  "Class: http.ServerRequest",
		  "",
      "Event: 'data'",
	  "",
      "Event: 'end'",
	  "",
      "Event: 'close'",
	  "",
      "request.method",
	  "",
      "request.url",
	  "",
      "request.headers",
	  "",
      "request.trailers",
	  "",
      "request.httpVersion",
	  "",
      "request.setEncoding([encoding])",
	  "",
      "request.pause()",
	  "",
      "request.resume()",
	  "",
      "request.connection",
	  "",
	  "node_http_server_response",
	  "",
	  "Class: http.ServerResponse",
	  "",
      "Event: 'close'",
	  "",
      "response.writeContinue()",
	  "",
      "response.writeHead(statusCode, [reasonPhrase], [headers])",
	  "",
      "response.statusCode",
	  "",
      "response.setHeader(name, value)",
	  "",
      "response.sendDate",
	  "",
      "response.getHeader(name)",
	  "",
      "response.removeHeader(name)",
	  "",
      "response.write(chunk, [encoding])",
	  "",
      "response.addTrailers({10:headers})",
	  "",
      "response.end([data], [encoding])",
	  "",
	  "node_http_agent_request",
	  "",
	  "Class: http.Agent",
	  "",
      "agent.maxSockets",
	  "",
      "agent.sockets",
	  "",
      "agent.requests",
	  "",
      "Class: http.ClientRequest",
	  "",
      "Event 'response'",
	  "",
      "Event: 'socket'",
	  "",
      "Event: 'connect'",
	  "",
      "Event: 'upgrade'",
	  "",
      "Event: 'continue'",
	  "",
      "request.write(chunk}, [encoding])",
	  "",
      "request.end([data], [encoding])",
	  "",
      "request.abort()",
	  "",
      "request.setTimeout(timeout, [callback])",
	  "",
      "request.setNoDelay([noDelay])",
	  "",
      "request.setSocketKeepAlive([enable], [initialDelay])",
	  "",
	  "node_http_client_response_https_url",
	  "",
	  "http.ClientResponse",
	  "",
      "Event: 'data'",
	  "",
      "Event: 'end'",
	  "",
      "Event: 'close'",
	  "",
      "response.statusCode",
	  "",
      "response.httpVersion",
	  "",
      "response.headers",
	  "",
      "response.trailers",
	  "",
      "response.setEncoding([encoding])",
	  "",
      "response.pause()",
	  "",
      "response.resume()",
	  "",
      "HTTPS",
	  "",
      "Class: https.Server",
	  "",
      "https.createServer(options, [requestListener])",
	  "",
      "https.request(options, callback)",
	  "",
      "https.get(options, callback)",
	  "",
      "Class https.Agent",
	  "",
      "https.globalAgent",
	  "",
      "URL",
	  "",
      "url.parse(8urlStr, [parseQueryString], [slashesDenoteHost])",
	  "",
      "url.format(urlObj)",
	  "",
      "url.resolve(from, to)"
		],
		"description": "Methods and properties in the Node.js HTTP module"
	  },
	  "Domain": {
		"prefix": ["noddomain","noddom"],
		"body": [
		  "Domain",
		  "",
		  "Additions to Error objects",
		  "",
		  "Implicit Binding",
		  "",
		  "Explicit Binding",
		  "",
		  "domain.create()",
		  "",
		  "Class: Domain",
		  "",
    "domain.run(fn)",
	"",
    "domain.members",
	"",
    "domain.add(emitter)",
	"",
    "domain.remove(emitter)",
	"",
    "domain.bind(cb)",
	"",
    "Example",
	"",
    "domain.intercept(cb)",
	"",
"domain.dispose()"

		],
		"description": "JavaScript concepts: Domain, Additions to Error objects, Implicit Binding, Explicit Binding"
	  },
	  "Node.js crypto": {
		"prefix": ["noddomaincrypto","nodcry"],
		"body": [
		  "crypto.createCredentials(details)",
		  "",
		  "crypto.createHash(algorithm)",
		  "",
		  "Class: Hash",
		  "",
		  "hash.update(data, [input_encoding])",
		  "",
		  "hash.digest([encoding])",
		  "",
		  "crypto.createHmac(algorithm, key)",
		  "",
		  "Class: Hmac",
		  "",
		  "hmac.update(data)",
		  "",
		  "hmac.digest([encoding])",
		  "",
		  "crypto.createCipher(algorithm, password)",
		  "",
		  "crypto.createCipheriv(algorithm, key, iv)",
		  "",
		  "Class: Cipher",
		  "",
		  "cipher.update(data, [input_encoding],[output_encoding])",
		  "",
		  "cipher.final([output_encoding])",
		  "",
		  "cipher.setAutoPadding(auto_padding=true)",
		  "",
		  "crypto.createDecipher(algorithm, password)",
		  "",
		  "crypto.createDecipheriv(algorithm, key, iv)",
		  "",
		  "Class: Decipher",
		  "",
		  "decipher.update(data, [input_encoding], [output_encoding])",
		  "",
		  "decipher.final([output_encoding])",
		  "",
		  "decipher.setAutoPadding(auto_padding=true)",
		  "",
		  "crypto.createSign(algorithm)",
		  "",
		  "Class: Signer",
		  "",
		  "signer.update(data)",
		  "",
		  "signer.sign(30:private_key, [output_format])",
		  "",
		  "crypto.createVerify(algorithm)",
		  "",
		  "Class: Verify",
		  "",
		  "verifier.update(data)",
		  "",
		  "verifier.verify(object, signature, [signature_format])",
		  "",
		  "crypto.createDiffieHellman(prime_length)",
		  "",
		  "crypto.createDiffieHellman(prime, [encoding])",
		  "",
		  "Class: DiffieHellman",
		  "",
		  "diffieHellman.generateKeys([encoding])",
		  "",
		  "diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])",
		  "",
		  "diffieHellman.getPrime([encoding])",
		  "",
		  "diffieHellman.getGenerator([encoding])",
		  "",
		  "diffieHellman.getPublicKey([encoding])",
		  "",
		  "diffieHellman.getPrivateKey([encoding])",
		  "",
		  "diffieHellman.setPublicKey(public_key,[encoding])",
		  "",
		  "diffieHellman.setPrivateKey(public_key, [encoding])",
		  "",
		  "crypto.getDiffieHellman(group_name)",
		  "",
		  "crypto.pbkdf2(password, salt,iterations, keylen, callback)",
		  "",
		  "crypto.randomBytes(size, [callback])"
		],
		"description": "Classes and methods in the Node.js crypto module for cryptography"
	  },
	  "Node.js TSL(SSL)": {
		"prefix": ["nodomaintslssl"],
		"body": [
		  "Client-initiated renegotiation attack mitigation",
		  "",
		  "NPN and SNI",
		  "",
		  "tls.createServer(options, [secureConnectionListener])",
		  "",
		  "tls.connect(options, [secureConnectListener])",
		  "",
		  "tls.connect(port}, [host], [options], [secureConnectListener])",
		  "",
		  "tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])",
		  "",
		  "Class: SecurePair",
		  "",
		  "Event: 'secure'",
		  "",
		  "Class: tls.Server",
		  "",
		  "Event: 'secureConnection'",
		  "",
		  "Event: 'clientError'",
		  "",
		  "server.listen(port, [host], [callback])",
		  "",
		  "server.close()",
		  "",
		  "server.address()",
		  "",
		  "server.addContext(hostname, credentials)",
		  "",
		  "server.maxConnections",
		  "",
		  "server.connections",
		  "",
		  "Class: tls.CleartextStream",
		  "",
		  "Event: 'secureConnect'",
		  "",
		  "cleartextStream.authorized",
		  "",
		  "cleartextStream.authorizationError",
		  "",
		  "cleartextStream.getPeerCertificate()",
		  "",
		  "cleartextStream.getCipher()",
		  "",
		  "cleartextStream.address()",
		  "",
		  "cleartextStream.remoteAddress",
		  "",
		  "cleartextStream.remotePort",
		  "",
		  "node_stringdecoder",
		  "",
		  "Class: StringDecoder",
		  "",
		  "StringDecoder.write(buffer)"
		],
		"description": "Classes and methods in the Node.js TSL(SSL) module for TLS/SSL functionality"
	  },
	  "Node.js File System (fs)": {
		"prefix": ["nodfil"],
		"body": [
		  "fs.rename(oldPath, newPath, [callback])",
		  "",
		  "fs.renameSync(oldPath, newPath)",
		  "",
		  "fs.truncate(fd, len, [callback])",
		  "",
		  "fs.truncateSync(fd, len)",
		  "",
		  "fs.chown(path, uid, gid, [callback])",
		  "",
		  "fs.chownSync(path, uid, gid)",
		  "",
		  "fs.fchown(fd, uid, gid, [callback])",
		  "",
		  "fs.fchownSync(fd, uid, gid)",
		  "",
		  "fs.lchown(path, uid, gid, [callback])",
		  "",
		  "fs.lchownSync(path, uid, gid)",
		  "",
		  "fs.chmod(path, mode, [callback])",
		  "",
		  "fs.chmodSync(path, mode)",
		  "",
		  "fs.fchmod(fd, mode, [callback])",
		  "",
		  "fs.fchmodSync(fd, mode)",
		  "",
		  "fs.lchmod(path, mode, [callback])",
		  "",
		  "fs.lchmodSync(path, mode)",
		  "",
		  "fs.stat(path, [callback])",
		  "",
		  "fs.lstat(path, [callback])",
		  "",
		  "fs.fstat(fd, [callback])",
		  "",
		  "fs.statSync(path)",
		  "",
		  "fs.lstatSync(path)",
		  "",
		  "fs.fstatSync(fd)",
		  "",
		  "fs.link(srcpath, dstpath, [callback])",
		  "",
		  "fs.linkSync(srcpath, dstpath)",
		  "",
		  "fs.symlink(destination, path, [type], [callback])",
		  "",
		  "fs.symlinkSync(destination, path, [type])",
		  "",
		  "fs.readlink(path, [callback])",
		  "",
		  "fs.readlinkSync(path)",
		  "",
		  "fs.realpath(path, [cache], callback)",
		  "",
		  "fs.realpathSync(path, [cache])",
		  "",
		  "fs.unlink(path, [callback])",
		  "",
		  "fs.unlinkSync(path)",
		  "",
		  "fs.rmdir(path, [callback])",
		  "",
		  "fs.rmdirSync(path)",
		  "",
		  "fs.mkdir(path, [mode], [callback])",
		  "",
		  "fs.mkdirSync(path, [mode])",
		  "",
		  "fs.readdir(path, [callback])",
		  "",
		  "fs.readdirSync(path)",
		  "",
		  "fs.close(fd, [callback])",
		  "",
		  "fs.closeSync(fd)",
		  "",
		  "fs.open(path, flags, [mode], [callback])",
		  "",
		  "fs.openSync(path, flags, [mode])",
		  "",
		  "fs.utimes(path, atime, mtime, [callback])",
		  "",
		  "fs.utimesSync(path, atime, mtime)",
		  "",
		  "fs.futimes(fd, atime, mtime, [callback])",
		  "",
		  "fs.futimesSync(fd, atime, mtime)",
		  "",
		  "fs.fsync(fd, [callback])",
		  "",
		  "fs.fsyncSync(fd)",
		  "",
		  "fs.write(fd, buffer, offset, length, position, [callback])",
		  "",
		  "fs.writeSync(fd, buffer, offset, length, position)",
		  "",
		  "fs.read(fd, buffer, offset, length, position, [callback])",
		  "",
		  "fs.readSync(fd, buffer, offset, length, position)",
		  "",
		  "fs.readFile(filename, [encoding], [callback])",
		  "",
		  "fs.readFileSync(filename, [encoding])",
		  "",
		  "fs.writeFile(filename, data, [encoding], [callback])",
		  "",
		  "fs.writeFileSync(filename, data, [encoding])",
		  "",
		  "fs.appendFile(filename, data, encoding='utf8', [callback])",
		  "",
		  "fs.appendFileSync(filename, data, encoding='utf8')",
		  "",
		  "fs.watchFile(filename, [options], listener)",
		  "",
		  "fs.unwatchFile(filename)",
		  "",
		  "fs.watch(filename, [options], [listener])"
		],
		"description": "File System (fs) module in Node.js for file operations"
	  },
	  "Node.js Third Party Modules": {
		"prefix": ["nodthirdparty","nod3rd"],
		"body": [
		  "Third Party Modules",
		  "",
		  "Module Installer:",
		  "",
		  "npm",
		  "",
		  "HTTP Middleware:",
		  "",
		  "Connect",
		  "",
		  "Web Framework:",
		  "",
		  "Express",
		  "",
		  "Web Sockets:",
		  "",
		  "Socket.IO",
		  "",
		  "HTML Parsing:",
		  "",
		  "HTML5",
		  "",
		  "mDNS/Zeroconf/Bonjour",
		  "",
		  "RabbitMQ, AMQP",
		  "",
		  "mysql",
		  "",
		  "Serialization:",
		  "",
		  "msgpack",
		  "",
		  "Scraping:",
		  "",
		  "Apricot",
		  "",
		  "Debugger:",
		  "",
		  "ndb",
		  "",
		  "is a CLI debugger",
		  "",
		  "inspector",
		  "",
		  "is a web-based tool.",
		  "",
		  "pcap binding",
		  "",
		  "ncurses",
		  "",
		  "Testing/TDD/BDD:",
		  "",
		  "vows",
		  "",
		  "mocha",
		  "",
		  "mjsunit.runner"
		],
		"description": "List of third-party Node.js modules"
	  }
	}

  