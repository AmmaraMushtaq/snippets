{
	"Nest": {
		"prefix": ["nest","nst"],
		"body": [
			"OVERVIEW (nstover)",
			"FUNDAMENTALS (nstfun)",
			"TECHNIQUES (nsttech)",
			"SECURITY (nstsec)",
			"GRAPHQL (nstgrap)",
			"WEBSOCKETS (nstweb)",
			"MICROSERVICES (nstmicr)",
			"STANDALONE APPS (nststnd)",
			"CLI (nstcli)",
			"OPENAPI (nstopen)",
			"RECIPES (nstrec)",
			"FAQ (nstfaq)",
			"NEWDEVTOOLS (nstdev)",
			"MIGRATION GUIDE (nstmig)",
			"OFFICIAL COURSES (nstoff)",
			"DISCOVER (nstdis)"
		],
		"description": "Nest"
	},
	"OVERVIEW": {
		"prefix": ["nstoverview","nstover"],
		"body": [
			"First steps (nstoverfs)",
			"Controllers (nstovercont)",
			"Providers (nstoverprov)",
			"Modules (nstovermod)",
			"Middleware (nstovermidd)",
			"Exception filters (nstoverexfil)",
			"Pipes (nstoverpip)",
			"Guards (nstovergur)",
			"Interceptors (nstoverinter)",
			"Custom decorators (nstovercusdec)"
		],
		"description": "Nest OVERVIEW"
	},
	"First steps": {
		"prefix": ["nstoverviewfirststeps","nstoverfs"],
		"body": [

		],
		"description": "Getting started with web development"
	  },
	  "Controllers": {
		"prefix": ["nstoverviewcontrollers","nstovercont"],
		"body": [
			"import { Controller, Get, Post, Body } from '@nestjs/common';",
"import { UserService } from './user.service';",
"import { CreateUserDto } from './dto/create-user.dto';",

"@Controller('users')",
"export class UserController {",
  "constructor(private readonly userService: UserService) {}",

  "@Get()",
  "findAll() {",
   " return this.userService.findAll();",
  "}",
  "@Post()",
  "create(@Body() createUserDto: CreateUserDto) {",
    "return this.userService.create(createUserDto);",
  "}",
"}"
		],
		"description": "Create controller classes"
	  },
	  "Providers": {
		"prefix": ["nstoverviewproviders","nstoverprov"],
		"body": [
			"import { Injectable, Inject } from '@nestjs/common';",
			"import { UserService } from './user.service';",
			
			"@Injectable()",
			"export class UserController {",
			  "constructor(@Inject(UserService) private readonly userService: UserService) {}",
			"}"
		],
		"description": "Implement provider classes"
	  },
	  "Modules": {
		"prefix": ["nstoverviewmodules","nstovermod"],
		"body":[
			"import { Module } from '@nestjs/common';",
			"import { CatsController } from './cats.controller';",
			"import { CatsService } from './cats.service';",
			
			"@Module({",
			  "controllers: [CatsController],",
			  "providers: [CatsService],",
			  "exports: [CatsService]",
			"})"
		],
		"description": "Define application modules"
	  },
	  "Middleware": {
		"prefix": ["nstoverviewmiddleware","nstovermidd"],
		"body": [
			"import { MiddlewareConsumer, Module } from '@nestjs/common';",
			"import { LoggerMiddleware } from './logger.middleware';",
			"import { UserController } from './user.controller';",
			
			"@Module({",
			  "controllers: [UserController],",
			"})",
			"export class UserModule {",
			  "configure(consumer: MiddlewareConsumer) {",
				"consumer.apply(LoggerMiddleware).forRoutes('users');",
			 " }",
			"}"
		],
		"description": "Create custom middleware"
	  },
	  "Exception filters": {
		"prefix": ["nstoverviewexceptionfilters","nstoverexfil"],
		"body": [
			"async findAll() {",
				"try {",
				  "await this.service.findAll()",
				"} catch (error) { ",
				  "throw new HttpException({",
					"status: HttpStatus.FORBIDDEN,",
					"error: 'This is a custom message',",
				  "}, HttpStatus.FORBIDDEN, {",
					"cause: error",
				  "});",
				"}",
			  "}"
		],
		"description": "Implement exception filters"
	  },
	  "Pipes": {
		"prefix": ["nstoverviewpipes","nstoverpip"],
		"body":[
			"ValidationPipe",
"ParseIntPipe",
"ParseFloatPipe",
"ParseBoolPipe",
"ParseArrayPipe",
"ParseUUIDPipe",
"ParseEnumPipe",
"DefaultValuePipe",
"ParseFilePipe"
		],
		"description": "Create custom pipes"
	  },
	  "Guards": {
		"prefix": ["nstoverviewguards","nstovergur"],
		"body": [
			"import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';",
"import { Observable } from 'rxjs';",

"@Injectable()",
"export class AuthGuard implements CanActivate {",
  "canActivate(",
   " context: ExecutionContext,",
  "): boolean | Promise<boolean> | Observable<boolean> {",
   " const request = context.switchToHttp().getRequest();",
    "return validateRequest(request);",
 " }",
"}"
		],
		"description": "Implement route guards"
	  },
	  "Interceptors": {
		"prefix": ["nstoverviewinterceptors","nstoverinter"],
		"body": [
			"import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';",
"import { Observable } from 'rxjs';",
"import { tap } from 'rxjs/operators';",

"@Injectable()",
"export class LoggingInterceptor implements NestInterceptor {",
  "intercept(context: ExecutionContext, next: CallHandler): Observable<any> {",
    "console.log('Before...');",

   " const now = Date.now();",
    "return next",
      ".handle()",
      ".pipe(",
       " tap(() => console.log(`After... ${Date.now() - now}ms`)),",
      ");",
  "}",
"}"
		],
		"description": "Create custom interceptors"
	  },
	  "Custom decorators": {
		"prefix": ["nstoverviewdecorators","nstovercusdec"],
		"body": [
			"import { createParamDecorator, ExecutionContext } from '@nestjs/common';",

"export const User = createParamDecorator(",
  "(data: unknown, ctx: ExecutionContext) => {",
   " const request = ctx.switchToHttp().getRequest();",
    "return request.user;",
 " },",
");"
		],
		"description": "Define custom decorators"
	  },
	"FUNDAMENTALS": {
		"prefix":["nstfundamentals","nstfun"],
		
		"body": [
			"Custom providers (nstfuncpr)",
			"Asynchronous providers (nstfunasp)",
			"Dynamic modules (nstfundmo)",
			"Injection scopes (nstfuninsc)",
			"Circular dependency (nstfuncirde)",
			"Module reference (nstfunmoref)",
			"Lazy-loading modules (nstfunllmo)",
			"Execution context (nstfuncpexco)",
			"Lifecycle events (nstfunlev)",
			"Platform agnosticism (nstfunplag)",
			"Testing (nstfuntest)"
		],
		"description": "  FUNDAMENTALS"
	},
	"Custom providers": {
		"prefix": ["nstfundamentalscustomproviders","nstfuncpr"],
		"body": [
			"Value providers",
			"Class providers",
			"Factory providers",
			"Non-service based providers",
			"Export custom provider"
		],
		"description": "Create custom providers"
	  },
	  "Asynchronous providers": {
		"prefix": ["nstfundamentalsasyncproviders","nstfunasp"],
		"body": [
			"{",
				"provide: 'ASYNC_CONNECTION',",
				"useFactory: async () => {",
				 " const connection = await createConnection(options);",
				  "return connection;",
				"},",
			 " }"
		],
		"description": "Implement asynchronous providers"
	  },
	  "Dynamic modules": {
		"prefix": ["nstfundamentalsdynamicmodules","nstfundmo"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { UsersService } from './users.service';",

"@Module({",
  "providers: [UsersService],",
  "exports: [UsersService],",
"})",
"export class UsersModule {}"
		],
		"description": "Create dynamic modules"
	  },
	  "Injection scopes": {
		"prefix": ["nstfundamentalsinjectionscopes","nstfuninsc"],
		"body": [
			"Usage",
		"Controller scope",
		"Scope hierarchy",
		"Request provider",
		"Inquirer provider"
	],
		"description": "Define injection scopes"
	  },
	  "Circular dependency": {
		"prefix": ["nstfundamentalscirculardependency","nstfuncirde"],
		"body": [
			"Forward reference",
			"ModuleRef class alternative",
			"Module forward reference"
		],
		"description": "Resolve circular dependencies"
	  },
	  "Module reference": {
		"prefix": ["nstfundamentalsmodulereference","nstfunmoref"],
		"body": [
			"Retrieving instances",
			"Resolving scoped providers",
			"Registering REQUEST provider",
			"Getting current sub-tree",
			"Instantiating custom classes dynamically"

		],
		"description": "Access the module reference"
	  },
	  "Lazy-loading modules": {
		"prefix": ["nstfundamentalslazyloading","nstfunllmo"],
		"body": [
			"const { LazyModule } = await import('./lazy.module');",
"const moduleRef = await this.lazyModuleLoader.load(() => LazyModule);",
"Load 'LazyModule' attempt: 1",
"time: 2.379ms",
"Load 'LazyModule' attempt: 2",
"time: 0.294ms",
"Load 'LazyModule' attempt: 3",
"time: 0.303ms"
		],
		"description": "Lazy-load modules"
	  },
	  "Execution context": {
		"prefix": ["nstfundamentalsexecutioncontext","nstfuncpexco"],
		"body": [
			"Current application context",
			"Host handler arguments",
			"ExecutionContext class"
		],
		"description": "Access the execution context"
	  },
	  "Lifecycle events": {
		"prefix": ["nstfundamentalslifecycleevents","nstfunlev"],
		"body": [
			"Usage",
			"Asynchronous initialization",
			"Application shutdown"
		],
		"description": "Use lifecycle events"
	  },
	  "Platform agnosticism": {
		"prefix": ["nstfundamentalsplatformagnostic","nstfunplag"],
		"body": "// Write platform-agnostic code",
		"description": "Ensure platform agnosticism"
	  },
	  "Testing": {
		"prefix": ["nstfundamentalstesting","nstfuntest"],
		"body": [
			"Installation",
			"Unit testing",
			"Testing utilities",
			"Auto mocking",
			"End-to-end testing",
			"Overriding globally registered enhancers"
		],
		"description": "Write tests using TestingModule"
	  },
	"TECHNIQUES": {
		"prefix": ["nsttechniques","nsttech"],
		"body": [
			"Configuration (nsttecon)",
			"Database (nsttechdb)",
			"Mongo (nsttechmon)",
			"Validation (nsttechvali)",
			"Caching (nsttechcac)",
			"Serialization (nsttechser)",
			"Versioning (nsttechver)",
			"Task scheduling (nsttechtsch)",
			"Queues (nsttechqueu)",
			"Logging (nsttechlog)",
			"Cookies (nsttechcoki)",
			"Events (nsttecheve)",
			"Compression (nsttechcomp)",
			"File upload (nsttechfupl)",
			"Streaming files (nsttechstrf)",
			"HTTP module (nsttechhttpm)",
			"Model-View-Controller (nsttechmvcont)",
			"Performance (Fastify) (nsttechper)",
			"Server-Sent Events (nsttechserse)"
		],
		"description": " Nest TECHNIQUES"
	},
	"Configuration": {
		"prefix": ["nsttechniquesconfiguration","nsttechcon"],
		"body": [
			"Installation",
			"Getting started",
			"Custom env file path",
			"Disable env variables loading",
			"Use module globally",
			"Custom configuration files"
		],
		"description": "Define configuration settings"
	  },
	  "Database": {
		"prefix": ["nsttechniquesdatabase","nsttechdb"],
		"body": [
			"TypeORM Integration",
			"Repository pattern",
			"Relations",
			"Auto-load entities",
			"Separating entity definition",
			"TypeORM Transactions",
			"Subscribers",
			"Migrations",
			"Multiple databases",
			"Testing",
			"Async configuration",
			"Custom DataSource Factory"
		],
		"description": "Connect to the database"
	  },
	  "Mongo": {
		"prefix": ["nsttechniquesmongo","nsttechmon"],
		"body": [
			
		],
		"description": "Connect to MongoDB"
	  },
	  "Validation": {
		"prefix": ["nsttechniquesvalidation","nsttechvali"],
		"body": [
			"ValidationPipe",
"ParseIntPipe",
"ParseBoolPipe",
"ParseArrayPipe",
"ParseUUIDPipe"
		],
		"description": "Create validation schema"
	  },
	  "Caching": {
		"prefix": ["nsttechniquescaching","nsttechcac"],
		"body": [
			"In-memory cache",
			"Interacting with the Cache store",
			"Customize caching",
			"Use module globally"
		],
		"description": "Cache data"
	  },
	  "Serialization": {
		"prefix": ["nsttechniquesserialization","nsttechser"],
		"body": [
			"Exclude properties",
			"Expose properties",
			"Transform"
		],
		"description": "Serialize data"
	  },
	  "Versioning": {
		"prefix": ["nsttechniquesversioning","nsttechver"],
		"body": [
			"URI Versioning Type",
			"Header Versioning Type",
			"Media Type Versioning Type",
			"Custom Versioning Type",
			"Controller versions",
			"Route versions",
			"Multiple versions",
			"Global default version",
			"Middleware versioning"
		],
		"description": "Implement API versioning"
	  },
	  "Task scheduling": {
		"prefix": ["nsttechniquestaskscheduling","nsttechtsch"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { ScheduleModule } from '@nestjs/schedule';",

"@Module({",
 " imports: [",
    "ScheduleModule.forRoot()",
 " ],",
"})",
"export class AppModule {}"
		],
		"description": "Schedule tasks"
	  },
	  "Queues": {
		"prefix": ["nsttechniquesqueues","nsttechqueu"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { BullModule } from '@nestjs/bull';",

"@Module({",
 " imports: [",
    "BullModule.forRoot({",
      "redis: {",
       " host: 'localhost',",
       " port: 6379,",
      "},",
    "}),",
  "],",
"})"
		],
		"description": "Add tasks to queues"
	  },
	  "Logging": {
		"prefix": ["nsttechniqueslogging","nsttechlog"],
		"body": [
			"Basic customization",
			"Custom implementation",
			"Extend built-in logger",
			"Dependency injection",
			"Using the logger for application logging"
		],
		"description": "Log messages"
	  },
	  "Cookies": {
		"prefix": ["nsttechniquescookies","nsttechcoki"],
		"body": [
			"Use with Express (default)",
			"Use with Fastify",
			"Creating a custom decorator (cross-platform)"
		],
		"description": "Set cookies in the response"
	  },
	  "Events": {
		"prefix": ["nsttechniquesevents","nsttecheve"],
		"body": [
			"Dispatching Events",
			"Listening to Events"
		],
		"description": "Emit events"
	  },
	  "Compression": {
		"prefix": ["nsttechniquescompression","nstcomp"],
		"body": [
			"import compression from '@fastify/compress';",
"// somewhere in your initialization file",
"await app.register(compression);"
		],
		"description": "Enable response compression"
	  },
	  "File upload": {
		"prefix": ["nsttechniquesfileupload","nsttechfupl"],
		"body": [
			"@Post('upload')",
"@UseInterceptors(FileInterceptor('file'))",
"uploadFile(@UploadedFile() file: Express.Multer.File) {",
 " console.log(file);",
"}"
		],
		"description": "Handle file uploads"
	  },
	  "Streaming files": {
		"prefix": ["nsttechniquesstreamingfiles","nsttechstrf"],
		"body": [
			"@Controller('file')",
"export class FileController {",
  "@Get()",
  "getFile(@Res() res: Response) {",
   " const file = createReadStream(join(process.cwd(), 'package.json'));",
    "file.pipe(res);",
  "}",
"}"
		],
		"description": "Stream files in responses"
	  },
	  "HTTP module": {
		"prefix": ["nsttechniqueshttpmodule","nsttechhttpm"],
		"body":[
			"import { catchError, firstValueFrom } from 'rxjs';",

"@Injectable()",
"export class CatsService {",
  "private readonly logger = new Logger(CatsService.name);",
  "constructor(private readonly httpService: HttpService) {}",

  "async findAll(): Promise<Cat[]> {",
    "const { data } = await firstValueFrom(",
      "this.httpService.get<Cat[]>('http://localhost:3000/cats').pipe(",
        "catchError((error: AxiosError) => {",
          "this.logger.error(error.response.data);",
         " throw 'An error happened!';",
        "}),",
      "),",
    ");",
    "return data;",
  "}",
"}"
		],
		"description": "Create an HTTP server"
	  },
	  "Session": {
		"prefix": ["nsttechniquessession","nsttechmvsess"],
		"body": [
			
"import * as session from 'express-session';",
"// somewhere in your initialization file",
"app.use(",
  "session({",
    "secret: 'my-secret',",
   " resave: false,",
   " saveUninitialized: false,",
 " }),",
");"
		],
		"description": "Manage user sessions"
	  },
	  "Model-View-Controller": {
		"prefix": ["nsttechniquesmvc","nsttechper"],
		"body": [
			"import { Get, Controller, Render } from '@nestjs/common';",

"@Controller()",
"export class AppController {",
  "@Get()",
  "@Render('index')",
 " root() {",
   " return { message: 'Hello world!' };",
  "}",
"}"
		],
		"description": "Implement Model-View-Controller (MVC) architecture"
	  },
	  "Performance (Fastify)": {
		"prefix": ["nsttechniquesfastifyperformance","nsttechper"],
		"body": [
			"async function bootstrap() {",
				"const app = await NestFactory.create<NestFastifyApplication>(",
				  "AppModule,",
				  "new FastifyAdapter(),",
				");",
				"await app.listen(3000, '0.0.0.0');",
			  "}"
			  
		],
		"description": "Optimize performance using Fastify"
	  },
	  "Server-Sent Events": {
		"prefix": ["nsttechniquessse","nsttechserse"],
		"body": [
			"@Sse('sse')",
"sse(): Observable<MessageEvent> {",
 " return interval(1000).pipe(map((_) => ({ data: { hello: 'world' } })));",
"}"
		],
		"description": "Implement Server-Sent Events"
	  },
	"SECURITY": {
		"prefix": ["nstsecurity","nstsec"],
		"body": [
			"Authentication (nstsecauthen)",
			"Authorization (nstsecauthoriz)",
			"Encryption and Hashing (nstsecenchas)",
			"Helmet (nstsechel)",
			"CORS (nstseccors)",
			"CSRF Protection (nstseccsrfp)",
			"Rate limiting (nstsecrali)"
		],
		"description": " Nest SECURITY"
	},
	"Authentication": {
		"prefix": ["nstsecurityauthentication","nstsecauthen"],
		"body": [
			"Creating an authentication module",
			"Implementing the 'Sign in' endpoint"
		],
		"description": "Authenticate user"
	  },
	  "Authorization": {
		"prefix": ["nstsecurityauthorization","nstsecauthoriz"],
		"body": [
			"Basic RBAC implementation",
			"Claims-based authorization",
			"Integrating CASL",
			"Advanced: Implementing a PoliciesGuard"
		],
		"description": "Authorize user"
	  },
	  "Encryption and Hashing": {
		"prefix": ["nstsecurityencryptionhashing","nstsecenchas"],
		"body": [
			"import { createDecipheriv } from 'crypto';",

"const decipher = createDecipheriv('aes-256-ctr', key, iv);",
"const decryptedText = Buffer.concat([",
 " decipher.update(encryptedText),",
  "decipher.final(),",
"]);",
"// hashing",
"import * as bcrypt from 'bcrypt';",

"const saltOrRounds = 10;",
"const password = 'random_password';",
"const hash = await bcrypt.hash(password, saltOrRounds);"
		],
		"description": "Encrypt data and hash passwords"
	  },
	  "Helmet": {
		"prefix": ["nstsecurityhelmet","nstsechel"],
		"body": [
			"app.use(helmet({",
				"crossOriginEmbedderPolicy: false,",
				"contentSecurityPolicy: {",
				  "directives: {",
					"imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],",
					"scriptSrc: [`'self'`, `https: 'unsafe-inline'`],",
					"manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],",
					"frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],",
				  "},",
				"},",
			  "}));"
		],
		"description": "Enable Helmet middleware for security headers"
	  },
	  "CORS": {
		"prefix": ["nstsecuritycors","nstseccors"],
		"body": [
			"const app = await NestFactory.create(AppModule);",
"app.enableCors();",
"await app.listen(3000);"
		],
		"description": "Enable Cross-Origin Resource Sharing"
	  },
	  "CSRF Protection": {
		"prefix": ["nstsecuritycsrf","nstseccsrfp"],
		"body": [
			"import * as csurf from 'csurf';",

"// somewhere in your initialization file",
"app.use(csurf());"

		],
		"description": "Enable Cross-Site Request Forgery protection"
	  },
	  "Rate limiting": {
		"prefix": ["nstsecurityratelimiting","nstsecrali"],
		"body": [
			"@Module({",
				"imports: [",
				 " ThrottlerModule.forRoot({",
					"ttl: 60,",
					"limit: 10,",
				  "}),",
				"],",
			  "})"
		],
		"description": "Implement rate limiting to prevent abuse"
	  },
	"GRAPHQL": {
		"prefix": ["nstgraphql","nstgrap"],
		"body": [
			"Quick start (nstgrapqstrt)",
			"Resolvers (nstgrapres)",
			"Mutations (nstgrapmut)",
			"Subscriptions (nstgrapsub)",
			"Scalars (nstgrapscal)",
			"Directives (nstgrapdir)",
			"Interfaces (nstgrapinter)",
			"Unions and Enums (nstgrapunenu)",
			"Field middleware (nstgrapfmid)",
			"Mapped types (nstgrapmapt)",
			"Plugins (nstgrapplu)",
			"Complexity (nstgrapcomp)",
			"Extensions (nstgrapex)",
			"CLI Plugin (nstgrapclipl)",
			"Generating SDL (nstgrapgensdl)",
			"Sharing models (nstgrapshar)",
			"Other features (nstgrapofea)",
			"Federation (nstgrapfed)",
			"Migration guide (nstgrapmigg)"
		],
		"description": " Nest GRAPHQL"
	},
	"Quick start": {
		"prefix": ["nstgraphqlquickstart","nstgrapqstrt"],
		"body": "// Quick start with GraphQL\nconst { ${1:graphql}, ${2:buildSchema} } = require('graphql');\n\nconst schema = ${3:buildSchema}(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst root = {\n  hello: () => 'Hello, world!'\n};",
		"description": "Quick start with GraphQL"
	  },
	  "Resolvers": {
		"prefix": ["nstgraphqlresolvers","nstgrapres"],
		"body": [
			"Code first",
			"Object types"
		],
		"description": "Define GraphQL resolvers"
	  },
	  "Mutations": {
		"prefix": ["nstgraphqlmutations","nstgrapmut"],
		"body": [
			"import { InputType, Field } from '@nestjs/graphql';",

"@InputType()",
"export class UpvotePostInput {",
"  @Field()",
 " postId: number;",
"}"
		],
		"description": "Define GraphQL mutations"
	  },
	  "Subscriptions": {
		"prefix": ["nstgraphqlsubscriptions","nstgrapsub"],
		"body": [
			"@Subscription(returns => Comment, {",
				"name: 'commentAdded',",
			  "})",
			 " subscribeToCommentAdded() {",
				"return pubSub.asyncIterator('commentAdded');",
			  "}"
		],
		"description": "Define GraphQL subscriptions"
	  },
	  "Scalars": {
		"prefix": ["nstgraphqlscalars","nstgrapscal"],
		"body": [
			"import { Scalar, CustomScalar } from '@nestjs/graphql';",
"import { Kind, ValueNode } from 'graphql';",

"@Scalar('Date', (type) => Date)",
"export class DateScalar implements CustomScalar<number, Date> {",
"  description = 'Date custom scalar type';",

 " parseValue(value: number): Date {",
    "return new Date(value); // value from the client",
 " }",

 " serialize(value: Date): number {",
   " return value.getTime(); // value sent to the client",
  "}",

  "parseLiteral(ast: ValueNode): Date {",
    "if (ast.kind === Kind.INT) {",
      "return new Date(ast.value);",
    "}",
    "return null;",
  "}",
"}"
		],
		"description": "Define custom GraphQL scalar type"
	  },
	  "Directives": {
		"prefix": ["nstgraphqldirectives","nstgrapdir"],
		"body": [
			"export function upperDirectiveTransformer(",
 " schema: GraphQLSchema,",
  "directiveName: string,",
") {",
  "return mapSchema(schema, {",
    "[MapperKind.OBJECT_FIELD]: (fieldConfig) => {",
      "const upperDirective = getDirective(",
        "schema,",
        "fieldConfig,",
        "directiveName,",
      ")?.[0];",

      "if (upperDirective) {",
        "const { resolve = defaultFieldResolver } = fieldConfig;",

      "  fieldConfig.resolve = async function (source, args, context, info) {",
          "const result = await resolve(source, args, context, info);",
          "if (typeof result === 'string') {",
            "return result.toUpperCase();",
          "}",
         " return result;",
        "};",
       " return fieldConfig;"
		],
		"description": "Define custom GraphQL directive"
	  },
	  "Interfaces": {
		"prefix": ["nstgraphqlinterfaces","nstgrapinter"],
		"body": [
			"import { Field, ID, InterfaceType } from '@nestjs/graphql';",

"@InterfaceType()",
"export abstract class Character {",
  "@Field((type) => ID)",
  "id: string;",

 " @Field()",
  "name: string;",
"}"
		],
		"description": "Define GraphQL interface"
	  },
	  "Unions and Enums": {
		"prefix": ["nstgraphqlunionsenums","nstgrapunenu"],
		"body": [
			"import { Field, ObjectType } from '@nestjs/graphql';",

"@ObjectType()",
"export class Book {",
 " @Field()",
  "title: string;",
"}"
		],
		"description": "Define GraphQL union and enum"
	  },
	  "Field middleware": {
		"prefix":["nstgraphqlieldmiddleware","nstgrapfmid"],
		"body": [
			"import { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';",

"const loggerMiddleware: FieldMiddleware = async (",
  "ctx: MiddlewareContext,",
  "next: NextFn,",
") => {",
  "const value = await next();",
 " console.log(value);",
  "return value;",
"};"
		],
		"description": "Define field middleware for GraphQL fields"
	  },
	  "Mapped types": {
		"prefix": ["nstgraphqlmappedtypes","nstgrapmapt"],
		"body": [
			"Partia",
			"Pick",
			"Omit",
			"Intersection",
			"Composition"
		],
		"description": "Define GraphQL mapped type"
	  },
	  "Plugins": {
		"prefix": ["nstgraphqlplugins","nstgrapplu"],
		"body": [
			"Custom plugins",
			"Using external plugins",
			"Plugins with Mercurius"
		],
		"description": "Define and use GraphQL plugins"
	  },
	  "Complexity": {
		"prefix": ["nstgraphqlcomplexity","nstgrapcomp"],
		"body": [
			"Field-level complexity",
			"Query/Mutation-level complexity"
		],
		"description": "Implement complexity analysis for queries"
	  },
	  "Extensions": {
		"prefix": ["nstgraphqlextensions","nstgrapex"],
		"body": [
			"Adding custom metadata",
			"Using custom metadata"
		],
		"description": "Define and use GraphQL extensions"
	  },
	  "CLI Plugin": {
		"prefix": ["nstgraphqlcliplugin","nstgrapclipl"],
		"body": [
			
		],
		"description": "Define a CLI plugin for GraphQL"
	  },
	  "Generating SDL": {
		"prefix": ["nstgraphqlgeneratingsdl","nstgrapgensdl"],
		"body": [],
		"description": "Generate GraphQL SDL from schema"
	  },
	  "Sharing models": {
		"prefix": ["nstgraphqlsharingmodels","nstgrapshar"],
		"body": [
			"resolve: { // see: https://webpack.js.org/configuration/resolve/",
		"alias: {",
			"'@nestjs/graphql': path.resolve(__dirname, '../node_modules/@nestjs/graphql/dist/extra/graphql-model-shim')",
		"}",
	  "},"
		],
		"description": "Share models between GraphQL and database"
	  },
	  "Other features": {
		"prefix": ["nstgraphqlotherfeatures","nstgrapofea"],
		"body": [
			"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';",
			"import { GqlExecutionContext } from '@nestjs/graphql';",
			
			"@Injectable()",
			"export class AuthGuard implements CanActivate {",
			  "canActivate(context: ExecutionContext): boolean {",
				"const ctx = GqlExecutionContext.create(context);",
				"return true;",
			  "}",
			"}"
		],
		"description": "Implement other GraphQL features"
	  },
	  "Federation": {
		"prefix": ["nstgraphqlfederation","nstgrapfed"],
		"body": [
			"import { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';",
"import { UsersService } from './users.service';",

"@Resolver('User')",
"export class UsersResolver {",
  "constructor(private usersService: UsersService) {}",

 " @Query()",
 " getUser(@Args('id') id: string) {",
   " return this.usersService.findById(id);",
  "}",

 " @ResolveReference()",
 " resolveReference(reference: { __typename: string; id: string }) {",
    "return this.usersService.findById(reference.id);",
  "}",
"}"
		],
		"description": "Implement Apollo Federation for microservices"
	  },
	  "Migration guide": {
		"prefix": ["nstgraphqlmigrationguide","nstgrapmigg"],
		"body":[
			"$ npm uninstall apollo-server-express",
"$ npm install @apollo/server",
"$ npm uninstall apollo-server-fastify",
"$ npm install @apollo/server @as-integrations/fastify",
"$ npm install @mercuriusjs/gateway"
		],
		"description": "Migration guide for GraphQL"
	  },
	"WEBSOCKETSL": {
		"prefix": ["nstwebsocketsl","nstweb"],
		"body": [
			"Gateways (nstwebgat)",
			"Exception filters (nstwebexpfil)",
			"Pipes (nstwebpip)",
			"Guards (nstwebguar)",
			"Interceptors (nstwebinter)",
			"Adapters (nstwebadap)"
		],
		"description": " Nest WEBSOCKETSL"
	},
	"Gateways": {
		"prefix": ["nstwebsocketslgateways","nstwebgat"],
		"body": "// Define gateway\nclass ${1:GatewayName}Gateway {\n  // Implement gateway logic\n}",
		"description": "Define gateway for backend"
	  },
	  "Exceptionfilters": {
		"prefix": ["nstwebsocketslexceptionfilters","nstwebexpfil"],
		"body": [
			"import { Catch, ArgumentsHost } from '@nestjs/common';",
"import { BaseWsExceptionFilter } from '@nestjs/websockets';",

"@Catch()",
"export class AllExceptionsFilter extends BaseWsExceptionFilter {",
  "catch(exception: unknown, host: ArgumentsHost) {",
    "super.catch(exception, host);",
  "}",
"}"
		],
		"description": "Define exception filter for backend"
	  },
	  "Pipes": {
		"prefix": ["nstwebsocketslpipes","nstwebpip"],
		"body": [
			"@UsePipes(new ValidationPipe())",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
  "const event = 'events';",
 " return { event, data };",
"}"
		],
		"description": "Define pipe for backend"
	  },
	  "Guards": {
		"prefix": ["nstwebsocketslguards","nstwebguar"],
		"body": [
			"@UseGuards(AuthGuard)",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
  "const event = 'events';",
  "return { event, data };",
"}"
		],
		"description": "Define guard for backend"
	  },
	  "Interceptors": {
		"prefix": ["nstwebsocketslinterceptors","nstwebinter"],
		"body": [
			"@UseInterceptors(new TransformInterceptor())",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
"  const event = 'events';",
  "return { event, data };",
"}"
		],
		"description": "Define interceptor for backend"
	  },
	  "Adapters": {
		"prefix": ["nstwebsocketsladapters","nstwebadap"],
		"body": [
			"create"	,
"bindClientConnect",
"bindClientDisconnect",
"bindMessageHandlers",
"close"

		],
		"description": "Define adapter for backend"
	  },
	  "Other backend concepts": {
		"prefix": "nstwebsocketslotherbackendconcepts",
		"body": [],
		"description": "Implement other backend concepts"
	  },
	
	"MICROSERVICES": {
		"prefix": ["nstmicroservices","nstmicr"],
		"body": [
			"Overview (nstmicrover)",
			"Redis (nstmicrred)",
			"MQTT (nstmicrmqtt)",
			"NATS (nstmicrnats)",
			"RabbitMQ (nstmicrrab)",
			"Kafka (nstmicrkaf)",
			"gRPC (nstmicrgrpc)",
			"Custom transporters (nstmicrctran)",
			"Exception filters (nstmicrexfil)",
			"Pipes (nstmicrpip)",
			"Guards (nstmicrguar)",
			"Interceptors (nstmicrintr)"
		],
		"description": " Nest MICROSERVICES"
	},
	"Overview": {
		"prefix": ["nstmicroservicesoverview","nstmicrover"],
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { Transport, MicroserviceOptions } from '@nestjs/microservices';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
  "const app = await NestFactory.createMicroservice<MicroserviceOptions>(",
   " AppModule,",
    "{",
     " transport: Transport.TCP,",
    "},",
 " );",
  "await app.listen();",
"}",
"bootstrap();"
		],
		"description": "Overview of messaging and communication concepts"
	  },
	  "Redis": {
		"prefix": ["nstmicroservicesredis","nstmicrred"],
		"body": [
			"@Module({",
				"imports: [",
				 " ClientsModule.register([",
					"{",
					 " name: 'MATH_SERVICE',",
					 " transport: Transport.REDIS,",
					  "options: {",
						"host: 'localhost',",
						"port: 6379,",
					 " }",
					"},",
				  "]),",
				"]",
				"...",
			  "})"
		],
		"description": "Using Redis for messaging"
	  },
	  "MQTT": {
		"prefix": ["nstmicroservicesmqtt","nstmicrmqtt"],
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.MQTT,",
				"options: {",
				 " url: 'mqtt://localhost:1883',",
				"},",
			  "});"
		],
		"description": "Using MQTT for messaging"
	  },
	  "NATS": {
		"prefix": ["nstmicroservicesnestnats","nstmicrnats"],
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.NATS,",
				"options: {",
				  "servers: ['nats://localhost:4222'],",
				"},",
			  "});"
		],
		"description": "Using NATS for messaging"
	  },
	  "RabbitMQ": {
		"prefix": ["nstmicroservicesrabbitmq","nstmicrrab"],
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.RMQ,",
				"options: {",
				  "urls: ['amqp://localhost:5672'],",
				  "queue: 'cats_queue',",
				  "queueOptions: {",
					"durable: false",
				 " },",
				"},",
			  "});"
		],
		"description": "Using RabbitMQ for messaging"
	  },
	  "Kafka": {
		"prefix": ["nstmicroserviceskafka","nstmicrkaf"],
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.KAFKA,",
				"options: {",
				 " client: {",
					"brokers: ['localhost:9092'],",
				 " }",
				"}",
			  "});"
		],
		"description": "Using Kafka for messaging"
	  },
	  "gRPC": {
		"prefix": ["nstmicroservicesgrpc","nstmicrgrpc"],
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.GRPC,",
				"options: {",
				  "package: 'hero',",
				  "protoPath: join(__dirname, 'hero/hero.proto'),",
				"},",
			 " });"
		],
		"description": "Using gRPC for communication"
	  },
	  "Custom transporters": {
		"prefix": ["nstmicroservicescustomtransporters","nstmicrctran"],
		"body": [
			"import { CustomTransportStrategy, Server } from '@nestjs/microservices';",

"class GoogleCloudPubSubServer",
  "extends Server",
  "implements CustomTransportStrategy {",
  
  "listen(callback: () => void) {",
    "callback();",
  "}",

 
 " close() {}",
"}"
		],
		"description": "Implementing custom transporters"
	  },
	  "Exception filters": {
		"prefix": ["nstmicroservicesexceptionfilters","nstmicrexfil"],
		"body": [
			"import { Catch, RpcExceptionFilter, ArgumentsHost } from '@nestjs/common';",
"import { Observable, throwError } from 'rxjs';",
"import { RpcException } from '@nestjs/microservices';",

"@Catch(RpcException)",
"export class ExceptionFilter implements RpcExceptionFilter<RpcException> {",
 " catch(exception: RpcException, host: ArgumentsHost): Observable<any> {",
    "return throwError(() => exception.getError());",
  "}",
"}"
		],
		"description": "Define exception filter for messaging"
	  },
	  "Pipes": {
		"prefix": ["nstmicroservicespipes","nstmicrpip"],
		"body": [
			"@UsePipes(new ValidationPipe())",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define pipe for messaging"
	  },
	  "Guards": {
		"prefix":[ "nstmicroservicesguards","nstmicrguar"],
		"body": [
			"@UseGuards(AuthGuard)",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define guard for messaging"
	  },
	  "Interceptors": {
		"prefix": ["nstmicroservicesinterceptors","nstmicrintr"],
		"body": [
			"@UseInterceptors(new TransformInterceptor())",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define interceptor for messaging"
	  },
	
	"CLI": {
		"prefix": ["nstcli","nstcli"],
		"body": [
			"Overview",
			"Workspaces",
			"Libraries",
			"Usage",
			"Scripts"
		],
		"description": " Nest CLI"
	},
	"Overview": {
		"prefix": "CLIoverview",
		"body": [
			
		],
		"description": "Overview of workspace and library concepts"
	  },
	  "Workspaces": {
		"prefix": "CLIworkspaces",
		"body": [
			
		],
		"description": "Setting up and using workspaces"
	  },
	  "Libraries": {
		"prefix": "CLIlibraries",
		"body": [
			
		],
		"description": "Creating and managing libraries"
	  },
	  "Usage": {
		"prefix": "CLIusage",
		"body": [
			
		],
		"description": "Using workspaces and libraries in projects"
	  },
	  "Scripts": {
		"prefix": "CLIscripts",
		"body": [
			
		],
		"description": "Defining and running scripts in projects"
	  },
	"OPENAPI": {
		"prefix": ["nstopenapi","nstopen"],
		"body": [
			"Introduction (nstopenintro)",
			"Types and Parameters(nstopentypara)",
			"Operations (nstopenoper)",
			"Security (nstopensec)",
			"Mapped Types (nstopenmapty)",
			"Decorators (nstopendec)",
			"CLI Plugin (nstopencliplu)",
			"Other features (nstopenothfea)",
			"Migration guide (nstopenmig)"
		],
		"description": " Nest OPENAPI"
	},
	"Introduction": {
		"prefix": ["nstopenapiintroduction","nstopenintro"],
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
"  const app = await NestFactory.create(AppModule);",

 " const config = new DocumentBuilder()",
    ".setTitle('Cats example')",
    ".setDescription('The cats API description')",
   " .setVersion('1.0')",
    ".addTag('cats')",
   " .build();",
  "const document = SwaggerModule.createDocument(app, config);",
  "SwaggerModule.setup('api', app, document);",

  "await app.listen(3000);",
"}",
"bootstrap();"
		],
		"description": "Introduction to GraphQL"
	  },
	  "Types and Parameters": {
		"prefix": ["nstopenapitypesparameters","nstopentypara"],
		"body": [
			"@Post()",
"async create(@Body() createCatDto: CreateCatDto) {",
  "this.catsService.create(createCatDto);",
"}"
		],
		"description": "GraphQL types and parameters"
	  },
	  "Operations": {
		"prefix": ["nstopenapioperations","nstopenoper"],
		"body": [
			"@ApiHeader({",
				"name: 'X-MyHeader',",
				"description: 'Custom header',",
			  "})",
			 " @Controller('cats')",
			 " export class CatsController {}"
			  
		],
		"description": "Performing operations in GraphQL"
	  },
	  "Security": {
		"prefix": ["nstopenapisecurity","nstopensec"],
		"body": [
			"const options = new DocumentBuilder().addSecurity('basic', {",
				"type: 'http',",
				"scheme: 'basic',",
			  "});"
		],
		"description": "Security considerations in GraphQL"
	  },
	  "Mapped Types": {
		"prefix": ["nstopenapimappedtypes","nstopenmapty"],
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",

"export class CreateCatDto {",
 " @ApiProperty()",
  "name: string;",

  "@ApiProperty()",
 " age: number;",

  "@ApiProperty()",
 " breed: string;",
"}"
		],
		"description": "Using mapped types in GraphQL"
	  },
	  "Decorators": {
		"prefix": ["nstopenapidecorators","nstopendec"],
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",

"export class CreateCatDto {",
  "@ApiProperty()",
 " name: string;",

  "@ApiProperty()",
  "age: number;",

  "@ApiProperty()",
 " breed: string;",
"}"
		],
		"description": "Applying decorators in GraphQL"
	  },
	  "CLI Plugin": {
		"prefix":[ "nstopenapicliplugin","nstopencliplu"],
		"body": [
			"export class CreateUserDto {",
				"@ApiProperty()",
				"email: string;",
			  
				"@ApiProperty()",
				"password: string;",
			  
				"@ApiProperty({ enum: RoleEnum, default: [], isArray: true })",
				"roles: RoleEnum[] = [];",
			  
				"@ApiProperty({ required: false, default: true })",
				"isEnabled?: boolean = true;",
			  "}"
		],
		"description": "Working with the GraphQL CLI plugin"
	  },
	  "Other features": {
		"prefix": ["nstopenapiotherfeatures","nstopenothfea"],
		"body": [
			"Global prefix",
			"Global parameters",
			"Multiple specifications"
		],
		"description": "Exploring other features of GraphQL"
	  },
	  "Migration guide": {
		"prefix": ["nstopenapimigrationguide","nstopenmig"],
		"body": "// Migrating to new GraphQL versions\n// ...",
		"description": "Migrating to new GraphQL versions"
	  },
	"RECIPES": {
		"prefix": ["nstrecipes","nstrec"],
		"body": [
			"REPL (nstrecrepl)",
			"CRUD generator (nstreccrud)",
			"SWC (fast compiler) (nstrecswc)",
			"Passport (auth) (nstrecpass)",
			"Hot reload (nstrechotre)",
			"MikroORM (nstrecmik)",
			"TypeORM (nstrectyp)",
			"Mongoose (nstrecmon)",
			"Sequelize (nstrecseq)",
			"Router module (nstrecrou)",
			"Swagger (nstrecswa)",
			"Health checks (nstrecheach)",
			"CQRSCompodoc (nstreccqrsc)",
			"Prisma (nstrecpri)",
			"Serve static (nstrecserv)",
			"Commander (nstreccomm)",
			"Async local storage (nstrecasylo)",
			"Automock (nstrecaut)"
		],
		"description": " Nest RECIPES"
	},
	"REPL": {
		"prefix": ["nstrecipesrepl","nstrecrepl"],
		"body":[ 
			"import { repl } from '@nestjs/core';",
		"import { AppModule } from './app.module';",
		
		"async function bootstrap() {",
		 " await repl(AppModule);",
		"}",
		"bootstrap();"],
		"description": "Working with Node.js REPL"
	  },
	  "CRUD generator": {
		"prefix": ["nstrecipescrudgenerator","nstreccrud"],
		"body":[
			
		],
		"description": "Generating CRUD operations"
	  },
	  "SWC (fast compiler)": {
		"prefix": ["nstrecipesswccompiler","nstrecswc"],
		"body": [
			"'compilerOptions': {",
				"'builder': {",
				  "'type': 'swc',",
				 " 'options': {",
					"'swcrcPath': 'infrastructure/.swcrc',",
				  "}",
				"}",
			  "}"
		],
		"description": "Using SWC (fast compiler)"
	  },
	  "Passport (auth)": {
		"prefix": ["nstrecipespassportauth","nstrecpass"],
		"body":[
			"import { Module } from '@nestjs/common';",
"import { UsersService } from './users.service';",

"@Module({",
 " providers: [UsersService],",
  "exports: [UsersService],",
"})",
"export class UsersModule {}"
		],
		"description": "Implementing authentication with Passport"
	  },
	  "Hot reload": {
		"prefix": ["nstrecipeshotreload","nstrechotre"],
		"body": [
			"declare const module: any;",

"async function bootstrap() {",
  "const app = await NestFactory.create(AppModule);",
  "await app.listen(3000);",

  "if (module.hot) {",
   " module.hot.accept();",
    "module.hot.dispose(() => app.close());",
  "}",
"}",
"bootstrap();"
		],
		"description": "Enabling hot reloading in Node.js"
	  },
	  "MikroORM": {
		"prefix": ["nstrecipesmikroorm","nstrecmik"],
		"body": [
			"@Module({",
				"imports: [",
				  "MikroOrmModule.forRoot({",
					"entities: ['./dist/entities'],",
					"entitiesTs: ['./src/entities'],",
					"dbName: 'my-db-name.sqlite3',",
					"type: 'sqlite',",
				  "}),",
				"],",
				"controllers: [AppController],",
				"providers: [AppService],",
			  "})",
			  "export class AppModule {}"
		],
		"description": "Using MikroORM for database operations"
	  },
	  "TypeORM": {
		"prefix": ["nstrecipesStypeorm","nstrectyp"],
		"body": [
			"import { DataSource } from 'typeorm';",
"import { Photo } from './photo.entity';",

"export const photoProviders = [",
 " {",
    "provide: 'PHOTO_REPOSITORY',",
   " useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),",
    "inject: ['DATA_SOURCE'],",
 " },",
"];"
		],
		"description": "Working with TypeORM for database tasks"
	  },
	  "Mongoose": {
		"prefix": ["nstrecipesmongoose","nstrecmon"],
		"body": [
			"import * as mongoose from 'mongoose';",

"export const databaseProviders = [",
 " {",
   " provide: 'DATABASE_CONNECTION',",
   " useFactory: (): Promise<typeof mongoose> =>",
     " mongoose.connect('mongodb://localhost/nest'),",
 " },",
"];"
		],
		"description": "Using Mongoose for MongoDB interactions"
	  },
	  "Sequelize": {
		"prefix": ["nstrecipessequelize","nstrecseq"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { databaseProviders } from './database.providers';",

"@Module({",
  "providers: [...databaseProviders],",
  "exports: [...databaseProviders],",
"})",
"export class DatabaseModule {}"
		],
		"description": "Integrating Sequelize ORM in Node.js"
	  },
	  "Router module": {
		"prefix": ["nstrecipesroutermodule","nstrecrou"],
		"body": [
			"@Module({",
				"imports: [",
				 " DashboardModule,",
				  "RouterModule.register([",
					"{",
					 " path: 'dashboard',",
					 " module: DashboardModule,",
					"},",
				  "]),",
				"],",
			  "})",
			  "export class AppModule {}"
		],
		"description": "Creating and using router modules"
	  },
	  "Swagger": {
		"prefix": ["nstrecipesswagger","nstrecswa"],
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
  "const app = await NestFactory.create(AppModule);",

 " const config = new DocumentBuilder()",
    ".setTitle('Cats example')",
    ".setDescription('The cats API description')",
    ".setVersion('1.0')",
    ".addTag('cats')",
    ".build();",
  "const document = SwaggerModule.createDocument(app, config);",
  "SwaggerModule.setup('api', app, document);",

  "await app.listen(3000);",
"}",
"bootstrap();"
		],
		"description": "Adding Swagger documentation to API"
	  },
	  "Health checks": {
		"prefix": ["nstrecipeshealthchecks","nstrecheach"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { TerminusModule } from '@nestjs/terminus';",

"@Module({",
  "imports: [TerminusModule]",
"})",
"export class HealthModule {}"
		],
		"description": "Implementing health checks in Node.js"
	  },
	  "CQRS": {
		"prefix": ["nstrecipescqrs","nstreccqrsc"],
		"body":[
			"@Injectable()",
"export class HeroesGameService {",
  "constructor(private commandBus: CommandBus) {}",

 " async killDragon(heroId: string, killDragonDto: KillDragonDto) {",
    "return this.commandBus.execute(",
     " new KillDragonCommand(heroId, killDragonDto.dragonId)",
    ");",
  "}",
"}"
		],
		"description": "Applying CQRS pattern in Node.js"
	  },
	  "Compodoc": {
		"prefix": ["nstrecipescompodoc","nstrecpri"],
		"body": [
			"import { Module } from '@nestjs/common';",
"import { AppController } from './app.controller';",
"import { AppService } from './app.service';",
"import { ServeStaticModule } from '@nestjs/serve-static';",
"import { join } from 'path';",

"@Module({",
  "imports: [",
    "ServeStaticModule.forRoot({",
     " rootPath: join(__dirname, '..', 'client'),",
    "}),",
  "],",
 " controllers: [AppController],",
 " providers: [AppService],",
"})",
"export class AppModule {}"
		],
		"description": "Generating documentation using Compodoc"
	  },
	  "Prisma": {
		"prefix": ["nstrecipesprisma","nstrecserv"],
		"body": "// Using Prisma ORM for database operations\n// ...",
		"description": "Using Prisma ORM for database operations"
	  },
	  "Serve static": {
		"prefix": ["nstrecipesservestatic","nstreccomm"],
		"body": "// Serving static files in Node.js\n// ...",
		"description": "Serving static files in Node.js"
	  },
	  "Commander": {
		"prefix": ["nstrecipescommander","nstrecasylo"],
		"body": "// Building command-line applications with Commander\n// ...",
		"description": "Building command-line applications with Commander"
	  },
	  "Async local storage": {
		"prefix": ["nstrecipesasynclocalstorage","nstrecaut"],
		"body": "// Managing async local storage in Node.js\n// ...",
		"description": "Managing async local storage in Node.js"
	  },
	  "Automock": {
		"prefix": "nstrecipesautomock",
		"body": [
			"import { Injectable } from '@nestjs/core';",

"@Injectable()",
"export class CatsService {",
  "constructor(",
   " private logger: Logger,",
    "private httpService: HttpService,",
   " private catsDal: CatsDal,",
 " ) {}",

  "async getAllCats() {",
    "const cats = await this.httpService.get('http://localhost:3000/api/cats');",
    "this.logger.log('Successfully fetched all cats');",
    
    "this.catsDal.saveCats(cats);",
  "}",
"}"
		],
		"description": "Automocking dependencies in Node.js tests"
	  },
	"FAQ": {
		"prefix": ["nstfaq","nstfq"],
		"body": [
			"Serverless (nstfqser)",
			"HTTP adapter (nstfqhttpad)",
			"Global path prefix (nstfqgppre)",
			"Raw body (nstfqrbo)",
			"Hybrid application (nstfqhyapp)",
			"HTTPS & multiple servers (nstfqhttpmul)",
			"Request lifecycle (nstfqreqlif)",
			"Common errors (nstfqcomerr)",
			"Examples (nstfqex)"
		],
		"description": " Nest FAQ"
	},
	"Serverless": {
		"prefix": ["FAQserverless","nstfqser"],
		"body": [
			"import * as express from 'express';",

"async function bootstrap() {",
 " const app = express();",
  "app.get('/', (req, res) => res.send('Hello world!'));",
  "await new Promise<void>((resolve) => app.listen(3000, resolve));",
"}",
"bootstrap();",

"import { NestFactory } from '@nestjs/core';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
 " const app = await NestFactory.create(AppModule, { logger: ['error'] });",
 " await app.listen(3000);",
"}",
"bootstrap();",

"// #3 Nest as a Standalone application (no HTTP server)",
"import { NestFactory } from '@nestjs/core';",
"import { AppModule } from './app.module';",
"import { AppService } from './app.service';",

"async function bootstrap() {",
  "const app = await NestFactory.createApplicationContext(AppModule, {",
    "logger: ['error'],",
 " });",
 " console.log(app.get(AppService).getHello());",
"}",
"bootstrap();",

"// #4 Raw Node.js script",
"async function bootstrap() {",
  "console.log('Hello world!');",
"}",
"bootstrap();"
		],
		"description": "Setting up a Serverless application"
	  },
	  "HTTP adapter": {
		"prefix": ["FAQhttpadapter","nstfqhttpad"],
		"body": [
			"export class CatsService {",
				"constructor(private adapterHost: HttpAdapterHost) {}",
			  "}"
		],
		"description": "Creating an HTTP adapter for Serverless"
	  },
	  "Global path prefix": {
		"prefix": ["FAQglobalpathprefix","nstfqgppre"],
		"body": [
			"app.setGlobalPrefix('v1', {",
				"exclude: [{ path: 'health', method: RequestMethod.GET }],",
			 " });"
		],
		"description": "Configuring a global path prefix in Serverless"
	  },
	  "Raw body": {
		"prefix": ["FAQrawbody","nstfqrbo"],
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import type { NestExpressApplication } from '@nestjs/platform-express';",
"import { AppModule } from './app.module';",

"// in the 'bootstrap' function",
"const app = await NestFactory.create<NestExpressApplication>(AppModule, {",
  "rawBody: true,",
"});",
"await app.listen(3000);"
		],
		"description": "Accessing the raw request body in Serverless"
	  },
	  "Hybrid application": {
		"prefix": ["FAQhybridapp","nstfqhyapp"],
		"body": [
			"const app = await NestFactory.create(AppModule);",
"const microservice = app.connectMicroservice<MicroserviceOptions>({",
  "transport: Transport.TCP,",
"});",
"await app.startAllMicroservices();",
"await app.listen(3001);"
		],
		"description": "Building a hybrid Serverless application"
	  },
	  "HTTPS & multiple servers": {
		"prefix": ["FAQhttpsmultipleservers","nstfqhttpmul"],
		"body": [
			"const httpsOptions = {",
				"key: fs.readFileSync('./secrets/private-key.pem'),",
				"cert: fs.readFileSync('./secrets/public-certificate.pem'),",
			  "};",
			 " const app = await NestFactory.create(AppModule, {",
				"httpsOptions,",
			  "});",
			  "await app.listen(3000);"
		],
		"description": "Using HTTPS and multiple servers in Serverless"
	  },
	  "Request lifecycle": {
		"prefix": ["FAQrequestlifecycle","nstfqreqlif"],
		"body": [
			"@UseGuards(Guard1, Guard2)",
"@Controller('cats')",
"export class CatsController {",
  "constructor(private catsService: CatsService) {}",

 " @UseGuards(Guard3)",
  "@Get()",
  "getCats(): Cats[] {",
    "return this.catsService.getCats();",
  "}",
"}"
		],
		"description": "Understanding the request lifecycle in Serverless"
	  },
	  "Common errors": {
		"prefix": ["FAQcommonerrors","nstfqcomerr"],
		"body": "// Handling common errors in Serverless applications\n// ...",
		"description": "Handling common errors in Serverless applications"
	  },
	  "Examples": {
		"prefix": ["FAQexamples","nstfqex"],
		"body": "// Practical examples of Serverless applications\n// ...",
		"description": "Practical examples of Serverless applications"
	  },
	"DEVTOOLS": {
		"prefix": ["nstdev"],
		"body": [
			"Overview",
			"CI/CD integration"
		],
		"description": "RECIPESDEVTOOLS"
	},
	"DISCOVER": {
		"prefix": ["nstdis"],
		"body": [
			"Who is using Nest?"
		],
		"description": " Nest DISCOVER"
	}
}