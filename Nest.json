{
	"Nest": {
		"prefix": "Nest",
		"body": [
			"OVERVIEW",
			"FUNDAMENTALS",
			"TECHNIQUES",
			"SECURITY",
			"GRAPHQL",
			"WEBSOCKETS",
			"MICROSERVICES",
			"STANDALONE APPS",
			"CLI",
			"OPENAPI",
			"RECIPES",
			"FAQ",
			"NEWDEVTOOLS",
			"MIGRATION GUIDE",
			"OFFICIAL COURSES",
			"DISCOVER"
		],
		"description": "Nest"
	},
	"OVERVIEW": {
		"prefix": "OVERVIEW",
		"body": [
			"First steps",
			"Controllers",
			"Providers",
			"Modules",
			"Middleware",
			"Exception filters",
			"Pipes",
			"Guards",
			"Interceptors",
			"Custom decorators"
		],
		"description": "Nest OVERVIEW"
	},
	"First steps": {
		"prefix": "OVERVIEWfirststeps",
		"body": [

		],
		"description": "Getting started with web development"
	  },
	  "Controllers": {
		"prefix": "OVERVIEWcontrollers",
		"body": [
			"import { Controller, Get, Post, Body } from '@nestjs/common';",
"import { UserService } from './user.service';",
"import { CreateUserDto } from './dto/create-user.dto';",

"@Controller('users')",
"export class UserController {",
  "constructor(private readonly userService: UserService) {}",

  "@Get()",
  "findAll() {",
   " return this.userService.findAll();",
  "}",
  "@Post()",
  "create(@Body() createUserDto: CreateUserDto) {",
    "return this.userService.create(createUserDto);",
  "}",
"}"
		],
		"description": "Create controller classes"
	  },
	  "Providers": {
		"prefix": "OVERVIEWproviders",
		"body": [
			"import { Injectable, Inject } from '@nestjs/common';",
			"import { UserService } from './user.service';",
			
			"@Injectable()",
			"export class UserController {",
			  "constructor(@Inject(UserService) private readonly userService: UserService) {}",
			"}"
		],
		"description": "Implement provider classes"
	  },
	  "Modules": {
		"prefix": "OVERVIEWmodules",
		"body":[
			"import { Module } from '@nestjs/common';",
			"import { CatsController } from './cats.controller';",
			"import { CatsService } from './cats.service';",
			
			"@Module({",
			  "controllers: [CatsController],",
			  "providers: [CatsService],",
			  "exports: [CatsService]",
			"})"
		],
		"description": "Define application modules"
	  },
	  "Middleware": {
		"prefix": "OVERVIEWmiddleware",
		"body": [
			"import { MiddlewareConsumer, Module } from '@nestjs/common';",
			"import { LoggerMiddleware } from './logger.middleware';",
			"import { UserController } from './user.controller';",
			
			"@Module({",
			  "controllers: [UserController],",
			"})",
			"export class UserModule {",
			  "configure(consumer: MiddlewareConsumer) {",
				"consumer.apply(LoggerMiddleware).forRoutes('users');",
			 " }",
			"}"
		],
		"description": "Create custom middleware"
	  },
	  "Exception filters": {
		"prefix": "OVERVIEWexceptionfilters",
		"body": [
			"async findAll() {",
				"try {",
				  "await this.service.findAll()",
				"} catch (error) { ",
				  "throw new HttpException({",
					"status: HttpStatus.FORBIDDEN,",
					"error: 'This is a custom message',",
				  "}, HttpStatus.FORBIDDEN, {",
					"cause: error",
				  "});",
				"}",
			  "}"
		],
		"description": "Implement exception filters"
	  },
	  "Pipes": {
		"prefix": "OVERVIEWpipes",
		"body":[
			"ValidationPipe",
"ParseIntPipe",
"ParseFloatPipe",
"ParseBoolPipe",
"ParseArrayPipe",
"ParseUUIDPipe",
"ParseEnumPipe",
"DefaultValuePipe",
"ParseFilePipe"
		],
		"description": "Create custom pipes"
	  },
	  "Guards": {
		"prefix": "OVERVIEWguards",
		"body": [
			"import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';",
"import { Observable } from 'rxjs';",

"@Injectable()",
"export class AuthGuard implements CanActivate {",
  "canActivate(",
   " context: ExecutionContext,",
  "): boolean | Promise<boolean> | Observable<boolean> {",
   " const request = context.switchToHttp().getRequest();",
    "return validateRequest(request);",
 " }",
"}"
		],
		"description": "Implement route guards"
	  },
	  "Interceptors": {
		"prefix": "OVERVIEWinterceptors",
		"body": [
			"import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';",
"import { Observable } from 'rxjs';",
"import { tap } from 'rxjs/operators';",

"@Injectable()",
"export class LoggingInterceptor implements NestInterceptor {",
  "intercept(context: ExecutionContext, next: CallHandler): Observable<any> {",
    "console.log('Before...');",

   " const now = Date.now();",
    "return next",
      ".handle()",
      ".pipe(",
       " tap(() => console.log(`After... ${Date.now() - now}ms`)),",
      ");",
  "}",
"}"
		],
		"description": "Create custom interceptors"
	  },
	  "Custom decorators": {
		"prefix": "OVERVIEWdecorators",
		"body": [
			"import { createParamDecorator, ExecutionContext } from '@nestjs/common';",

"export const User = createParamDecorator(",
  "(data: unknown, ctx: ExecutionContext) => {",
   " const request = ctx.switchToHttp().getRequest();",
    "return request.user;",
 " },",
");"
		],
		"description": "Define custom decorators"
	  },
	"FUNDAMENTALS": {
		"prefix": "NestFUNDAMENTALS",
		"body": [
			"Custom providers",
			"Asynchronous providers",
			"Dynamic modules",
			"Injection scopes",
			"Circular dependency",
			"Module reference",
			"Lazy-loading modules",
			"Execution context",
			"Lifecycle events",
			"Platform agnosticism",
			"Testing"
		],
		"description": "  FUNDAMENTALS"
	},
	"Custom providers": {
		"prefix": "FUNDAMENTALScustomproviders",
		"body": [
			"Value providers",
			"Class providers",
			"Factory providers",
			"Non-service based providers",
			"Export custom provider"
		],
		"description": "Create custom providers"
	  },
	  "Asynchronous providers": {
		"prefix": "FUNDAMENTALSasyncproviders",
		"body": [
			"{",
				"provide: 'ASYNC_CONNECTION',",
				"useFactory: async () => {",
				 " const connection = await createConnection(options);",
				  "return connection;",
				"},",
			 " }"
		],
		"description": "Implement asynchronous providers"
	  },
	  "Dynamic modules": {
		"prefix": "FUNDAMENTALSdynamicmodules",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { UsersService } from './users.service';",

"@Module({",
  "providers: [UsersService],",
  "exports: [UsersService],",
"})",
"export class UsersModule {}"
		],
		"description": "Create dynamic modules"
	  },
	  "Injection scopes": {
		"prefix": "FUNDAMENTALSinjectionscopes",
		"body": [
			"Usage",
		"Controller scope",
		"Scope hierarchy",
		"Request provider",
		"Inquirer provider"
	],
		"description": "Define injection scopes"
	  },
	  "Circular dependency": {
		"prefix": "FUNDAMENTALScirculardependency",
		"body": [
			"Forward reference",
			"ModuleRef class alternative",
			"Module forward reference"
		],
		"description": "Resolve circular dependencies"
	  },
	  "Module reference": {
		"prefix": "FUNDAMENTALSmodulereference",
		"body": [
			"Retrieving instances",
			"Resolving scoped providers",
			"Registering REQUEST provider",
			"Getting current sub-tree",
			"Instantiating custom classes dynamically"

		],
		"description": "Access the module reference"
	  },
	  "Lazy-loading modules": {
		"prefix": "FUNDAMENTALSlazyloading",
		"body": [
			"const { LazyModule } = await import('./lazy.module');",
"const moduleRef = await this.lazyModuleLoader.load(() => LazyModule);",
"Load 'LazyModule' attempt: 1",
"time: 2.379ms",
"Load 'LazyModule' attempt: 2",
"time: 0.294ms",
"Load 'LazyModule' attempt: 3",
"time: 0.303ms"
		],
		"description": "Lazy-load modules"
	  },
	  "Execution context": {
		"prefix": "FUNDAMENTALSexecutioncontext",
		"body": [
			"Current application context",
			"Host handler arguments",
			"ExecutionContext class"
		],
		"description": "Access the execution context"
	  },
	  "Lifecycle events": {
		"prefix": "FUNDAMENTALSlifecycleevents",
		"body": [
			"Usage",
			"Asynchronous initialization",
			"Application shutdown"
		],
		"description": "Use lifecycle events"
	  },
	  "Platform agnosticism": {
		"prefix": "FUNDAMENTALSplatformagnostic",
		"body": "// Write platform-agnostic code",
		"description": "Ensure platform agnosticism"
	  },
	  "Testing": {
		"prefix": "FUNDAMENTALStesting",
		"body": [
			"Installation",
			"Unit testing",
			"Testing utilities",
			"Auto mocking",
			"End-to-end testing",
			"Overriding globally registered enhancers"
		],
		"description": "Write tests using TestingModule"
	  },
	"TECHNIQUES": {
		"prefix": "NestTECHNIQUES",
		"body": [
			"Configuration",
			"Database",
			"Mongo",
			"Validation",
			"Caching",
			"Serialization",
			"Versioning",
			"Task scheduling",
			"Queues",
			"Logging",
			"Cookies",
			"Events",
			"Compression",
			"File upload",
			"Streaming files",
			"HTTP module",
			"Model-View-Controller",
			"Performance (Fastify)",
			"Server-Sent Events"
		],
		"description": " Nest TECHNIQUES"
	},
	"Configuration": {
		"prefix": "TECHNIQUESconfiguration",
		"body": [
			"Installation",
			"Getting started",
			"Custom env file path",
			"Disable env variables loading",
			"Use module globally",
			"Custom configuration files"
		],
		"description": "Define configuration settings"
	  },
	  "Database": {
		"prefix": "TECHNIQUESdatabase",
		"body": [
			"TypeORM Integration",
			"Repository pattern",
			"Relations",
			"Auto-load entities",
			"Separating entity definition",
			"TypeORM Transactions",
			"Subscribers",
			"Migrations",
			"Multiple databases",
			"Testing",
			"Async configuration",
			"Custom DataSource Factory"
		],
		"description": "Connect to the database"
	  },
	  "Mongo": {
		"prefix": "TECHNIQUESmongo",
		"body": [
			
		],
		"description": "Connect to MongoDB"
	  },
	  "Validation": {
		"prefix": "TECHNIQUESvalidation",
		"body": [
			"ValidationPipe",
"ParseIntPipe",
"ParseBoolPipe",
"ParseArrayPipe",
"ParseUUIDPipe"
		],
		"description": "Create validation schema"
	  },
	  "Caching": {
		"prefix": "TECHNIQUEScaching",
		"body": [
			"In-memory cache",
			"Interacting with the Cache store",
			"Customize caching",
			"Use module globally"
		],
		"description": "Cache data"
	  },
	  "Serialization": {
		"prefix": "TECHNIQUESserialization",
		"body": [
			"Exclude properties",
			"Expose properties",
			"Transform"
		],
		"description": "Serialize data"
	  },
	  "Versioning": {
		"prefix": "TECHNIQUESversioning",
		"body": [
			"URI Versioning Type",
			"Header Versioning Type",
			"Media Type Versioning Type",
			"Custom Versioning Type",
			"Controller versions",
			"Route versions",
			"Multiple versions",
			"Global default version",
			"Middleware versioning"
		],
		"description": "Implement API versioning"
	  },
	  "Task scheduling": {
		"prefix": "TECHNIQUEStaskscheduling",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { ScheduleModule } from '@nestjs/schedule';",

"@Module({",
 " imports: [",
    "ScheduleModule.forRoot()",
 " ],",
"})",
"export class AppModule {}"
		],
		"description": "Schedule tasks"
	  },
	  "Queues": {
		"prefix": "TECHNIQUESqueues",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { BullModule } from '@nestjs/bull';",

"@Module({",
 " imports: [",
    "BullModule.forRoot({",
      "redis: {",
       " host: 'localhost',",
       " port: 6379,",
      "},",
    "}),",
  "],",
"})"
		],
		"description": "Add tasks to queues"
	  },
	  "Logging": {
		"prefix": "TECHNIQUESlogging",
		"body": [
			"Basic customization",
			"Custom implementation",
			"Extend built-in logger",
			"Dependency injection",
			"Using the logger for application logging"
		],
		"description": "Log messages"
	  },
	  "Cookies": {
		"prefix": "TECHNIQUEScookies",
		"body": [
			"Use with Express (default)",
			"Use with Fastify",
			"Creating a custom decorator (cross-platform)"
		],
		"description": "Set cookies in the response"
	  },
	  "Events": {
		"prefix": "TECHNIQUESevents",
		"body": [
			"Dispatching Events",
			"Listening to Events"
		],
		"description": "Emit events"
	  },
	  "Compression": {
		"prefix": "TECHNIQUEScompression",
		"body": [
			"import compression from '@fastify/compress';",
"// somewhere in your initialization file",
"await app.register(compression);"
		],
		"description": "Enable response compression"
	  },
	  "File upload": {
		"prefix": "TECHNIQUESfileupload",
		"body": [
			"@Post('upload')",
"@UseInterceptors(FileInterceptor('file'))",
"uploadFile(@UploadedFile() file: Express.Multer.File) {",
 " console.log(file);",
"}"
		],
		"description": "Handle file uploads"
	  },
	  "Streaming files": {
		"prefix": "TECHNIQUESstreamingfiles",
		"body": [
			"@Controller('file')",
"export class FileController {",
  "@Get()",
  "getFile(@Res() res: Response) {",
   " const file = createReadStream(join(process.cwd(), 'package.json'));",
    "file.pipe(res);",
  "}",
"}"
		],
		"description": "Stream files in responses"
	  },
	  "HTTP module": {
		"prefix": "TECHNIQUEShttpmodule",
		"body":[
			"import { catchError, firstValueFrom } from 'rxjs';",

"@Injectable()",
"export class CatsService {",
  "private readonly logger = new Logger(CatsService.name);",
  "constructor(private readonly httpService: HttpService) {}",

  "async findAll(): Promise<Cat[]> {",
    "const { data } = await firstValueFrom(",
      "this.httpService.get<Cat[]>('http://localhost:3000/cats').pipe(",
        "catchError((error: AxiosError) => {",
          "this.logger.error(error.response.data);",
         " throw 'An error happened!';",
        "}),",
      "),",
    ");",
    "return data;",
  "}",
"}"
		],
		"description": "Create an HTTP server"
	  },
	  "Session": {
		"prefix": "TECHNIQUESsession",
		"body": [
			
"import * as session from 'express-session';",
"// somewhere in your initialization file",
"app.use(",
  "session({",
    "secret: 'my-secret',",
   " resave: false,",
   " saveUninitialized: false,",
 " }),",
");"
		],
		"description": "Manage user sessions"
	  },
	  "Model-View-Controller": {
		"prefix": "TECHNIQUESmvc",
		"body": [
			"import { Get, Controller, Render } from '@nestjs/common';",

"@Controller()",
"export class AppController {",
  "@Get()",
  "@Render('index')",
 " root() {",
   " return { message: 'Hello world!' };",
  "}",
"}"
		],
		"description": "Implement Model-View-Controller (MVC) architecture"
	  },
	  "Performance (Fastify)": {
		"prefix": "TECHNIQUESfastifyperformance",
		"body": [
			"async function bootstrap() {",
				"const app = await NestFactory.create<NestFastifyApplication>(",
				  "AppModule,",
				  "new FastifyAdapter(),",
				");",
				"await app.listen(3000, '0.0.0.0');",
			  "}"
			  
		],
		"description": "Optimize performance using Fastify"
	  },
	  "Server-Sent Events": {
		"prefix": "TECHNIQUESsse",
		"body": [
			"@Sse('sse')",
"sse(): Observable<MessageEvent> {",
 " return interval(1000).pipe(map((_) => ({ data: { hello: 'world' } })));",
"}"
		],
		"description": "Implement Server-Sent Events"
	  },
	"SECURITY": {
		"prefix": "NestSECURITY",
		"body": [
			"Authentication",
			"Authorization",
			"Encryption and Hashing",
			"Helmet",
			"CORS",
			"CSRF Protection",
			"Rate limiting"
		],
		"description": " Nest SECURITY"
	},
	"Authentication": {
		"prefix": "SECURITYauthentication",
		"body": [
			"Creating an authentication module",
			"Implementing the 'Sign in' endpoint"
		],
		"description": "Authenticate user"
	  },
	  "Authorization": {
		"prefix": "SECURITYauthorization",
		"body": [
			"Basic RBAC implementation",
			"Claims-based authorization",
			"Integrating CASL",
			"Advanced: Implementing a PoliciesGuard"
		],
		"description": "Authorize user"
	  },
	  "Encryption and Hashing": {
		"prefix": "SECURITYencryptionhashing",
		"body": [
			"import { createDecipheriv } from 'crypto';",

"const decipher = createDecipheriv('aes-256-ctr', key, iv);",
"const decryptedText = Buffer.concat([",
 " decipher.update(encryptedText),",
  "decipher.final(),",
"]);",
"// hashing",
"import * as bcrypt from 'bcrypt';",

"const saltOrRounds = 10;",
"const password = 'random_password';",
"const hash = await bcrypt.hash(password, saltOrRounds);"
		],
		"description": "Encrypt data and hash passwords"
	  },
	  "Helmet": {
		"prefix": "SECURITYhelmet",
		"body": [
			"app.use(helmet({",
				"crossOriginEmbedderPolicy: false,",
				"contentSecurityPolicy: {",
				  "directives: {",
					"imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],",
					"scriptSrc: [`'self'`, `https: 'unsafe-inline'`],",
					"manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],",
					"frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],",
				  "},",
				"},",
			  "}));"
		],
		"description": "Enable Helmet middleware for security headers"
	  },
	  "CORS": {
		"prefix": "SECURITYcors",
		"body": [
			"const app = await NestFactory.create(AppModule);",
"app.enableCors();",
"await app.listen(3000);"
		],
		"description": "Enable Cross-Origin Resource Sharing"
	  },
	  "CSRF Protection": {
		"prefix": "SECURITYcsrf",
		"body": [
			"import * as csurf from 'csurf';",

"// somewhere in your initialization file",
"app.use(csurf());"

		],
		"description": "Enable Cross-Site Request Forgery protection"
	  },
	  "Rate limiting": {
		"prefix": "SECURITYratelimiting",
		"body": [
			"@Module({",
				"imports: [",
				 " ThrottlerModule.forRoot({",
					"ttl: 60,",
					"limit: 10,",
				  "}),",
				"],",
			  "})"
		],
		"description": "Implement rate limiting to prevent abuse"
	  },
	"GRAPHQL": {
		"prefix": "NestGRAPHQL",
		"body": [
			"Quick start",
			"Resolvers",
			"Mutations",
			"Subscriptions",
			"Scalars",
			"Directives",
			"Interfaces",
			"Unions and Enums",
			"Field middleware",
			"Mapped types",
			"Plugins",
			"Complexity",
			"Extensions",
			"CLI Plugin",
			"Generating SDL",
			"Sharing models",
			"Other features",
			"Federation",
			"Migration guide"
		],
		"description": " Nest GRAPHQL"
	},
	"Quick start": {
		"prefix": "GRAPHQLquickstart",
		"body": "// Quick start with GraphQL\nconst { ${1:graphql}, ${2:buildSchema} } = require('graphql');\n\nconst schema = ${3:buildSchema}(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst root = {\n  hello: () => 'Hello, world!'\n};",
		"description": "Quick start with GraphQL"
	  },
	  "Resolvers": {
		"prefix": "GRAPHQLresolvers",
		"body": [
			"Code first",
			"Object types"
		],
		"description": "Define GraphQL resolvers"
	  },
	  "Mutations": {
		"prefix": "GRAPHQLmutations",
		"body": [
			"import { InputType, Field } from '@nestjs/graphql';",

"@InputType()",
"export class UpvotePostInput {",
"  @Field()",
 " postId: number;",
"}"
		],
		"description": "Define GraphQL mutations"
	  },
	  "Subscriptions": {
		"prefix": "GRAPHQLsubscriptions",
		"body": [
			"@Subscription(returns => Comment, {",
				"name: 'commentAdded',",
			  "})",
			 " subscribeToCommentAdded() {",
				"return pubSub.asyncIterator('commentAdded');",
			  "}"
		],
		"description": "Define GraphQL subscriptions"
	  },
	  "Scalars": {
		"prefix": "GRAPHQLscalars",
		"body": [
			"import { Scalar, CustomScalar } from '@nestjs/graphql';",
"import { Kind, ValueNode } from 'graphql';",

"@Scalar('Date', (type) => Date)",
"export class DateScalar implements CustomScalar<number, Date> {",
"  description = 'Date custom scalar type';",

 " parseValue(value: number): Date {",
    "return new Date(value); // value from the client",
 " }",

 " serialize(value: Date): number {",
   " return value.getTime(); // value sent to the client",
  "}",

  "parseLiteral(ast: ValueNode): Date {",
    "if (ast.kind === Kind.INT) {",
      "return new Date(ast.value);",
    "}",
    "return null;",
  "}",
"}"
		],
		"description": "Define custom GraphQL scalar type"
	  },
	  "Directives": {
		"prefix": "GRAPHQLdirectives",
		"body": [
			"export function upperDirectiveTransformer(",
 " schema: GraphQLSchema,",
  "directiveName: string,",
") {",
  "return mapSchema(schema, {",
    "[MapperKind.OBJECT_FIELD]: (fieldConfig) => {",
      "const upperDirective = getDirective(",
        "schema,",
        "fieldConfig,",
        "directiveName,",
      ")?.[0];",

      "if (upperDirective) {",
        "const { resolve = defaultFieldResolver } = fieldConfig;",

      "  fieldConfig.resolve = async function (source, args, context, info) {",
          "const result = await resolve(source, args, context, info);",
          "if (typeof result === 'string') {",
            "return result.toUpperCase();",
          "}",
         " return result;",
        "};",
       " return fieldConfig;"
		],
		"description": "Define custom GraphQL directive"
	  },
	  "Interfaces": {
		"prefix": "GRAPHQLinterfaces",
		"body": [
			"import { Field, ID, InterfaceType } from '@nestjs/graphql';",

"@InterfaceType()",
"export abstract class Character {",
  "@Field((type) => ID)",
  "id: string;",

 " @Field()",
  "name: string;",
"}"
		],
		"description": "Define GraphQL interface"
	  },
	  "Unions and Enums": {
		"prefix": "GRAPHQLunionsenums",
		"body": [
			"import { Field, ObjectType } from '@nestjs/graphql';",

"@ObjectType()",
"export class Book {",
 " @Field()",
  "title: string;",
"}"
		],
		"description": "Define GraphQL union and enum"
	  },
	  "Field middleware": {
		"prefix": "GRAPHQLieldmiddleware",
		"body": [
			"import { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';",

"const loggerMiddleware: FieldMiddleware = async (",
  "ctx: MiddlewareContext,",
  "next: NextFn,",
") => {",
  "const value = await next();",
 " console.log(value);",
  "return value;",
"};"
		],
		"description": "Define field middleware for GraphQL fields"
	  },
	  "Mapped types": {
		"prefix": "GRAPHQLmappedtypes",
		"body": [
			"Partia",
			"Pick",
			"Omit",
			"Intersection",
			"Composition"
		],
		"description": "Define GraphQL mapped type"
	  },
	  "Plugins": {
		"prefix": "GRAPHQLplugins",
		"body": [
			"Custom plugins",
			"Using external plugins",
			"Plugins with Mercurius"
		],
		"description": "Define and use GraphQL plugins"
	  },
	  "Complexity": {
		"prefix": "GRAPHQLcomplexity",
		"body": [
			"Field-level complexity",
			"Query/Mutation-level complexity"
		],
		"description": "Implement complexity analysis for queries"
	  },
	  "Extensions": {
		"prefix": "GRAPHQLextensions",
		"body": [
			"Adding custom metadata",
			"Using custom metadata"
		],
		"description": "Define and use GraphQL extensions"
	  },
	  "CLI Plugin": {
		"prefix": "GRAPHQLcliplugin",
		"body": [
			
		],
		"description": "Define a CLI plugin for GraphQL"
	  },
	  "Generating SDL": {
		"prefix": "GRAPHQLgeneratingsdl",
		"body": [],
		"description": "Generate GraphQL SDL from schema"
	  },
	  "Sharing models": {
		"prefix": "GRAPHQLsharingmodels",
		"body": [
			"resolve: { // see: https://webpack.js.org/configuration/resolve/",
		"alias: {",
			"'@nestjs/graphql': path.resolve(__dirname, '../node_modules/@nestjs/graphql/dist/extra/graphql-model-shim')",
		"}",
	  "},"
		],
		"description": "Share models between GraphQL and database"
	  },
	  "Other features": {
		"prefix": "GRAPHQLotherfeatures",
		"body": [
			"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';",
			"import { GqlExecutionContext } from '@nestjs/graphql';",
			
			"@Injectable()",
			"export class AuthGuard implements CanActivate {",
			  "canActivate(context: ExecutionContext): boolean {",
				"const ctx = GqlExecutionContext.create(context);",
				"return true;",
			  "}",
			"}"
		],
		"description": "Implement other GraphQL features"
	  },
	  "Federation": {
		"prefix": "GRAPHQLfederation",
		"body": [
			"import { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';",
"import { UsersService } from './users.service';",

"@Resolver('User')",
"export class UsersResolver {",
  "constructor(private usersService: UsersService) {}",

 " @Query()",
 " getUser(@Args('id') id: string) {",
   " return this.usersService.findById(id);",
  "}",

 " @ResolveReference()",
 " resolveReference(reference: { __typename: string; id: string }) {",
    "return this.usersService.findById(reference.id);",
  "}",
"}"
		],
		"description": "Implement Apollo Federation for microservices"
	  },
	  "Migration guide": {
		"prefix": "GRAPHQLmigrationguide",
		"body":[
			"$ npm uninstall apollo-server-express",
"$ npm install @apollo/server",
"$ npm uninstall apollo-server-fastify",
"$ npm install @apollo/server @as-integrations/fastify",
"$ npm install @mercuriusjs/gateway"
		],
		"description": "Migration guide for GraphQL"
	  },
	"WEBSOCKETSL": {
		"prefix": "NestWEBSOCKETSL",
		"body": [
			"Gateways",
			"Exception filters",
			"Pipes",
			"Guards",
			"Interceptors",
			"Adapters"
		],
		"description": " Nest WEBSOCKETSL"
	},
	"Gateways": {
		"prefix": "WEBSOCKETSLgateways",
		"body": "// Define gateway\nclass ${1:GatewayName}Gateway {\n  // Implement gateway logic\n}",
		"description": "Define gateway for backend"
	  },
	  "Exceptionfilters": {
		"prefix": "WEBSOCKETSLexceptionfilters",
		"body": [
			"import { Catch, ArgumentsHost } from '@nestjs/common';",
"import { BaseWsExceptionFilter } from '@nestjs/websockets';",

"@Catch()",
"export class AllExceptionsFilter extends BaseWsExceptionFilter {",
  "catch(exception: unknown, host: ArgumentsHost) {",
    "super.catch(exception, host);",
  "}",
"}"
		],
		"description": "Define exception filter for backend"
	  },
	  "Pipes": {
		"prefix": "WEBSOCKETSLpipes",
		"body": [
			"@UsePipes(new ValidationPipe())",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
  "const event = 'events';",
 " return { event, data };",
"}"
		],
		"description": "Define pipe for backend"
	  },
	  "Guards": {
		"prefix": "WEBSOCKETSLguards",
		"body": [
			"@UseGuards(AuthGuard)",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
  "const event = 'events';",
  "return { event, data };",
"}"
		],
		"description": "Define guard for backend"
	  },
	  "Interceptors": {
		"prefix": "WEBSOCKETSLinterceptors",
		"body": [
			"@UseInterceptors(new TransformInterceptor())",
"@SubscribeMessage('events')",
"handleEvent(client: Client, data: unknown): WsResponse<unknown> {",
"  const event = 'events';",
  "return { event, data };",
"}"
		],
		"description": "Define interceptor for backend"
	  },
	  "Adapters": {
		"prefix": "WEBSOCKETSLadapters",
		"body": [
			"create"	,
"bindClientConnect",
"bindClientDisconnect",
"bindMessageHandlers",
"close"

		],
		"description": "Define adapter for backend"
	  },
	  "Other backend concepts": {
		"prefix": "WEBSOCKETSLotherbackendconcepts",
		"body": [],
		"description": "Implement other backend concepts"
	  },
	
	"MICROSERVICES": {
		"prefix": "Nest MICROSERVICES",
		"body": [
			"Overview",
			"Redis",
			"MQTT",
			"NATS",
			"RabbitMQ",
			"Kafka",
			"gRPC",
			"Custom transporters",
			"Exception filters",
			"Pipes",
			"Guards",
			"Interceptors"
		],
		"description": " Nest MICROSERVICES"
	},
	"Overview": {
		"prefix": "MICROSERVICESoverview",
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { Transport, MicroserviceOptions } from '@nestjs/microservices';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
  "const app = await NestFactory.createMicroservice<MicroserviceOptions>(",
   " AppModule,",
    "{",
     " transport: Transport.TCP,",
    "},",
 " );",
  "await app.listen();",
"}",
"bootstrap();"
		],
		"description": "Overview of messaging and communication concepts"
	  },
	  "Redis": {
		"prefix": "MICROSERVICESredis",
		"body": [
			"@Module({",
				"imports: [",
				 " ClientsModule.register([",
					"{",
					 " name: 'MATH_SERVICE',",
					 " transport: Transport.REDIS,",
					  "options: {",
						"host: 'localhost',",
						"port: 6379,",
					 " }",
					"},",
				  "]),",
				"]",
				"...",
			  "})"
		],
		"description": "Using Redis for messaging"
	  },
	  "MQTT": {
		"prefix": "MICROSERVICESmqtt",
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.MQTT,",
				"options: {",
				 " url: 'mqtt://localhost:1883',",
				"},",
			  "});"
		],
		"description": "Using MQTT for messaging"
	  },
	  "NATS": {
		"prefix": "MICROSERVICESNestnats",
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.NATS,",
				"options: {",
				  "servers: ['nats://localhost:4222'],",
				"},",
			  "});"
		],
		"description": "Using NATS for messaging"
	  },
	  "RabbitMQ": {
		"prefix": "MICROSERVICESrabbitmq",
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.RMQ,",
				"options: {",
				  "urls: ['amqp://localhost:5672'],",
				  "queue: 'cats_queue',",
				  "queueOptions: {",
					"durable: false",
				 " },",
				"},",
			  "});"
		],
		"description": "Using RabbitMQ for messaging"
	  },
	  "Kafka": {
		"prefix": "MICROSERVICESkafka",
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.KAFKA,",
				"options: {",
				 " client: {",
					"brokers: ['localhost:9092'],",
				 " }",
				"}",
			  "});"
		],
		"description": "Using Kafka for messaging"
	  },
	  "gRPC": {
		"prefix": "MICROSERVICESgrpc",
		"body": [
			"const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {",
				"transport: Transport.GRPC,",
				"options: {",
				  "package: 'hero',",
				  "protoPath: join(__dirname, 'hero/hero.proto'),",
				"},",
			 " });"
		],
		"description": "Using gRPC for communication"
	  },
	  "Custom transporters": {
		"prefix": "MICROSERVICEScustomtransporters",
		"body": [
			"import { CustomTransportStrategy, Server } from '@nestjs/microservices';",

"class GoogleCloudPubSubServer",
  "extends Server",
  "implements CustomTransportStrategy {",
  
  "listen(callback: () => void) {",
    "callback();",
  "}",

 
 " close() {}",
"}"
		],
		"description": "Implementing custom transporters"
	  },
	  "Exception filters": {
		"prefix": "MICROSERVICESexceptionfilters",
		"body": [
			"import { Catch, RpcExceptionFilter, ArgumentsHost } from '@nestjs/common';",
"import { Observable, throwError } from 'rxjs';",
"import { RpcException } from '@nestjs/microservices';",

"@Catch(RpcException)",
"export class ExceptionFilter implements RpcExceptionFilter<RpcException> {",
 " catch(exception: RpcException, host: ArgumentsHost): Observable<any> {",
    "return throwError(() => exception.getError());",
  "}",
"}"
		],
		"description": "Define exception filter for messaging"
	  },
	  "Pipes": {
		"prefix": "MICROSERVICESpipes",
		"body": [
			"@UsePipes(new ValidationPipe())",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define pipe for messaging"
	  },
	  "Guards": {
		"prefix": "MICROSERVICESguards",
		"body": [
			"@UseGuards(AuthGuard)",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define guard for messaging"
	  },
	  "Interceptors": {
		"prefix": "MICROSERVICESinterceptors",
		"body": [
			"@UseInterceptors(new TransformInterceptor())",
"@MessagePattern({ cmd: 'sum' })",
"accumulate(data: number[]): number {",
  "return (data || []).reduce((a, b) => a + b);",
"}"
		],
		"description": "Define interceptor for messaging"
	  },
	
	"CLI": {
		"prefix": "Nest Nest CLI",
		"body": [
			"Overview",
			"Workspaces",
			"Libraries",
			"Usage",
			"Scripts"
		],
		"description": " Nest CLI"
	},
	"Overview": {
		"prefix": "CLIoverview",
		"body": [
			
		],
		"description": "Overview of workspace and library concepts"
	  },
	  "Workspaces": {
		"prefix": "CLIworkspaces",
		"body": [
			
		],
		"description": "Setting up and using workspaces"
	  },
	  "Libraries": {
		"prefix": "CLIlibraries",
		"body": [
			
		],
		"description": "Creating and managing libraries"
	  },
	  "Usage": {
		"prefix": "CLIusage",
		"body": [
			
		],
		"description": "Using workspaces and libraries in projects"
	  },
	  "Scripts": {
		"prefix": "CLIscripts",
		"body": [
			
		],
		"description": "Defining and running scripts in projects"
	  },
	"OPENAPI": {
		"prefix": "Nest OPENAPI",
		"body": [
			"Introduction",
			"Types and Parameters",
			"Operations",
			"Security",
			"Mapped Types",
			"Decorators",
			"CLI Plugin",
			"Other features",
			"Migration guide"
		],
		"description": " Nest OPENAPI"
	},
	"Introduction": {
		"prefix": "OPENAPIintroduction",
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
"  const app = await NestFactory.create(AppModule);",

 " const config = new DocumentBuilder()",
    ".setTitle('Cats example')",
    ".setDescription('The cats API description')",
   " .setVersion('1.0')",
    ".addTag('cats')",
   " .build();",
  "const document = SwaggerModule.createDocument(app, config);",
  "SwaggerModule.setup('api', app, document);",

  "await app.listen(3000);",
"}",
"bootstrap();"
		],
		"description": "Introduction to GraphQL"
	  },
	  "Types and Parameters": {
		"prefix": "OPENAPItypesparameters",
		"body": [
			"@Post()",
"async create(@Body() createCatDto: CreateCatDto) {",
  "this.catsService.create(createCatDto);",
"}"
		],
		"description": "GraphQL types and parameters"
	  },
	  "Operations": {
		"prefix": "OPENAPIoperations",
		"body": [
			"@ApiHeader({",
				"name: 'X-MyHeader',",
				"description: 'Custom header',",
			  "})",
			 " @Controller('cats')",
			 " export class CatsController {}"
			  
		],
		"description": "Performing operations in GraphQL"
	  },
	  "Security": {
		"prefix": "OPENAPIsecurity",
		"body": [
			"const options = new DocumentBuilder().addSecurity('basic', {",
				"type: 'http',",
				"scheme: 'basic',",
			  "});"
		],
		"description": "Security considerations in GraphQL"
	  },
	  "Mapped Types": {
		"prefix": "OPENAPImappedtypes",
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",

"export class CreateCatDto {",
 " @ApiProperty()",
  "name: string;",

  "@ApiProperty()",
 " age: number;",

  "@ApiProperty()",
 " breed: string;",
"}"
		],
		"description": "Using mapped types in GraphQL"
	  },
	  "Decorators": {
		"prefix": "OPENAPIdecorators",
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",

"export class CreateCatDto {",
  "@ApiProperty()",
 " name: string;",

  "@ApiProperty()",
  "age: number;",

  "@ApiProperty()",
 " breed: string;",
"}"
		],
		"description": "Applying decorators in GraphQL"
	  },
	  "CLI Plugin": {
		"prefix": "OPENAPIcliplugin",
		"body": [
			"export class CreateUserDto {",
				"@ApiProperty()",
				"email: string;",
			  
				"@ApiProperty()",
				"password: string;",
			  
				"@ApiProperty({ enum: RoleEnum, default: [], isArray: true })",
				"roles: RoleEnum[] = [];",
			  
				"@ApiProperty({ required: false, default: true })",
				"isEnabled?: boolean = true;",
			  "}"
		],
		"description": "Working with the GraphQL CLI plugin"
	  },
	  "Other features": {
		"prefix": "OPENAPIotherfeatures",
		"body": [
			"Global prefix",
			"Global parameters",
			"Multiple specifications"
		],
		"description": "Exploring other features of GraphQL"
	  },
	  "Migration guide": {
		"prefix": "OPENAPImigrationguide",
		"body": "// Migrating to new GraphQL versions\n// ...",
		"description": "Migrating to new GraphQL versions"
	  },
	"RECIPES": {
		"prefix": "Nest RECIPES",
		"body": [
			"REPL",
			"CRUD generator",
			"SWC (fast compiler)",
			"Passport (auth)",
			"Hot reload",
			"MikroORM",
			"TypeORM",
			"Mongoose",
			"Sequelize",
			"Router module",
			"Swagger",
			"Health checks",
			"CQRSCompodoc",
			"Prisma",
			"Serve static",
			"Commander",
			"Async local storage",
			"Automock"
		],
		"description": " Nest RECIPES"
	},
	"REPL": {
		"prefix": "RECIPESrepl",
		"body":[ 
			"import { repl } from '@nestjs/core';",
		"import { AppModule } from './app.module';",
		
		"async function bootstrap() {",
		 " await repl(AppModule);",
		"}",
		"bootstrap();"],
		"description": "Working with Node.js REPL"
	  },
	  "CRUD generator": {
		"prefix": "RECIPEScrudgenerator",
		"body":[
			
		],
		"description": "Generating CRUD operations"
	  },
	  "SWC (fast compiler)": {
		"prefix": "RECIPESswccompiler",
		"body": [
			"'compilerOptions': {",
				"'builder': {",
				  "'type': 'swc',",
				 " 'options': {",
					"'swcrcPath': 'infrastructure/.swcrc',",
				  "}",
				"}",
			  "}"
		],
		"description": "Using SWC (fast compiler)"
	  },
	  "Passport (auth)": {
		"prefix": "RECIPESpassportauth",
		"body":[
			"import { Module } from '@nestjs/common';",
"import { UsersService } from './users.service';",

"@Module({",
 " providers: [UsersService],",
  "exports: [UsersService],",
"})",
"export class UsersModule {}"
		],
		"description": "Implementing authentication with Passport"
	  },
	  "Hot reload": {
		"prefix": "RECIPEShotreload",
		"body": [
			"declare const module: any;",

"async function bootstrap() {",
  "const app = await NestFactory.create(AppModule);",
  "await app.listen(3000);",

  "if (module.hot) {",
   " module.hot.accept();",
    "module.hot.dispose(() => app.close());",
  "}",
"}",
"bootstrap();"
		],
		"description": "Enabling hot reloading in Node.js"
	  },
	  "MikroORM": {
		"prefix": "RECIPESmikroorm",
		"body": [
			"@Module({",
				"imports: [",
				  "MikroOrmModule.forRoot({",
					"entities: ['./dist/entities'],",
					"entitiesTs: ['./src/entities'],",
					"dbName: 'my-db-name.sqlite3',",
					"type: 'sqlite',",
				  "}),",
				"],",
				"controllers: [AppController],",
				"providers: [AppService],",
			  "})",
			  "export class AppModule {}"
		],
		"description": "Using MikroORM for database operations"
	  },
	  "TypeORM": {
		"prefix": "RECIPEStypeorm",
		"body": [
			"import { DataSource } from 'typeorm';",
"import { Photo } from './photo.entity';",

"export const photoProviders = [",
 " {",
    "provide: 'PHOTO_REPOSITORY',",
   " useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),",
    "inject: ['DATA_SOURCE'],",
 " },",
"];"
		],
		"description": "Working with TypeORM for database tasks"
	  },
	  "Mongoose": {
		"prefix": "RECIPESmongoose",
		"body": [
			"import * as mongoose from 'mongoose';",

"export const databaseProviders = [",
 " {",
   " provide: 'DATABASE_CONNECTION',",
   " useFactory: (): Promise<typeof mongoose> =>",
     " mongoose.connect('mongodb://localhost/nest'),",
 " },",
"];"
		],
		"description": "Using Mongoose for MongoDB interactions"
	  },
	  "Sequelize": {
		"prefix": "RECIPESsequelize",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { databaseProviders } from './database.providers';",

"@Module({",
  "providers: [...databaseProviders],",
  "exports: [...databaseProviders],",
"})",
"export class DatabaseModule {}"
		],
		"description": "Integrating Sequelize ORM in Node.js"
	  },
	  "Router module": {
		"prefix": "RECIPESroutermodule",
		"body": [
			"@Module({",
				"imports: [",
				 " DashboardModule,",
				  "RouterModule.register([",
					"{",
					 " path: 'dashboard',",
					 " module: DashboardModule,",
					"},",
				  "]),",
				"],",
			  "})",
			  "export class AppModule {}"
		],
		"description": "Creating and using router modules"
	  },
	  "Swagger": {
		"prefix": "RECIPESswagger",
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
  "const app = await NestFactory.create(AppModule);",

 " const config = new DocumentBuilder()",
    ".setTitle('Cats example')",
    ".setDescription('The cats API description')",
    ".setVersion('1.0')",
    ".addTag('cats')",
    ".build();",
  "const document = SwaggerModule.createDocument(app, config);",
  "SwaggerModule.setup('api', app, document);",

  "await app.listen(3000);",
"}",
"bootstrap();"
		],
		"description": "Adding Swagger documentation to API"
	  },
	  "Health checks": {
		"prefix": "RECIPEShealthchecks",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { TerminusModule } from '@nestjs/terminus';",

"@Module({",
  "imports: [TerminusModule]",
"})",
"export class HealthModule {}"
		],
		"description": "Implementing health checks in Node.js"
	  },
	  "CQRS": {
		"prefix": "RECIPEScqrs",
		"body":[
			"@Injectable()",
"export class HeroesGameService {",
  "constructor(private commandBus: CommandBus) {}",

 " async killDragon(heroId: string, killDragonDto: KillDragonDto) {",
    "return this.commandBus.execute(",
     " new KillDragonCommand(heroId, killDragonDto.dragonId)",
    ");",
  "}",
"}"
		],
		"description": "Applying CQRS pattern in Node.js"
	  },
	  "Compodoc": {
		"prefix": "RECIPEScompodoc",
		"body": [
			"import { Module } from '@nestjs/common';",
"import { AppController } from './app.controller';",
"import { AppService } from './app.service';",
"import { ServeStaticModule } from '@nestjs/serve-static';",
"import { join } from 'path';",

"@Module({",
  "imports: [",
    "ServeStaticModule.forRoot({",
     " rootPath: join(__dirname, '..', 'client'),",
    "}),",
  "],",
 " controllers: [AppController],",
 " providers: [AppService],",
"})",
"export class AppModule {}"
		],
		"description": "Generating documentation using Compodoc"
	  },
	  "Prisma": {
		"prefix": "RECIPESprisma",
		"body": "// Using Prisma ORM for database operations\n// ...",
		"description": "Using Prisma ORM for database operations"
	  },
	  "Serve static": {
		"prefix": "RECIPESservestatic",
		"body": "// Serving static files in Node.js\n// ...",
		"description": "Serving static files in Node.js"
	  },
	  "Commander": {
		"prefix": "RECIPEScommander",
		"body": "// Building command-line applications with Commander\n// ...",
		"description": "Building command-line applications with Commander"
	  },
	  "Async local storage": {
		"prefix": "RECIPESasynclocalstorage",
		"body": "// Managing async local storage in Node.js\n// ...",
		"description": "Managing async local storage in Node.js"
	  },
	  "Automock": {
		"prefix": "RECIPESautomock",
		"body": [
			"import { Injectable } from '@nestjs/core';",

"@Injectable()",
"export class CatsService {",
  "constructor(",
   " private logger: Logger,",
    "private httpService: HttpService,",
   " private catsDal: CatsDal,",
 " ) {}",

  "async getAllCats() {",
    "const cats = await this.httpService.get('http://localhost:3000/api/cats');",
    "this.logger.log('Successfully fetched all cats');",
    
    "this.catsDal.saveCats(cats);",
  "}",
"}"
		],
		"description": "Automocking dependencies in Node.js tests"
	  },
	"FAQ": {
		"prefix": "RECIPESFAQ",
		"body": [
			"Serverless",
			"HTTP adapter",
			"Global path prefix",
			"Raw body",
			"Hybrid application",
			"HTTPS & multiple servers",
			"Request lifecycle",
			"Common errors",
			"Examples"
		],
		"description": " Nest FAQ"
	},
	"Serverless": {
		"prefix": "FAQserverless",
		"body": [
			"import * as express from 'express';",

"async function bootstrap() {",
 " const app = express();",
  "app.get('/', (req, res) => res.send('Hello world!'));",
  "await new Promise<void>((resolve) => app.listen(3000, resolve));",
"}",
"bootstrap();",

"import { NestFactory } from '@nestjs/core';",
"import { AppModule } from './app.module';",

"async function bootstrap() {",
 " const app = await NestFactory.create(AppModule, { logger: ['error'] });",
 " await app.listen(3000);",
"}",
"bootstrap();",

"// #3 Nest as a Standalone application (no HTTP server)",
"import { NestFactory } from '@nestjs/core';",
"import { AppModule } from './app.module';",
"import { AppService } from './app.service';",

"async function bootstrap() {",
  "const app = await NestFactory.createApplicationContext(AppModule, {",
    "logger: ['error'],",
 " });",
 " console.log(app.get(AppService).getHello());",
"}",
"bootstrap();",

"// #4 Raw Node.js script",
"async function bootstrap() {",
  "console.log('Hello world!');",
"}",
"bootstrap();"
		],
		"description": "Setting up a Serverless application"
	  },
	  "HTTP adapter": {
		"prefix": "FAQhttpadapter",
		"body": [
			"export class CatsService {",
				"constructor(private adapterHost: HttpAdapterHost) {}",
			  "}"
		],
		"description": "Creating an HTTP adapter for Serverless"
	  },
	  "Global path prefix": {
		"prefix": "FAQglobalpathprefix",
		"body": [
			"app.setGlobalPrefix('v1', {",
				"exclude: [{ path: 'health', method: RequestMethod.GET }],",
			 " });"
		],
		"description": "Configuring a global path prefix in Serverless"
	  },
	  "Raw body": {
		"prefix": "FAQrawbody",
		"body": [
			"import { NestFactory } from '@nestjs/core';",
"import type { NestExpressApplication } from '@nestjs/platform-express';",
"import { AppModule } from './app.module';",

"// in the 'bootstrap' function",
"const app = await NestFactory.create<NestExpressApplication>(AppModule, {",
  "rawBody: true,",
"});",
"await app.listen(3000);"
		],
		"description": "Accessing the raw request body in Serverless"
	  },
	  "Hybrid application": {
		"prefix": "FAQhybridapp",
		"body": [
			"const app = await NestFactory.create(AppModule);",
"const microservice = app.connectMicroservice<MicroserviceOptions>({",
  "transport: Transport.TCP,",
"});",
"await app.startAllMicroservices();",
"await app.listen(3001);"
		],
		"description": "Building a hybrid Serverless application"
	  },
	  "HTTPS & multiple servers": {
		"prefix": "FAQhttpsmultipleservers",
		"body": [
			"const httpsOptions = {",
				"key: fs.readFileSync('./secrets/private-key.pem'),",
				"cert: fs.readFileSync('./secrets/public-certificate.pem'),",
			  "};",
			 " const app = await NestFactory.create(AppModule, {",
				"httpsOptions,",
			  "});",
			  "await app.listen(3000);"
		],
		"description": "Using HTTPS and multiple servers in Serverless"
	  },
	  "Request lifecycle": {
		"prefix": "FAQrequestlifecycle",
		"body": [
			"@UseGuards(Guard1, Guard2)",
"@Controller('cats')",
"export class CatsController {",
  "constructor(private catsService: CatsService) {}",

 " @UseGuards(Guard3)",
  "@Get()",
  "getCats(): Cats[] {",
    "return this.catsService.getCats();",
  "}",
"}"
		],
		"description": "Understanding the request lifecycle in Serverless"
	  },
	  "Common errors": {
		"prefix": "FAQcommonerrors",
		"body": "// Handling common errors in Serverless applications\n// ...",
		"description": "Handling common errors in Serverless applications"
	  },
	  "Examples": {
		"prefix": "FAQexamples",
		"body": "// Practical examples of Serverless applications\n// ...",
		"description": "Practical examples of Serverless applications"
	  },
	"DEVTOOLS": {
		"prefix": "DEVTOOLS",
		"body": [
			"Overview",
			"CI/CD integration"
		],
		"description": "RECIPESDEVTOOLS"
	},
	"DISCOVER": {
		"prefix": "DEVTOOLSDISCOVER",
		"body": [
			"Who is using Nest?"
		],
		"description": " Nest DISCOVER"
	}
}