{
	"php": {
		"prefix": "php",
		"body": [
		  "Resource",
		  "Math",
		  "Misc.",
		  "Array",
		  "String",
		  "Zip",
		  "Variable",
		  "Filter",
		  "FTP",
		  "OOP",
		  "Date/Time",
		  "Calendar",
		  "SimpleXML",
		  "Directory",
		  "Filesystem",
		  "MySQLi",
		  "Error",
		  "HTTP",
		  "Libxml"
	
		]},
	  "Resource": {
		"prefix": "phpResource",
		"body": [
		  " Online",
		  "Official Website",
		  "Download",
		  "PHP Cheat Sheet [.pdf]",
		  "Smarty cheat sheet for template designers [.pdf]",
		  "Related",
		  "Symfony",
		  "Doctrine",
		  "PHP Frameworks"
		  
		]},
	"Math Functions": {
	  "prefix": "phpmath",
	  "body": [
		"abs()",
		"acos()",
		"acosh()",
		"asin()",
		"asinh()",
		"atan()",
		"atan2()",
		"atanh()",
		"base_convert()",
		"bindec()",
		"ceil()",
		"cos()",
		"cosh()",
		"decbin()",
		"dechex()",
		"decoct()",
		"deg2rad()",
		"exp()",
		"expm1()",
		"floor()",
		"fmod()",
		"getrandmax()",
		"hexdec()",
		"hypot()",
		"is_finite()",
		"is_infinite()",
		"is_nan()",
		"lcg_value()",
		"log()",
		"log10()",
		"log1p()",
		"max()",
		"min()",
		"mt_getrandmax()",
		"mt_rand()",
		"mt_srand()",
		"octdec()",
		"pi()",
		"pow()",
		"rad2deg()",
		"rand()",
		"round()",
		"sin()",
		"sinh()",
		"sqrt()",
		"srand()",
		"tan()",
		"tanh()"
	  ],
	  "description": "Math functions"
	},
	"Math Constants": {
	  "prefix": "phpmathconst",
	  "body": [
		"M_E",
		"M_EULER",
		"M_LNPI",
		"M_LN2",
		"M_LN10",
		"M_LOG2E",
		"M_LOG10E",
		"M_PI",
		"M_PI_2",
		"M_PI_4",
		"M_1_PI",
		"M_2_PI",
		"M_SQRTPI",
		"M_2_SQRTPI",
		"M_SQRT1_2",
		"M_SQRT2",
		"M_SQRT3"
	  ],
	  "description": "Math constants"
	},
	"abs()": {
		"prefix": "phpabs",
		"body": ["https://www.php.net/manual/en/function.abs.php"],
		"description": "abs() - Absolute value"
	  },
	  "acos()": {
		"prefix": "phpacos",
		"body": "https://www.php.net/manual/en/function.acos.php",
		"description": "acos() - Arc cosine"
	  },
	  "acosh()": {
		"prefix": "phpacosh",
		"body": [
"https://www.php.net/manual/en/function.acosh.php"
		],
		"description": "acosh() - Inverse hyperbolic cosine"
	  },
	  "asin()": {
		"prefix": "phpasin",
		"body": [
"https://www.php.net/manual/en/function.asin.php"
		],
		"description": "asin() - Arc sine"
	  },
	  "asinh()": {
		"prefix": "phpasinh",
		"body": [
"https://www.php.net/manual/en/function.asinh.php"
		],
		"description": "asinh() - Inverse hyperbolic sine"
	  },
	  "atan()": {
		"prefix": "phpatan",
		"body": [
"https://www.php.net/manual/en/function.atan.php"
		],
		"description": "atan() - Arc tangent"
	  },
	  "atan2()": {
		"prefix": "phpatan2",
		"body": [
"https://www.php.net/manual/en/function.atan2.php"
		],
		"description": "atan2() - Arc tangent of two variables"
	  },
	  "atanh()": {
		"prefix": "phpatanh",
		"body": [
			"https://www.php.net/manual/en/function.atanh.php"
		],
		"description": "atanh() - Inverse hyperbolic tangent"
	  },
	  "base_convert()": {
		"prefix": "phpbase_convert",
		"body": [
			"$hexadecimal = 'a37334';",
"echo base_convert($hexadecimal, 16, 2)"
		],
		"description": "base_convert() - Convert a number between arbitrary bases"
	  },
	  "bindec()": {
		"prefix": "phpbindec",
		"body":[
			"echo bindec('110011') . '\n';",
"echo bindec('000110011') . '\n';",

"echo bindec('111');"
		],
		"description": "bindec() - Binary to decimal"
	  },
	  "ceil()": {
		"prefix": "phpceil",
		"body": [
			"echo ceil(4.3);    // 5",
"echo ceil(9.999);  // 10",
"echo ceil(-3.14);  // -3"
		],
		"description": "ceil() - Round fractions up"
	  },
	  "cos()": {
		"prefix": "phpcos",
		"body": [
			"echo cos(M_PI); // -1"
		],
		"description": "cos() - Cosine"
	  },
	  "cosh()": {
		"prefix": "phpcosh",
		"body": [
			"https://www.php.net/manual/en/function.cosh.php"
		],
		"description": "cosh() - Hyperbolic cosine"
	  },
	  "decbin()": {
		"prefix": "phpdecbin",
		"body": [
			"echo decbin(12) . '\n';",
"echo decbin(26);"
		],
		"description": "decbin() - Decimal to binary"
	  },
	  "dechex()": {
		"prefix": "phpdechex",
		"body": [
			"https://www.php.net/manual/en/function.dechex.php"
		],
		"description": "dechex() - Decimal to hexadecimal"
	  },
	  "decoct()": {
		"prefix": "phpdecoct",
		"body":[
			"echo decoct(15) . '\n';",
"echo decoct(264);"
		],
		"description": "decoct() - Decimal to octal"
	  },
	  "deg2rad()": {
		"prefix": "phpdeg2rad",
		"body":[
			"echo deg2rad(45); // 0.785398163397",
"var_dump(deg2rad(45) === M_PI_4); // bool(true)"
		],
		"description": "deg2rad() - Convert degrees to radians"
	  },
	  "exp()": {
		"prefix": "phpexp",
		"body": [
			"echo exp(12) . '\n';",
"echo exp(5.7);"
		],
		"description": "exp() - Exponential expression"
	  },
	  "expm1()": {
		"prefix": "phpexpm1",
		"body": [
			"https://www.php.net/manual/en/function.expm1.php"
		],
		"description": "expm1() - Exponential minus 1"
	  },
	  "floor()": {
		"prefix": "phpfloor",
		"body": [
			"echo floor(4.3);   // 4",
"echo floor(9.999); // 9",
"echo floor(-3.14); // -4"
		],
		"description": "floor() - Round fractions down"
	  },
	  "fmod()": {
		"prefix": "phpfmod",
		"body": [
			"$x = 5.7;",
"$y = 1.3;",
"$r = fmod($x, $y);"
		],
		"description": "fmod() - Floating point remainder of division"
	  },
	  "getrandmax()": {
		"prefix": "phpgetrandmax",
		"body": [
			"echo mt_rand(), '\n';",
"echo mt_rand(), '\n';",

"echo mt_rand(5, 15), '\n';"
		],
		"description": "getrandmax() - Largest value that can be returned by rand()"
	  },
	  "hexdec()": {
		"prefix": "phphexdec",
		"body":[
			"var_dump(hexdec('See'));",
"var_dump(hexdec('ee'));",
"// both print 'int(238)'",

"var_dump(hexdec('that')); // print 'int(10)'",
"var_dump(hexdec('a0')); // print 'int(160)'"
		],
		"description": "hexdec() - Hexadecimal to decimal"
	  },
	  "hypot()": {
		"prefix": "phphypot",
		"body": ["https://www.php.net/manual/en/function.hypot.php"

		],
		"description": "hypot() - Calculate the length of the hypotenuse of a right-angle triangle"
	  },
	  "is_finite()": {
		"prefix": "phpis_finite",
		"body": [
			"https://www.php.net/manual/en/function.is-finite.php"
		],
		"description": "is_finite() - Check if a value is finite"
	  },
	  "is_infinite()": {
		"prefix": "phpis_infinite",
		"body": [
			"https://www.php.net/manual/en/function.is-infinite.php"
		],
		"description": "is_infinite() - Check if a value is infinite"
	  },
	  "is_nan()": {
		"prefix": "phpis_nan",
		"body":[
			"$nan = acos(8);",

"var_dump($nan, is_nan($nan));"
		],
		"description": "is_nan() - Check if a value is NaN"
	  },
	  "lcg_value()": {
		"prefix": "phplcg_value",
		"body": [
			"https://www.php.net/manual/en/function.lcg-value.php"
		],
		"description": "lcg_value() - Combined linear congruential generator"
	  },
	  "log()": {
		"prefix": "phplog",
		"body":[
			"https://www.php.net/manual/en/function.log.php"
		],
		"description": "log() - Natural logarithm"
	  },
	  "log10()": {
		"prefix": "phplog10",
		"body": [
			"https://www.php.net/manual/en/function.log10.php"
		],
		"description": "log10() - Base-10 logarithm"
	  },
	  "log1p()": {
		"prefix": "phplog1p",
		"body": [
			"https://www.php.net/manual/en/function.log1p.php"
		],
		"description": "log1p() - Natural logarithm of (1 + x)"
	  },
	  "max()": {
		"prefix": "phpmax",
		"body":[
			"echo max(2, 3, 1, 6, 7);  // 7",
"echo max(array(2, 4, 5)); // 5",

"echo max('hello', -1);    // hello",

"$val = max(array(2, 2, 2), array(1, 1, 1, 1)); // array(1, 1, 1, 1)",

"$val = max(array(2, 4, 8), array(2, 5, 1)); // array(2, 5, 1)",

"$val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)",

"$val = max(-10, FALSE); // -10",

"$val = max(0, TRUE); // TRUE"
		],
		"description": "max() - Find the highest value"
	  },
	  "min()": {
		"prefix": "phpmin",
		"body": [
			"echo min(2, 3, 1, 6, 7);  // 1",
"echo min(array(2, 4, 5)); // 2",

"echo min('hello', -1);    // -1",

"$val = min(array(2, 2, 2), array(1, 1, 1, 1)); // array(2, 2, 2)",

"$val = min(array(2, 4, 8), array(2, 5, 1)); // array(2, 4, 8)",

"$val = min('string', array(2, 5, 7), 42);   // string",

"$val = min(-10, FALSE, 10); // FALSE",
"$val = min(-10, NULL, 10);  // NULL",

"$val = min(0, TRUE); // 0"
		],
		"description": "min() - Find the lowest value"
	  },
	  "mt_getrandmax()": {
		"prefix": "phpmt_getrandmax",
		"body":[
			"function randomFloat($min = 0, $max = 1) {",
				"return $min + mt_rand() / mt_getrandmax() * ($max - $min);",
			"}",
			
			"var_dump(randomFloat());",
			"var_dump(randomFloat(2, 20));"
		],
		"description": "mt_getrandmax() - Largest value that can be returned by mt_rand()"
	  },
	  "mt_rand()": {
		"prefix": "phpmt_rand",
		"body":[
			"echo mt_rand(), '\n';",
"echo mt_rand(), '\n';",

"echo mt_rand(5, 15), '\n'"
		],
		"description": "mt_rand() - Generate a random integer using the Mersenne Twister algorithm"
	  },
	  "mt_srand()": {
		"prefix": "phpmt_srand",
		"body": "https://www.php.net/manual/en/function.mt-srand.php",
		"description": "mt_srand() - Seed the Mersenne Twister random number generator"
	  },
	  "octdec()": {
		"prefix": "phpoctdec",
		"body": [
			"echo octdec('77') . '\n';",
"echo octdec(decoct(45));"
		],
		"description": "octdec() - Octal to decimal"
	  },
	  "pi()": {
		"prefix": "phppi",
		"body": [
			"echo pi(); // 3.1415926535898",
"echo M_PI; // 3.1415926535898"
		],
		"description": "pi() - Get the value of pi"
	  },
	  "pow()": {
		"prefix": "phppow",
		"body": [
			"var_dump(pow(2, 8)); // int(256)",
"echo pow(-1, 20); // 1",
"echo pow(0, 0); // 1",
"echo pow(10, -1); // 0.1",

"echo pow(-1, 5.5); // NAN"
		],
		"description": "pow() - Exponential expression"
	  },
	  "rad2deg()": {
		"prefix": "phprad2deg",
		"body": [
			"echo rad2deg(M_PI_4); // 45"
		],
		"description": "rad2deg() - Convert radians to degrees"
	  },
	  "rand()": {
		"prefix": "phprand",
		"body": [
			"echo rand(), '\n';",
"echo rand(), '\n';",

"echo rand(5, 15), '\n';"
		],
		"description": "rand() - Generate a random integer"
	  },
	  "round()": {
		"prefix": "phpround",
		"body": [
			"https://www.php.net/manual/en/function.round.php"
		],
		"description": "round() - Rounds a floating-point number"
	  },
	  "sin()": {
		"prefix": "phpsin",
		"body": [
			"echo sin(deg2rad(60));  //  0.866025403 ...",
"echo sin(60);           // -0.304810621 ..."
		],
		"description": "sin() - Sine"
	  },
	  "sinh()": {
		"prefix": "phpsinh",
		"body":[
			"https://www.php.net/manual/en/function.sinh.php"
		],
		"description": "sinh() - Hyperbolic sine"
	  },
	  "sqrt()": {
		"prefix": "phpsqrt",
		"body": [
			"echo sqrt(9); // 3",
"echo sqrt(10); // 3.16227766 ..."
		],
		"description": "sqrt() - Square root"
	  },
	  "srand()": {
		"prefix": "phpsrand",
		"body": [
			"https://www.php.net/manual/en/function.srand.php"
		],
		"description": "srand() - Seed the random number generator"
	  },
	  "tan()": {
		"prefix": "phptan",
		"body": [
			"echo tan(M_PI_4); // 1"
		],
		"description": "tan() - Tangent"
	  },
	  "tanh()": {
		"prefix": "phptanh",
		"body": [
			"echo tan(M_PI_4); // 1"
		],
		"description": "tanh() - Hyperbolic tangent"
	  },

	"Misc. Functions": {
		"prefix": "phpmiscfuncs",
		"body": [
		  "connection_aborted()",
		  "connection_status()",
		  "connection_timeout()",
		  "constant()",
		  "define()",
		  "defined()",
		  "die()",
		  "eval()",
		  "exit()",
		  "get_browser()",
		  "highlight_file()",
		  "highlight_string()",
		  "ignore_user_abort()",
		  "pack()",
		  "php_check_syntax()",
		  "php_strip_whitespace()",
		  "show_source()",
		  "sleep()",
		  "time_nanosleep()",
		  "time_sleep_until()",
		  "uniqid()",
		  "unpack()",
		  "usleep()",
		  "miscconsts",
		  "CONNECTION_ABORTED",
		  "CONNECTION_NORMAL",
		  "CONNECTION_TIMEOUT",
		  "__COMPILER_HALT_OFFSET__"
		],
		"description": "Misc. Functions"
	  },
	  "connection_aborted()": {
		"prefix": "connection_aborted",
		"body": [
			"https://www.php.net/manual/en/function.connection-aborted.php"
		],
		"description": "connection_aborted() - Check whether the client connection was aborted"
	  },
	  "connection_status()": {
		"prefix": "connection_status",
		"body": [
			"https://www.php.net/manual/en/function.connection-status.php"
		],
		"description": "connection_status() - Returns the current connection status"
	  },
	  "connection_timeout()": {
		"prefix": "connection_timeout",
		"body": [

		],
		"description": "connection_timeout() - Returns the current connection timeout value"
	  },
	  "constant()": {
		"prefix": "constant",
		"body": [
			"enum Suit",
"{",
   " case Hearts;",
    "case Diamonds;",
    "case Clubs;",
    "case Spades;",
"}",

"$case = 'Hearts';",

"var_dump(constant('Suit::'. $case)); // enum(Suit::Hearts)"
		],
		"description": "constant() - Returns the value of a constant"
	  },
	  "define()": {
		"prefix": "define",
		"body": [
			"var_dump(defined('__LINE__'));",
"var_dump(define('__LINE__', 'test'));",
"var_dump(constant('__LINE__'));",
"var_dump(__LINE__);"
		],
		"description": "define() - Define a named constant"
	  },
	  "defined()": {
		"prefix": "defined",
		"body": [
			"enum Suit",
"{",
  "  case Hearts;",
   " case Diamonds;",
    "case Clubs;",
    "case Spades;",
"}",

"var_dump(defined('Suit::Hearts')); // bool(true)"
		],
		"description": "defined() - Check whether a constant is defined"
	  },
	  "die()": {
		"prefix": "die",
		"body": [
			"https://www.php.net/manual/en/function.die.php"
		],
		"description": "die() - Equivalent to exit() with a message"
	  },
	  "eval()": {
		"prefix": "eval",
		"body": [
			"$string = 'cup';",
"$name = 'coffee';",
"$str = 'This is a $string with my $name in it.';",
"echo $str. '\n';",
"eval('\"$str = \"'$str\"';');",
"echo $str. '\n';"
		],
		"description": "eval() - Evaluate a string as PHP code"
	  },
	  "exit()": {
		"prefix": "exit",
		"body": [
			"$filename = '/path/to/data-file';",
"$file = fopen($filename, 'r')",
   " or exit('unable to open file ($filename)');"
		],
		"description": "exit() - Output a message and terminate the current script"
	  },
	  "get_browser()": {
		"prefix": "get_browser",
		"body": [
			"echo $_SERVER['HTTP_USER_AGENT'] . '\n\n';",

"$browser = get_browser(null, true);",
"print_r($browser);"
		],
		"description": "get_browser() - Get information about the capabilities of a browser"
	  },
	  "highlight_file()": {
		"prefix": "highlight_file",
		"body": [
			"https://www.php.net/manual/en/function.highlight-file.php"
		],
		"description": "highlight_file() - Syntax highlighting of a file"
	  },
	  "highlight_string()": {
		"prefix": "highlight_string",
		"body": [
			"highlight_string('<?php phpinfo(); ?>');"
		],
		"description": "highlight_string() - Syntax highlighting of a string"
	  },
	  "ignore_user_abort()": {
		"prefix": "ignore_user_abort",
		"body": [
			"ignore_user_abort(true);",
"set_time_limit(0);",

"echo 'Testing connection handling in PHP';",
"while(1)",
"{",
   " // Did the connection fail?",
    "if(connection_status() != CONNECTION_NORMAL)",
    "{",
       " break;",
   " }",
	"sleep(10);",
"}"
		],
		"description": "ignore_user_abort() - Set whether a client disconnect should abort the script"
	  },
	  "pack()": {
		"prefix": "pack",
		"body": [
			"$binarydata = pack('nvc*', 0x1234, 0x5678, 65, 66);"
		],
		"description": "pack() - Pack data into binary string"
	  },
	  "php_check_syntax()": {
		"prefix": "php_check_syntax",
		"body": [

		],
		"description": "php_check_syntax() - Check the syntax of a PHP file"
	  },
	  "php_strip_whitespace()": {
		"prefix": "php_strip_whitespace",
		"body": [
			"echo        php_strip_whitespace(__FILE__);",
"do_nothing();"
		],
		"description": "php_strip_whitespace() - Return source with stripped comments and whitespace"
	  },
	  "show_source()": {
		"prefix": "phpshow_source",
		"body": [
			"https://www.php.net/manual/en/function.highlight-file.php"
		],
		"description": "show_source() - Alias of highlight_file()"
	  },
	  "sleep()": {
		"prefix": "phpsleep",
		"body": [
			"echo date('h:i:s') . '\n';",

"sleep(10);",

"echo date('h:i:s') . '\n';"
		],
		"description": "sleep() - Delay execution for a specified number of seconds"
	  },
	  "time_nanosleep()": {
		"prefix": "phptime_nanosleep",
		"body": [
			"if (time_nanosleep(0, 500000000)) {",
				"echo 'Slept for half a second.\n';",
			"}",
			
			"if (time_nanosleep(0, 500000000) === true) {",
				"echo 'Slept for half a second.\n';",
			"}",
			
			"$nano = time_nanosleep(2, 100000);",
			
			"if ($nano === true) {",
				"echo 'Slept for 2 seconds, 100 microseconds.\n';",
			"} elseif ($nano === false) {",
				"echo 'Sleeping failed.\n';",
			"} elseif (is_array($nano)) {",
				"$seconds = $nano['seconds'];",
				"$nanoseconds = $nano['nanoseconds'];",
				"echo 'Interrupted by a signal.\n';",
				"echo 'Time remaining: $seconds seconds, $nanoseconds nanoseconds.';"
		],
		"description": "time_nanosleep() - Delay execution in seconds and nanoseconds"
	  },
	  "time_sleep_until()": {
		"prefix": "phptime_sleep_until",
		"body": [
			"var_dump(time_sleep_until(time()-1));",

"var_dump(time_sleep_until(microtime(true)+0.2));"
		],
		"description": "time_sleep_until() - Make the script sleep until the specified time"
	  },
	  "uniqid()": {
		"prefix": "phpuniqid",
		"body": [
			"printf('uniqid(): %s\r\n', uniqid());",


"printf('uniqid('php_'): %s\r\n', uniqid('php_'));",


"printf('uniqid('', true): %s\r\n', uniqid('', true));"
		],
		"description": "uniqid() - Generate a unique ID"
	  },
	  "unpack()": {
		"prefix": "phpunpack",
		"body": [
			"$binarydata = '\"x04\"x00\"xa0\"x00';",
"$array = unpack('c2chars/nint', $binarydata);",
"print_r($array);"
		],
		"description": "unpack() - Unpack data from binary string"
	  },
	  "usleep()": {
		"prefix": "phpusleep",
		"body": [
			"echo (new DateTime('now'))->format('H:i:s.v'), '\n';",

"usleep(2000);",

"echo (new DateTime('now'))->format('H:i:s.v'), '\n';",

"usleep(30000);",

"echo (new DateTime('now'))->format('H:i:s.v'), '\n';"
		],
		"description": "usleep() - Delay execution in microseconds"
	  },

	  "Array Functions": {
		"prefix": "phparrayfuncs",
		"body": [
			"array()",
			"array_change_key_case()",
			"array_chunk()",
			"array_combine()",
			"array_count_values()",
			"array_diff()",
			"array_diff_assoc()",
			"array_diff_key()",
			"array_diff_uassoc()",
			"array_diff_ukey()",
			"array_fill()",
			"array_filter()",
			"array_flip()",
			"array_intersect()",
			"array_intersect_assoc()",
			"array_intersect_key()",
			"array_intersect_uassoc()",
			"array_intersect_ukey()",
			"array_key_exists()",
			"array_keys()",
			"array_map()",
			"array_merge()",
			"array_merge_recursive()",
			"array_multisort()",
			"array_pad()",
			"array_pop()",
			"array_product()",
			"array_push()",
			"array_rand()",
			"array_reduce()",
			"array_reverse()",
			"array_search()",
			"array_shift()",
			"array_slice()",
			"array_splice()",
			"array_sum()",
			"array_udiff()",
			"array_udiff_assoc()",
			"array_udiff_uassoc()",
			"array_uintersect()",
			"array_uintersect_assoc()",
			"array_uintersect_uassoc()",
			"array_unique()",
			"array_unshift()",
			"array_values()",
			"array_walk()",
			"array_walk_recursive()",
			"arsort()",
			"asort()",
			"compact()",
			"count()",
			"current()",
			"each()",
			"extract(array, flags = EXTR_OVERWRITE, prefix = null)",
      "in_array(needle, haystack, strict = false)",
      "key(array)",
      "krsort(&array, sort_flags = SORT_REGULAR)",
      "ksort(&array, sort_flags = SORT_REGULAR)",
      "list(var1, var2) = array",
      "natcasesort(&array)",
      "natsort(&array)",
      "next(&array)",
      "pos(&array)",
      "prev(&array)",
      "range(start, end, step = 1)",
      "reset(&array)",
      "rsort(&array, sort_flags = SORT_REGULAR)",
      "shuffle(&array)",
      "sizeof(array, mode = COUNT_NORMAL)",
      "sort(&array, sort_flags = SORT_REGULAR)",
      "uasort(&array, cmp_function)",
      "uksort(&array, cmp_function)",
      "usort(&array, cmp_function)"
    ],
    "description": "List of PHP array manipulation functions"
  },
  "PHP Array Constants": {
    "prefix": "php_array_constants",
    "body": [
      "CASE_LOWER",
      "Used with array_change_key_case() to convert array keys to lower case",
      "CASE_UPPER",
      "Used with array_change_key_case() to convert array keys to upper case",
      "SORT_ASC",
      "Used with array_multisort() to sort in ascending order",
      "SORT_DESC",
      "Used with array_multisort() to sort in descending order",
      "SORT_REGULAR",
      "Used to compare items normally",
      "SORT_NUMERIC",
      "Used to compare items numerically",
      "SORT_STRING",
      "Used to compare items as strings",
      "SORT_LOCALE_STRING",
      "Used to compare items as strings, based on the current locale",
      "COUNT_NORMAL",
      "COUNT_RECURSIVE",
      "EXTR_OVERWRITE",
      "EXTR_SKIP",
      "EXTR_PREFIX_SAME",
      "EXTR_PREFIX_ALL",
      "EXTR_PREFIX_INVALID",
      "EXTR_PREFIX_IF_EXISTS",
      "EXTR_IF_EXISTS",
      "EXTR_REFS"
    ],
    "description": "List of PHP array constants"
  },
  "Array Functions array()": {
    "prefix": "phparray",
    "body": [
		"$fruits = array (",
		"fruits => array('a' => 'orange', 'b' => 'banana', 'c' => 'apple'),",
		"numbers => array(1, 2, 3, 4, 5, 6),",
		"holes   => array('first', 5 => 'second', 'third')",
	");"
    ],
    "description": "Create an array"
},
"array_change_key_case()": {
    "prefix": "phparray_change_key_case",
    "body": [
        "https://www.php.net/manual/en/function.array-change-key-case.php"
    ],
    "description": "Changes all keys in an array to lowercase or uppercase"
},
"array_chunk()": {
    "prefix": "phparray_chunk",
    "body": [
       " $input_array = array('a', 'b', 'c', 'd', 'e');",
"print_r(array_chunk($input_array, 2));",
"print_r(array_chunk($input_array, 2, true));"
    ],
    "description": "Split an array into chunks"
},
"array_combine()": {
    "prefix": "phparray_combine",
    "body": [
		"$a = array('green', 'red', 'yellow');",
		"$b = array('avocado', 'apple', 'banana');",
		"$c = array_combine($a, $b);",
		
		"print_r($c);"
    ],
    "description": "Creates an array by using one array for keys and another for its values"
},
"array_count_values()": {
    "prefix": "phparray_count_values",
    "body": [
        "$array = array(1, 'hello', 1, 'world', 'hello');",
"print_r(array_count_values($array));"
    ],
    "description": "Counts all the values of an array"
},
"array_diff()": {
    "prefix": "phparray_diff",
    "body": [
       " $array1 = array('a' => 'green', 'red', 'blue', 'red');",
"$array2 = array('b' => 'green', 'yellow', 'red');",
"$result = array_diff($array1, $array2);",

"print_r($result);"
    ],
    "description": "Computes the difference of arrays"
},
"array_diff_assoc()": {
    "prefix": "phparray_diff_assoc",
    "body": [
       " function key_compare_func($a, $b)",
"{",
    "return $a <=> $b;",
"}",

"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
"$array2 = array('a' => 'green', 'yellow', 'red');",
"$result = array_diff_uassoc($array1, $array2, 'key_compare_func');",
"print_r($result);"
    ],
    "description": "Computes the difference of arrays with additional index check"
},
"array_diff_key()": {
    "prefix": "phparray_diff_key",
    "body": [
        "array_diff_key(${1:array1}, ${2:array2})"
    ],
    "description": "Computes the difference of arrays using keys for comparison"
},
"array_diff_uassoc()": {
    "prefix": "phparray_diff_uassoc",
    "body": [
		"function key_compare_func($a, $b)",
		"{",
			"return $a <=> $b;",
		"}",
		
		"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
		"$array2 = array('a' => 'green', 'yellow', 'red');",
		"$result = array_diff_uassoc($array1, $array2, 'key_compare_func');",
		"print_r($result);"
    ],
    "description": "Computes the difference of arrays with additional index check which is performed by a user-defined function"
},
"array_diff_ukey()": {
    "prefix": "phparray_diff_ukey",
    "body": [
        "function key_compare_func($key1, $key2)",
"{",
   " if ($key1 == $key2)",
        "return 0;",
   " else if ($key1 > $key2)",
       " return 1;",
   " else",
        "return -1;",
"}",

"$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);",
"$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);",

"var_dump(array_diff_ukey($array1, $array2, 'key_compare_func'));"
    ],
    "description": "Computes the difference of arrays using a callback function on the keys for comparison"
},
"array_fill()": {
    "prefix": "phparray_fill",
    "body": [
       " $a = array_fill(-2, 4, 'pear');",
"print_r($a);"
    ],
    "description": "Fill an array with values"
},
"array_filter()": {
    "prefix": "phparray_filter",
    "body": [
       " function odd($var)",
"{",
   " return $var & 1;",
"}",

"function even($var)",
"{",
    "return !($var & 1);",
"}",

"$array1 = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5];",
"$array2 = [6, 7, 8, 9, 10, 11, 12];",

"echo 'Odd :\n';",
"print_r(array_filter($array1, 'odd'));",
"echo 'Even:\n';",
"print_r(array_filter($array2, 'even'));"
    ],
    "description": "Filters elements of an array using a callback function"
},
"array_flip()": {
    "prefix": "phparray_flip",
    "body": [
        "$input = array('a' => 1, 'b' => 1, 'c' => 2);",
"$flipped = array_flip($input);",

"print_r($flipped);"
    ],
    "description": "Exchanges all keys with their associated values in an array"
},
"array_intersect()": {
    "prefix": "phparray_intersect",
    "body": [
		"$array1 = array('a' => 'green', 'red', 'blue');",
		"$array2 = array('b' => 'green', 'yellow', 'red');",
		"$result = array_intersect($array1, $array2);",
		"print_r($result);"
    ],
    "description": "Computes the intersection of arrays"
},
"array_intersect_assoc()": {
    "prefix": "phparray_intersect_assoc",
    "body": [
        "$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
"$array2 = array('a' => 'green', 'b' => 'yellow', 'blue', 'red');",
"$result_array = array_intersect_assoc($array1, $array2);",
"print_r($result_array);"
    ],
    "description": "Computes the intersection of arrays with additional index check"
},
"array_intersect_key()": {
    "prefix": "phparray_intersect_key",
    "body": [
        "$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);",
"$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);",

"var_dump(array_intersect_key($array1, $array2));"
    ],
    "description": "Computes the intersection of arrays using keys for comparison"
},
"array_intersect_uassoc()": {
    "prefix": "phparray_intersect_uassoc",
    "body": [
		"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
		"$array2 = array('a' => 'GREEN', 'B' => 'brown', 'yellow', 'red');",
		
		"print_r(array_intersect_uassoc($array1, $array2, 'strcasecmp'));"
    ],
    "description": "Computes the intersection of arrays with additional index check, compares indexes by a callback function"
},
"array_intersect_ukey()": {
    "prefix": "phparray_intersect_ukey",
    "body": [
        "function key_compare_func($key1, $key2)",
"{",
    "if ($key1 == $key2)",
        "return 0;",
    "else if ($key1 > $key2)",
        "return 1;",
    "else",
       " return -1;",
"}",

"$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);",
"$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);",

"var_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));"
    ],
    "description": "Computes the intersection of arrays using"
},
"array_key_exists()": {
    "prefix": "phparray_key_exists",
    "body": [
        "$search_array = array('first' => 1, 'second' => 4);",
"if (array_key_exists('first', $search_array)) {",
    "echo 'The 'first' element is in the array';"
    ],
    "description": "Checks if the given key or index exists in the array"
},
"array_keys()": {
    "prefix": "phparray_keys",
    "body": [
		"$array = array(0 => 100, 'color' => 'red');",
		"print_r(array_keys($array));",
		
		"$array = array('blue', 'red', 'green', 'blue', 'blue');",
		"print_r(array_keys($array, 'blue'));",
		
		"$array = array('color' => array('blue', 'red', 'green'),",
					   "'size'  => array('small', 'medium', 'large'));",
		"print_r(array_keys($array));"
    ],
    "description": "Return all the keys or a subset of the keys of an array"
},
"array_map()": {
    "prefix": "phparray_map",
    "body": [
		"function cube($n)",
		"{",
			"return ($n * $n * $n);",
		"}",
		
		"$a = [1, 2, 3, 4, 5];",
		"$b = array_map('cube', $a);",
		"print_r($b);"
    ],
    "description": "Applies a callback function to each element of an array"
},
"array_merge()": {
    "prefix": "phparray_merge",
    "body": [
		"$array1 = array('color' => 'red', 2, 4);",
		"$array2 = array('a', 'b', 'color' => 'green', 'shape' => 'trapezoid', 4);",
		"$result = array_merge($array1, $array2);",
		"print_r($result);"
    ],
    "description": "Merge one or more arrays"
},
"array_merge_recursive()": {
    "prefix": "array_merge_recursive",
    "body": [
       " $ar1 = array('color' => array('favorite' => 'red'), 5);",
"$ar2 = array(10, 'color' => array('favorite' => 'green', 'blue'));",
"$result = array_merge_recursive($ar1, $ar2);",
"print_r($result);"
    ],
    "description": "Merge two or more arrays recursively"
},
"array_multisort()": {
    "prefix": "phparray_multisort",
    "body": [
		"$ar1 = array(10, 100, 100, 0);",
		"$ar2 = array(1, 3, 2, 4);",
		"array_multisort($ar1, $ar2);",
		
		"var_dump($ar1);",
		"var_dump($ar2);"
    ],
    "description": "Sort multiple or multi-dimensional arrays"
},
"array_pad()": {
    "prefix": "phparray_pad",
    "body": [
		"$input = array(12, 10, 9);",

		"$result = array_pad($input, 5, 0);",
		
		"$result = array_pad($input, -7, -1);",
		
		"$result = array_pad($input, 2, 'noop');"
    ],
    "description": "Pad an array to a specified length with a value"
},
"array_pop()": {
    "prefix": "phparray_pop",
    "body": [
		"$stack = array('orange', 'banana', 'apple', 'raspberry');",
		"$fruit = array_pop($stack);",
		"print_r($stack);"
    ],
    "description": "Pop the element off the end of the array"
},
"array_product()": {
    "prefix": "phparray_product",
    "body": [
		"$a = array(2, 4, 6, 8);",
		"echo 'product(a) = ' . array_product($a) . '\n';",
		"echo 'product(array()) = ' . array_product(array()) . '\n';"
    ],
    "description": "Calculate the product of values in an array"
},
"array_push()": {
    "prefix": "phparray_push",
    "body": [
        "$stack = array('orange', 'banana');",
"array_push($stack, 'apple', 'raspberry');",
"print_r($stack);"
    ],
    "description": "Push one or more elements onto the end of an array"
},
"array_rand()": {
    "prefix": "phparray_rand",
    "body": [
		"$input = array('Neo', 'Morpheus', 'Trinity', 'Cypher', 'Tank');",
		"$rand_keys = array_rand($input, 2);",
		"echo $input[$rand_keys[0]] . '\n';",
		"echo $input[$rand_keys[1]] . '\n';"
    ],
    "description": "Pick one or more random keys out of an array"
},
"array_reduce()": {
    "prefix": "phparray_reduce",
    "body": [
       " function sum($carry, $item)",
"{",
    "$carry += $item;",
   " return $carry;",
"}",

"function product($carry, $item)",
"{",
   " $carry *= $item;",
    "return $carry;",
"}",

"$a = array(1, 2, 3, 4, 5);",
"$x = array();",

"var_dump(array_reduce($a, 'sum')); // int(15)",
"var_dump(array_reduce($a, 'product', 10)); // int(1200), because: 10*1*2*3*4*5",
"var_dump(array_reduce($x, 'sum', 'No data to reduce')); // string(17) No data to reduce"
    ],
    "description": "Iteratively reduce the array to a single value using a callback function"
},
"array_reverse()": {
    "prefix": "phparray_reverse",
    "body": [
       " $input  = array('php', 4.0, array('green', 'red'));",
"$reversed = array_reverse($input);",
"$preserved = array_reverse($input, true);",

"print_r($input);",
"print_r($reversed);",
"print_r($preserved);"
    ],
    "description": "Return an array with elements in reverse order"
},
"array_search()": {
    "prefix": "phparray_search",
    "body": [
		"$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');",

		"$key = array_search('green', $array); // $key = 2;",
		"$key = array_search('red', $array);   // $key = 1;"
    ],
    "description": "Searches the array for a given value and returns the corresponding key if successful"
},
"array_shift()": {
    "prefix": "phparray_shift",
    "body": [
		"$stack = array('orange', 'banana', 'apple', 'raspberry');",
		"$fruit = array_shift($stack);",
		"print_r($stack);"
    ],
    "description": "Shift an element off the beginning of the array"
},
"array_slice()": {
    "prefix": "phparray_slice",
    "body": [
        "$input = array('a', 'b', 'c', 'd', 'e');",

"$output = array_slice($input, 2); "   ,  
"$output = array_slice($input, -2, 1);" , 
"$output = array_slice($input, 0, 3);" , 

"print_r(array_slice($input, 2, -1));",
"print_r(array_slice($input, 2, -1, true));"
    ],
    "description": "Extract a slice of the array"
},
"array_splice()": {
    "prefix": "phparray_splice",
    "body": [
		"$input = array('red', 'green', 'blue', 'yellow');",
		"array_splice($input, 2);",
		"var_dump($input);",
		
		"$input = array('red', 'green', 'blue', 'yellow');",
		"array_splice($input, 1, -1);",
		"var_dump($input);",
		
		"$input = array('red', 'green', 'blue', 'yellow');",
		"array_splice($input, 1, count($input), 'orange');",
		"var_dump($input);",
		
		"$input = array('red', 'green', 'blue', 'yellow');",
		"array_splice($input, -1, 1, array('black', 'maroon'));",
		"var_dump($input);"
    ],
    "description": "Remove a portion of the array and replace it with something else"
},
"array_sum()": {
    "prefix": "phparray_sum",
    "body": [
       " $a = array(2, 4, 6, 8);",
"echo 'sum(a) = ' . array_sum($a) . '\n';",

"$b = array('a' => 1.2, 'b' => 2.3, 'c' => 3.4);",
"echo 'sum(b) = ' . array_sum($b) . '\n';"
    ],
    "description": "Calculate the sum of values in an array"
},
"array_udiff()": {
    "prefix": "phparray_udiff",
    "body": [
		"$array1 = array(new stdClass, new stdClass,",
               " new stdClass, new stdClass,",
               ");",

"$array2 = array(",
                "new stdClass, new stdClass,",
              " );",

"$array1[0]->width = 11; $array1[0]->height = 3;",
"$array1[1]->width = 7;  $array1[1]->height = 1;",
"$array1[2]->width = 2;  $array1[2]->height = 9;",
"$array1[3]->width = 5;  $array1[3]->height = 7;",

"$array2[0]->width = 7;  $array2[0]->height = 5;",
"$array2[1]->width = 9;  $array2[1]->height = 2;",

"function compare_by_area($a, $b) {",
    "$areaA = $a->width * $a->height;",
   " $areaB = $b->width * $b->height;",
    
    "if ($areaA < $areaB) {",
        "return -1;",
    "} elseif ($areaA > $areaB) {",
        "return 1;",
    "} else {",
       " return 0;",
    "}",
"}",

"print_r(array_udiff($array1, $array2, 'compare_by_area'));"
        ]},
		"array_udiff_assoc()": {
			"prefix": "phparray_udiff_assoc",
			"body": [
				"class cr {",1,
					"private $priv_member;",
					"function __construct($val)",
					"{",
						"$this->priv_member = $val;",
					"}",
				
					"static function comp_func_cr($a, $b)",
					"{",
						"if ($a->priv_member === $b->priv_member) return 0;",
						"return ($a->priv_member > $b->priv_member)? 1:-1;",
					"}",
				
					"static function comp_func_key($a, $b)",
				"{",
						"if ($a === $b) return 0;",
						"return ($a > $b)? 1:-1;",
					"}",
				"}",
				"$a = array('0.1' => new cr(9), '0.5' => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);",
				"$b = array('0.2' => new cr(9), '0.5' => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);",
				
				"$result = array_udiff_uassoc($a, $b, array('cr', 'comp_func_cr'), array('cr', 'comp_func_key'));",
				"print_r($result);"
			],
			"description": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
		},
		"array_udiff_uassoc()": {
			"prefix": "phparray_udiff_uassoc",
			"body": [
				"class cr {",
					"private $priv_member;",
					"function __construct($val)",
					"{",
						"$this->priv_member = $val;",
					"}",
				
					"static function comp_func_cr($a, $b)",
					"{",
						"if ($a->priv_member === $b->priv_member) return 0;",
						"return ($a->priv_member > $b->priv_member)? 1:-1;",
					"}",
				
					"static function comp_func_key($a, $b)",
					"{",
						"if ($a === $b) return 0;",
						"return ($a > $b)? 1:-1;",
					"}",
				"}",
				"$a = array('0.1' => new cr(9), '0.5' => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);",
				"$b = array('0.2' => new cr(9), '0.5' => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);",
				
				"$result = array_udiff_uassoc($a, $b, array('cr', 'comp_func_cr'), array('cr', 'comp_func_key'));",
				"print_r($result);"
			],
			"description": "Computes the difference of arrays with additional index check, compares data and indexes by separate callback functions"
		},
		"array_uintersect()": {
			"prefix": "phparray_uintersect",
			"body": [
				"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
"$array2 = array('a' => 'GREEN', 'B' => 'brown', 'yellow', 'red');",

"print_r(array_uintersect($array1, $array2, 'strcasecmp'));"
			],
			"description": "Computes the intersection of arrays with additional index check, compares data by a callback function"
		},
		"array_uintersect_assoc()": {
			"prefix": "phparray_uintersect_assoc",
			"body": [
				"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
"$array2 = array('a' => 'GREEN', 'B' => 'brown', 'yellow', 'red');",

"print_r(array_uintersect_assoc($array1, $array2, 'strcasecmp'));"
			],
			"description": "Computes the intersection of arrays with additional index check, compares data and indexes by a callback function"
		},
		"array_uintersect_uassoc()": {
			"prefix": "phparray_uintersect_uassoc",
			"body": [
				"$array1 = array('a' => 'green', 'b' => 'brown', 'c' => 'blue', 'red');",
"$array2 = array('a' => 'GREEN', 'B' => 'brown', 'yellow', 'red');",

"print_r(array_uintersect_uassoc($array1, $array2, 'strcasecmp', 'strcasecmp'));"
			],
			"description": "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions"
		},
		"array_unique()": {
			"prefix": "phparray_unique",
			"body": [
				"$input = array('a' => 'green', 'red', 'b' => 'green', 'blue', 'red');",
"$result = array_unique($input);",
"print_r($result);"
			],
			"description": "Removes duplicate values from an array"
		},
		"array_unshift()": {
			"prefix": "phparray_unshift",
			"body": [
				"$queue = [",
					"'orange',",
					"'banana'",
				"];",
				
				"array_unshift($queue, 'apple', 'raspberry');",
				"var_dump($queue);"
			],
			"description": "Prepend one or more elements to the beginning of an array"
		},
		"array_values()": {
			"prefix": "phparray_values",
			"body": [
				"$array = array('size' => 'XL', 'color' => 'gold');",
"print_r(array_values($array));"
			],
			"description": "Return all the values of an array"
		},
		"array_walk()": {
			"prefix": "phparray_walk",
			"body": [
				"$fruits = array('d' => 'lemon', 'a' => 'orange', 'b' => 'banana', 'c' => 'apple');",

"function test_alter(&$item1, $key, $prefix)",
"{",
  "  $item1 = '$prefix: $item1';",
"}",

"function test_print($item2, $key)",
"{",
   " echo '$key. $item2\n';",
"}",

"echo 'Before ...:\n';",
"array_walk($fruits, 'test_print');",

"array_walk($fruits, 'test_alter', 'fruit');",
"echo '... and after:\n';",

"array_walk($fruits, 'test_print');"
			],
			"description": "Apply a user-defined function to every member of an array"
		},
		"array_walk_recursive()": {
			"prefix": "phparray_walk_recursive",
			"body": [
				"$sweet = array('a' => 'apple', 'b' => 'banana');",
"$fruits = array('sweet' => $sweet, 'sour' => 'lemon');",

"function test_print($item, $key)",
"{",
"    echo '$key holds $item\n';",
"}",

"array_walk_recursive($fruits, 'test_print');"
			],
			"description": "Apply a user-defined function recursively to every member of an array"
		},
		"arsort()": {
			"prefix": "phparsort",
			"body": [
				"$fruits = array('d' => 'lemon', 'a' => 'orange', 'b' => 'banana', 'c' => 'apple');",
"arsort($fruits);",
"foreach ($fruits as $key => $val) {",
   " echo '$key = $val\n';",
"}"
			],
			"description": "Sort an array in reverse order and maintain index association"
		},
		"asort()": {
			"prefix": "phpasort",
			"body": [
				"$fruits = array('d' => 'lemon', 'a' => 'orange', 'b' => 'banana', 'c' => 'apple');",
"asort($fruits);",
"foreach ($fruits as $key => $val) {",
  "  echo '$key = $val\n';",
"}"
			],
			"description": "Sort an array and maintain index association"
		},
		"compact()": {
			"prefix": "phpcompact",
			"body": [
				"$city  = 'San Francisco';",
"$state = 'CA';",
"$event = 'SIGGRAPH';",

"$location_vars = array('city', 'state');",

"$result = compact('event', $location_vars);",
"print_r($result);"
			],
			"description": "Create an array containing variables and their values"
		},
		"count()": {
			"prefix": "phpcount",
			"body": [
				"$a[0] = 1;",
"$a[1] = 3;",
"$a[2] = 5;",
"var_dump(count($a));",

"$b[0]  = 7;",
"$b[5]  = 9;",
"$b[10] = 11;",
"var_dump(count($b));"
			],
			"description": "Count all elements in an array or something in an object"
		},
		"current()": {
			"prefix": "phpcurrent",
			"body": [
				"$transport = array('foot', 'bike', 'car', 'plane');",
"$mode = current($transport); // $mode = 'foot';",
"$mode = next($transport);    // $mode = 'bike';",
"$mode = current($transport); // $mode = 'bike';",
"$mode = prev($transport);    // $mode = 'foot';",
"$mode = end($transport);     // $mode = 'plane';",
"$mode = current($transport); // $mode = 'plane';",

"$arr = array();",
"var_dump(current($arr)); ",

"$arr = array(array());",
"var_dump(current($arr)); ,"
			],
			"description": "Return the current element in an array"
		},
		"each()": {
			"prefix": "phpeach",
			"body": [
			"$foo = array('bob', 'fred', 'jussi', 'jouni', 'egon', 'marliese');",
"$bar = each($foo);",
"print_r($bar);"
			],
			"description": "Return the current key and value pair from an array and advance the array cursor"
		},
		"end": {
			"prefix": "phpend",
			"body": [
				"$fruits = array('apple', 'banana', 'cranberry');",
				"echo end($fruits);" 
			],
			"description": "end() function"
		  },
		  "extract": {
			"prefix": "phpextract",
			"body": [
			 

"$size = 'large';",
"$var_array = array('color' => 'blue',",
                 "  'size'  => 'medium',",
                  " 'shape' => 'sphere');",
"extract($var_array, EXTR_PREFIX_SAME, 'wddx');",

"echo '$color, $size, $shape, $wddx_size\n';"
			],
			"description": "extract() function"
		  },
		  "in_array": {
			"prefix": "phpin_array",
			"body": [
				"$a = array(array('p', 'h'), array('p', 'r'), 'o');",

				"if (in_array(array('p', 'h'), $a)) {",
					"echo ''ph' was found\n';",
			"}",
				
				"if (in_array(array('f', 'i'), $a)) {",
				"'echo 'fi' was found\n';",
			"}",
				
				"if (in_array('o', $a)) {",
					"echo 'o' was found\n;",
				"}"
			],
			"description": "in_array() function"
		  },
		  "key": {
			"prefix": "phpkey",
			"body": [
			"$array = array(",
				"'fruit1' => 'apple',",
			"'fruit2' => 'orange',",
				"'fruit3' => 'grape',",
				"'fruit4' => 'apple',",
			"'fruit5' => 'apple');",
			
		"while ($fruit_name = current($array)) {",
			"if ($fruit_name == 'apple') {",
					"echo key($array),'\n';",
				"}",
				"next($array);",
		"}"
			],
			"description": "key() function"
		  },
		  "krsort": {
			"prefix": "phpkrsort",
			"body": [
				"$fruits = array('d'=>'lemon', 'a'=>'orange', 'b'=>'banana', 'c'=>'apple');",
			"krsort($fruits);",
				"foreach ($fruits as $key => $val) {",
				"echo '$key = $val\n';",
				"}"
			],
			"description": "krsort() function"
		  },
		  "ksort": {
			"prefix": "phpksort",
			"body": [
				"$fruits = array('d'=>'lemon', 'a'=>'orange', 'b'=>'banana', 'c'=>'apple');",
				"ksort($fruits);",
				"foreach ($fruits as $key => $val) {",
				"echo '$key = $val\n';",
			"}"
			],
			"description": "ksort() function"
		  },
		  "list": {
			"prefix": "phplist",
			"body": [
				"$info = array('coffee', 'brown', 'caffeine');",

				"list($drink, $color, $power) = $info;",
				"echo '$drink is $color and $power makes it special.\n';",
				
				"list($drink, , $power) = $info;",
				"echo '$drink has $power.\n';",
				
			"list( , , $power) = $info;",
				"echo 'I need $power!\n';",
				
				"list($bar) = 'abcde';",
				"var_dump($bar);"
			],
			"description": "list() function"
		  },
		  "natcasesort": {
			"prefix": "phpnatcasesort",
			"body": [
				"$array1 = $array2 = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');",

			"sort($array1);",
			"echo 'Standard sorting\n';",
			"print_r($array1);",
				
			"natcasesort($array2);",
		"echo'\nNatural order sorting (case-insensitive)\n';",
				"print_r($array2);"
			],
			"description": "natcasesort() function"
		  },
		  "natsort": {
			"prefix": "phpnatsort",
			"body": [
				"$array1 = $array2 = array('img12.png', 'img10.png', 'img2.png', 'img1.png');",

				"asort($array1);",
				"echo 'Standard sorting\n';",
			"print_r($array1);",
				
				"natsort($array2);",
				"echo '\nNatural order sorting\n';",
				"print_r($array2);"
			],
			"description": "natsort() function"
		  },
		  "next": {
			"prefix": "phpnext",
			"body": [
				"$transport = array('foot', 'bike', 'car', 'plane');",
				"$mode = current($transport); // $mode = 'foot';",
				"$mode = next($transport);    // $mode = 'bike';",
				"$mode = next($transport);    // $mode = 'car';",
				"$mode = prev($transport);    // $mode = 'bike';",
				"$mode = end($transport);     // $mode = 'plane';"
			],
			"description": "next() function"
		  },
		  "pos": {
			"prefix": "phppos",
			"body": [
				"https://www.php.net/manual/en/function.pos.php"
			],
			"description": "pos() function"
		  },
		  "prev": {
			"prefix": "phpprev",
			"body": [
			"$transport = array('foot', 'bike', 'car', 'plane');",
				"$mode = current($transport); // $mode = 'foot';",
				"$mode = next($transport);    // $mode = 'bike';",
				"$mode = next($transport);    // $mode = 'car';",
				"$mode = prev($transport);    // $mode = 'bike';",
				"$mode = end($transport);     // $mode = 'plane';"
			],
			"description": "prev() function"
		  },
		  "range": {
			"prefix": "phprange",
			"body": [
"foreach (range(0, 12) as $number) {",
   " echo $number;",
"}",

"echo '\n';",

"foreach (range(0, 100, 10) as $number) {",
    "echo $number;",
"}",

"echo '\n;",

"foreach (range('a', 'i') as $letter) {",
    "echo $letter;",
"}",

"echo '\n';",

"foreach (range('c', 'a') as $letter) {",
    "echo $letter;",
"}"
			],
			"description": "range() function"
		  },
		  "reset": {
			"prefix": "phpreset",
			"body": [
			  
			"$array = array('step one', 'step two', 'step three', 'step four');",

				"echo current($array) . <br />\n;" ,
				
				"next($array);",
				"next($array);",
				"echo current($array) . '<br />\n'; // 'step three'",
				
			"// reset pointer, start again on step one",
			"reset($array);",
				"echo current($array) . '<br />\n'; // 'step one;"
			],
			"description": "reset() function"
		  },
		  "rsort": {
			"prefix": "phprsort",
			"body": [
				"$fruits = array('lemon', 'orange', 'banana', 'apple');",
				"rsort($fruits);",
				"foreach ($fruits as $key => $val) {",
					"echo '$key = $val\n';",
				"}"
			],
			"description": "rsort() function"
		  },
		  "shuffle": {
			"prefix": "phpshuffle",
			"body": [
				"$numbers = range(1, 20);",
				"shuffle($numbers);",
				"foreach ($numbers as $number) {",
					"echo '$number ';",
				"}"
			],
			"description": "shuffle() function"
		  },
		  "sizeof": {
			"prefix": "phpsizeof",
			"body": [
				"https://www.php.net/manual/en/function.sizeof.php"
			],
			"description": "sizeof() function"
		  },
		  "sort": {
			"prefix": "phpsort",
			"body": [
				"$fruits = array('lemon', 'orange', 'banana', 'apple');",
				"sort($fruits);",
				"foreach ($fruits as $key => $val) {",
					"echo 'fruits[' . $key . '] = ' . $val . '\n';",
				"}"
			],
			"description": "sort() function"
		  },
		  "uasort": {
			"prefix": "phpuasort",
			"body": [
"function cmp($a, $b) {",
    "if ($a == $b) {",
        "return 0;",
    "}",
    "return ($a < $b) ? -1 : 1;",
"}",

"$array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);",
"print_r($array);",

"uasort($array, 'cmp');",
"print_r($array);"
			],
			"description": "uasort() function"
		  },
		  "uksort": {
			"prefix": "phpuksort",
			"body": [
				"function cmp($a, $b)",
				"{",
					"$a = preg_replace('@^(a|an|the) @', '', $a);",
					"$b = preg_replace('@^(a|an|the) @', '', $b);",
					"return strcasecmp($a, $b);",
				"}",
				
				"$a = array('John' => 1, 'the Earth' => 2, 'an apple' => 3, 'a banana' => 4);'",
				
				"'uksort($a, 'cmp');'",
				
				"'foreach ($a as $key => $value) {'",
					"'echo '$key: $value\n';'",
				"}"
			],
			"description": "uksort() function"
		  },
		  "usort": {
			"prefix": "phpusort",
			"body": [
				"function cmp($a, $b)",
				"{",
					"if ($a == $b) {",
						"return 0;",
					"}",
					"return ($a < $b) ? -1 : 1;",
				"}",
				
				"$a = array(3, 2, 5, 6, 1);",
				
				"usort($a, 'cmp');",
				
				"foreach ($a as $key => $value) {",
					"echo '$key: $value\n';",
				"}"
			],
			"description": "usort() function"
		  },


  "PHP Mail Functions": {
    "prefix": "phpphp_mail_functions",
    "body": [
      "ezmlm_hash()",
      "mail()"
    ],
    "description": "List of PHP mail functions"
  },
  "ezmlm_hash": {
	"prefix": "phpezmlm_hash",
	"body": [
	 
	],
	"description": "ezmlm_hash() function"
  },
  "mail": {
	"prefix": "phpmail",
	"body": [
		"$text = str_replace('\n.', '\n..', $text);"
	],
	"description": "mail() function"
  },
  "XML Parser Functions": {
    "prefix": "php_xml_parser_functions",
    "body": [
      "utf8_decode()",
      "utf8_encode()",
      "xml_error_string()",
      "xml_get_current_byte_index()",
      "xml_get_current_column_number()",
      "xml_get_current_line_number()",
      "xml_get_error_code()",
      "xml_parse()",
      "xml_parse_into_struct()",
      "xml_parser_create_ns()",
      "xml_parser_create()",
      "xml_parser_free()",
      "xml_parser_get_option()",
      "xml_parser_set_option()",
      "xml_set_character_data_handler()",
      "xml_set_default_handler()",
      "xml_set_element_handler()",
      "xml_set_end_namespace_decl_handler()",
      "xml_set_external_entity_ref_handler()",
      "xml_set_notation_decl_handler()",
      "xml_set_object()",
      "xml_set_processing_instruction_handler()",
      "xml_set_start_namespace_decl_handler()",
      "xml_set_unparsed_entity_decl_handler()"
    ],
    "description": "List of XML Parser functions"
  },
  "XML Parser Constants": {
    "prefix": "php_xml_parser_constants",
    "body": [
      "XML_ERROR_NONE (integer)",
      "XML_ERROR_NO_MEMORY (integer)",
      "XML_ERROR_SYNTAX (integer)",
      "XML_ERROR_NO_ELEMENTS (integer)",
      "XML_ERROR_INVALID_TOKEN (integer)",
      "XML_ERROR_UNCLOSED_TOKEN (integer)",
      "XML_ERROR_PARTIAL_CHAR (integer)",
      "XML_ERROR_TAG_MISMATCH (integer)",
      "XML_ERROR_DUPLICATE_ATTRIBUTE (integer)",
      "XML_ERROR_JUNK_AFTER_DOC_ELEMENT (integer)",
      "XML_ERROR_PARAM_ENTITY_REF (integer)",
      "XML_ERROR_UNDEFINED_ENTITY (integer)",
      "XML_ERROR_RECURSIVE_ENTITY_REF (integer)",
      "XML_ERROR_ASYNC_ENTITY (integer)",
      "XML_ERROR_BAD_CHAR_REF (integer)",
      "XML_ERROR_BINARY_ENTITY_REF (integer)",
      "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF (integer)",
      "XML_ERROR_MISPLACED_XML_PI (integer)",
      "XML_ERROR_UNKNOWN_ENCODING (integer)",
      "XML_ERROR_INCORRECT_ENCODING (integer)",
      "XML_ERROR_UNCLOSED_CDATA_SECTION (integer)",
      "XML_ERROR_EXTERNAL_ENTITY_HANDLING (integer)",
      "XML_OPTION_CASE_FOLDING (integer)",
      "XML_OPTION_TARGET_ENCODING (integer)",
      "XML_OPTION_SKIP_TAGSTART (integer)",
      "XML_OPTION_SKIP_WHITE (integer)"
    ],
    "description": "List of XML Parser constants"
  },
  "utf8_decode": {
	"prefix": "phputf8_decode",
	"body": [
		"$utf8_string = '\"x5A\"x6F\"xC3\"xAB';",
		"$iso8859_1_string = utf8_decode($utf8_string);",
		"echo bin2hex($iso8859_1_string), '\n';",
		
		"$invalid_utf8_string = '\"xC3';",
		"$iso8859_1_string = utf8_decode($invalid_utf8_string);",
		"var_dump($iso8859_1_string);",
		
		
		"$utf8_string = '\"xE2\"x82\"xAC';",
		"$iso8859_1_string = utf8_decode($utf8_string);",
	"var_dump($iso8859_1_string);"
	],
	"description": "utf8_decode() function"
  },
  "utf8_encode": {
	"prefix": "phputf8_encode",
	"body": [
		"$iso8859_1_string = '\"x5A\"x6F\"xEB';",
		"$utf8_string = utf8_encode($iso8859_1_string);",
		"echo bin2hex($utf8_string), '\n';"
	],
	"description": "utf8_encode() function"
  },
  "xml_error_string": {
	"prefix": "phpxml_error_string",
	"body": [
	  
	  "https://www.php.net/manual/en/function.xml-error-string.php"
	],
	"description": "xml_error_string() function"
  },
  "xml_get_current_byte_index": {
	"prefix": "phpxml_get_current_byte_index",
	"body": [
	 "https://www.php.net/manual/en/function.xml-get-current-byte-index.php"
	],
	"description": "xml_get_current_byte_index() function"
  },
  "xml_get_current_column_number": {
	"prefix": "phpxml_get_current_column_number",
	"body": [
	 "https://www.php.net/manual/en/function.xml-get-current-column-number.php"
	],
	"description": "xml_get_current_column_number() function"
  },
  "xml_get_current_line_number": {
	"prefix": "phpxml_get_current_line_number",
	"body": [
	  "https://www.php.net/manual/en/function.xml-get-current-line-number.php"
	],
	"description": "xml_get_current_line_number() function"
  },
  "xml_get_error_code": {
	"prefix": "phpxml_get_error_code",
	"body": [
	 "https://www.php.net/manual/en/function.xml-get-error-code.php"
	],
	"description": "xml_get_error_code() function"
  },
  "xml_parse": {
	"prefix": "phpxml_parse",
	"body": [
		"$stream = fopen('large.xml', 'r');",
		"$parser = xml_parser_create();",
		"while (($data = fread($stream, 16384))) {",
			"xml_parse($parser, $data); // parse the current chunk",
		"}",
		"xml_parse($parser, '', true); // finalize parsing",
		"xml_parser_free($parser);",
		"fclose($stream);"
	],
	"description": "xml_parse() function"
  },
  "xml_parse_into_struct": {
	"prefix": "phpxml_parse_into_struct",
	"body": [
		"$simple = '<para><note>simple note</note></para>';",
		"$p = xml_parser_create();",
		"xml_parse_into_struct($p, $simple, $vals, $index);",
		"xml_parser_free($p);",
		"echo 'Index array\n';",
		"print_r($index);",
		"echo '\nVals array\n';",
		"print_r($vals);"
	],
	"description": "xml_parse_into_struct() function"
  },
  "xml_parser_create_ns": {
	"prefix": "phpxml_parser_create_ns",
	"body": [
	 "https://www.php.net/manual/en/function.xml-parser-create-ns.php"
	],
	"description": "xml_parser_create_ns() function"
  },
  "xml_parser_create": {
	"prefix": "phpxml_parser_create",
	"body": [
	  "https://www.php.net/manual/en/function.xml-parser-create.php"
	],
	"description": "xml_parser_create() function"
  },
  "xml_parser_free": {
	"prefix": "phpxml_parser_free",
	"body": [
	  "https://www.php.net/manual/en/function.xml-parser-free.php"
	],
	"description": "xml_parser_free() function"
  },
  "xml_parser_get_option": {
	"prefix": "phpxml_parser_get_option",
	"body": [
	  "https://www.php.net/manual/en/function.xml-parser-get-option.php"
	],
	"description": "xml_parser_get_option() function"
  },
  "xml_parser_set_option": {
	"prefix": "phpxml_parser_set_option",
	"body": [
	 "https://www.php.net/manual/en/function.xml-parser-set-option.php"
	],
	"description": "xml_parser_set_option() function"
  },
  "xml_set_character_data_handler": {
	"prefix": "phpxml_set_character_data_handler",
	"body": [
	 "https://www.php.net/manual/en/function.xml-set-character-data-handler.php"
	],
	"description": "xml_set_character_data_handler() function"
  },
  "xml_set_default_handler": {
	"prefix": "phpxml_set_default_handler",
	"body": [
	 "https://www.php.net/manual/en/function.xml-set-default-handler.php"
	],
	"description": "xml_set_default_handler() function"
  },
  "xml_set_element_handler": {
	"prefix": "phpxml_set_element_handler",
	"body": [
"https://www.php.net/manual/en/function.xml-set-element-handler.php"
	],
	"description": "xml_set_element_handler() function"
  },
  "xml_set_end_namespace_decl_handler": {
	"prefix": "phpxml_set_end_namespace_decl_handler",
	"body": [
	  "https://www.php.net/manual/en/function.xml-set-end-namespace-decl-handler.php"
	],
	"description": "xml_set_end_namespace_decl_handler() function"
  },
  "xml_set_external_entity_ref_handler": {
	"prefix": "phpxml_set_external_entity_ref_handler",
	"body": [
	  "https://www.php.net/manual/en/function.xml-set-external-entity-ref-handler.php"
	],
	"description": "xml_set_external_entity_ref_handler() function"
  },
  "xml_set_notation_decl_handler": {
	"prefix": "phpxml_set_notation_decl_handler",
	"body": [
	  "https://www.php.net/manual/en/function.xml-set-notation-decl-handler.php"
	],
	"description": "phpxml_set_notation_decl_handler() function"
  },
  "xml_set_object": {
	"prefix": "phpxml_set_object",
	"body": [
		"class XMLParser",
		"{",
			"private $parser;",
		
			"function __construct() ",
		"{",
				"$this->parser = xml_parser_create();",
		
				"xml_set_object($this->parser, $this);",
				"xml_set_element_handler($this->parser,'tag_open','tag_close');",
				"xml_set_character_data_handler($this->parser,'cdata');",
			"}",
		
			"function __destruct()",
			"{",
				"xml_parser_free($this->parser);",
				"unset($this->parser);",
			"}",
		
			"function parse($data)" ,
			"{",
				"xml_parse($this->parser, $data);",
			"}",
		
			"function tag_open($parser, $tag, $attributes) ",
			"{",
				"var_dump($tag, $attributes);" ,
			"}",
		
			"function cdata($parser, $cdata) ",
			"{",
				"var_dump($cdata);",
			"}",
		
			"function tag_close($parser, $tag)" ,
			"{",
				"var_dump($tag);",
			"}",
		"}",
		
		"$xml_parser = new XMLParser();",
		"$xml_parser->parse('<A ID='hallo'>PHP</A>');"
		
		
	],
	"description": "xml_set_object() function"
  },
  "xml_set_processing_instruction_handler": {
	"prefix": "phpxml_set_processing_instruction_handler",
	"body": [
	 "https://www.php.net/manual/en/function.xml-set-processing-instruction-handler.php"
	],
	"description": "xml_set_processing_instruction_handler() function"
  },
  "xml_set_start_namespace_decl_handler": {
	"prefix": "phpxml_set_start_namespace_decl_handler",
	"body": [
	  "https://www.php.net/manual/en/function.xml-set-start-namespace-decl-handler.php"
	],
	"description": "xml_set_start_namespace_decl_handler() function"
  },
  "xml_set_unparsed_entity_decl_handler": {
	"prefix": "phpxml_set_unparsed_entity_decl_handler",
	"body": [
	  "https://www.php.net/manual/en/function.xml-set-unparsed-entity-decl-handler.php"
	],
	"description": "xml_set_unparsed_entity_decl_handler() function"
  },
  "addcslashes": {
	"prefix": "phpaddcslashes",
	"body": [
	 "$escaped = addcslashes($not_escaped, '\"0..\"37!@\"177..\"377');"
	],
	"description": "addcslashes() function"
  },
  "addslashes": {
	"prefix": "phpaddslashes",
	"body": [
		"$str = 'O'Reilly?';",
		"eval('echo '' . addslashes($str) . '';');"
	],
	"description": "addslashes() function"
  },
  "bin2hex": {
	"prefix": "phpbin2hex",
	"body": [
		"$hex = bin2hex('Hello world!');",

		"var_dump($hex);",
		"var_dump(hex2bin($hex));"
	],
	"description": "bin2hex() function"
  },
  "chop": {
	"prefix": "phpchop",
	"body": [
	  "https://www.php.net/manual/en/function.chop.php"
	],
	"description": "chop() function"
  },
  "chr": {
	"prefix": "phpchr",
	"body": [
	"$str = 'The string ends in escape: ';",
		"$str .= chr(27);" ,
		
		
		"$str = sprintf('The string ends in escape: %c', 27);"
	],
	"description": "chr() function"
  },
  "chunk_split": {
	"prefix": "phpchunk_split",
	"body": [
	 "$new_string = chunk_split(base64_encode($data));"
	],
	"description": "chunk_split() function"
  },
  "convert_cyr_string": {
	"prefix": "phpconvert_cyr_string",
	"body": [
	 "https://www.php.net/manual/en/function.convert-cyr-string.php"
	],
	"description": "convert_cyr_string() function"
  },
  "convert_uudecode": {
	"prefix": "phpconvert_uudecode",
	"body": [
		"echo convert_uudecode('+22!L;W9E(%!(4\"$`\n`');"
	],
	"description": "convert_uudecode() function"
  },
  "convert_uuencode": {
	"prefix": "phpconvert_uuencode",
	"body": [
		"$some_string = 'test\ntext text\r\n';",

		"echo convert_uuencode($some_string);"
	],
	"description": "convert_uuencode() function"
  },
  "count_chars": {
	"prefix": "phpcount_chars",
	"body": [
		"$data = 'Two Ts and one F.';",

		"foreach (count_chars($data, 1) as $i => $val) {",
		   "echo 'There were $val instance(s) of \" , chr($i) , '\" in the string.\n';"
	],
	"description": "count_chars() function"
  },
  "crc32": {
	"prefix": "phpcrc32",
	"body": [
		"$checksum = crc32('The quick brown fox jumped over the lazy dog.');",
		"printf('%u\n', $checksum);"
	],
	"description": "crc32() function"
  },
  "crypt": {
	"prefix": "phpcrypt",
	"body": [
		"$hashed_password = crypt('mypassword');",
		"if (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {",
			"echo 'Password verified!';"
		 
	],
	"description": "crypt() function"
  },
  "echo": {
	"prefix": "phpecho",
	"body": [
	 "https://www.php.net/manual/en/function.echo.php"
	],
	"description": "echo statement"
  },
  "explode": {
	"prefix": "phpexplode",
	"body": [
		"$str = 'one|two|three|four';",

		"print_r(explode('|', $str, 2));",
		
		"print_r(explode('|', $str, -1));"
	],
	"description": "explode() function"
  },
  "fprintf": {
	"prefix": "phpfprintf",
	"body": [
		"if (!($fp = fopen('date.txt', 'w'))) {",
			"return;",
		"}",
		
		"fprintf($fp, '%04d-%02d-%02d', $year, $month, $day);"
	],
	"description": "fprintf() function"
  },
  "get_html_translation_table": {
	"prefix": "phpget_html_translation_table",
	"body": [
	  "var_dump(get_html_translation_table(HTML_ENTITIES, ENT_QUOTES | ENT_HTML5));"
	],
	"description": "get_html_translation_table() function"
  },
  "hebrev": {
	"prefix": "phphebrev",
	"body": [
	  "https://www.php.net/manual/en/function.hebrev.php"
	],
	"description": "hebrev() function"
  },
  "hebrevc": {
	"prefix": "phphebrevc",
	"body": [
	  "https://www.php.net/manual/en/function.hebrevc.php"
	],
	"description": "hebrevc() function"
  },
  "html_entity_decode": {
	"prefix": "phphtml_entity_decode",
	"body": [
		"$orig = 'I'll \"walk\" the <b>dog</b> now';",

		"$a = htmlentities($orig);",
		
		"$b = html_entity_decode($a);",
		
		"echo $a;" ,
		
		"echo $b;" 
	],
	"description": "html_entity_decode() function"
  },
  "htmlentities": {
	"prefix": "phphtmlentities",
	"body": [
		"$str = '\"x8F!!!';",

		"echo htmlentities($str, ENT_QUOTES, 'UTF-8');",
		
		"echo htmlentities($str, ENT_QUOTES | ENT_IGNORE, 'UTF-8');"
	],
	"description": "htmlentities() function"
  },
  "htmlspecialchars_decode": {
	"prefix": "phphtmlspecialchars_decode",
	"body": [
		"$str = '<p>this -&gt; &quot;</p>\n';",

		"echo htmlspecialchars_decode($str);",
		
		"echo htmlspecialchars_decode($str, ENT_NOQUOTES);"
	],
	"description": "htmlspecialchars_decode() function"
  },
  "htmlspecialchars": {
	"prefix": "phphtmlspecialchars",
	"body": [
		"$new = htmlspecialchars('<a href='test'>Test</a>', ENT_QUOTES);",
		"echo $new;" 
	],
	"description": "htmlspecialchars() function"
  },
  "implode": {
	"prefix": "phpimplode",
	"body": [
		"$array = ['lastname', 'email', 'phone'];",
		"var_dump(implode(',', $array));" ,
		
		"var_dump(implode('hello', []));", 
		
		"var_dump(implode(['a', 'b', 'c'])); "
	],
	"description": "implode() function"
  },
  "join": {
	"prefix": "phpjoin",
	"body": [
	  "https://www.php.net/manual/en/function.join.php"
	],
	"description": "join() function"
  },
  "levenshtein": {
	"prefix": "phplevenshtein",
	"body": [
		"$input = 'carrrot';",
		"$words  = array('apple','pineapple','banana','orange',",
               " 'radish','carrot','pea','bean','potato');",
				"$shortest = -1;",
				"foreach ($words as $word) {",
					"$lev = levenshtein($input, $word);",
					"if ($lev == 0) {",
						"$closest = $word;",
						"$shortest = 0;",
						"break;",
    "}"
	],
	"description": "levenshtein() function"
  },
  "localeconv": {
	"prefix": "phplocaleconv",
	"body": [
		"if (false !== setlocale(LC_ALL, 'nl_NL.UTF-8@euro')) {",
			"$locale_info = localeconv();",
			"print_r($locale_info);"
	],
	"description": "localeconv() function"
  },
  "ltrim": {
	"prefix": "phpltrim",
	"body": [
		"$text = '\t\tThese are a few words :) ...  ';",
		"$binary = '\"x09Example string\"x0A';",
		"$hello  = 'Hello World';",
		"var_dump($text, $binary, $hello);",
		
		"print '\n';"
		,
		
		"$trimmed = ltrim($text);",
		"var_dump($trimmed);",
		
		"$trimmed = ltrim($text, ' \t.');",
		"var_dump($trimmed);",
		
	"$trimmed = ltrim($hello, 'Hdle');",
		"var_dump($trimmed);",
		
		
		"$clean = ltrim($binary, '\"x00..\"x1F');",
		"var_dump($clean);"
	],
	"description": "ltrim() function"
  },
  "md5": {
	"prefix": "phpmd5",
	"body": [
		"$str = 'apple';",

		"if (md5($str) === '1f3870be274f6c49b3e31a0c6728957f') {",
			"echo 'Would you like a green or red apple?';"
	],
	"description": "md5() function"
  },
  "md5_file": {
	"prefix": "phpmd5_file",
	"body": [
		"$file = 'php-5.3.0alpha2-Win32-VC9-x64.zip';",

		"echo 'MD5 file hash of ' . $file . ': ' . md5_file($file);"
	],
	"description": "md5_file() function"
  },
  "metaphone": {
	"prefix": "phpmetaphone",
	"body": [
		"var_dump(metaphone('programming'));",
		"var_dump(metaphone('programmer'));"
	],
	"description": "metaphone() function"
  },
  "money_format": {
	"prefix": "phpmoney_format",
	"body": [
		"$number = 1234.56;",
		"setlocale(LC_MONETARY, 'en_US');",
"echo money_format('%i', $number) . '\n';",
"setlocale(LC_MONETARY, 'it_IT');",
"echo money_format('%.2n', $number) . '\n';",
"$number = -1234.5672;",
"setlocale(LC_MONETARY, 'en_US');",
"echo money_format('%(#10n', $number) . '\n';",
"echo money_format('%=*(#10.2n', $number) . '\n';",
"setlocale(LC_MONETARY, 'de_DE');",
"echo money_format('%=*^-14#8.2i', 1234.56) . '\n';",
"setlocale(LC_MONETARY, 'en_GB');",
"echo money_format($fmt, 1234.56) . '\n';"
	],
	"description": "money_format() function"
  },
  "nl_langinfo": {
	"prefix": "phpnl_langinfo",
	"body": [
		"var_dump(nl_langinfo(CODESET));",
		"var_dump(nl_langinfo(YESEXPR));"
	],
	"description": "nl_langinfo() function"
  },
  "nl2br": {
	"prefix": "phpnl2br",
	"body": [
	 "echo nl2br('foo isn't\n bar');"
	],
	"description": "nl2br() function"
  },
  "number_format": {
	"prefix": "phpnumber_format",
	"body": [
		"$number = 1234.56;",

		"$english_format_number = number_format($number);",
		
		"$nombre_format_francais = number_format($number, 2, ',', ' ');",
		
		"$number = 1234.5678;",
		
		"$english_format_number = number_format($number, 2, '.', '');"
	],
	"description": "number_format() function"
  },
  "ord": {
	"prefix": "phpord",
	"body": [
		"$str = '\n';",
		"if (ord($str) == 10) {",
			"echo 'The first character of \"$str is a line feed.\n';"
	],
	"description": "phpord() function"
  },
  "parse_str": {
	"prefix": "phpparse_str",
	"body": [
		"parse_str('My Value=Something');",
		"echo $My_Value; // Something",
		
		"parse_str('My Value=Something', $output);",
		"echo $output['My_Value']; // Something"
	],
	"description": "parse_str() function"
  },
  "print": {
	"prefix": "phpprint",
	"body": [
		"print 'hello';",
		"print('hello');",
		"print(1 + 2) * 3;",
		"if ( print('hello') && false ) {",
			"print ' - inside if';",
		"}",
		"else {",
			"print ' - inside else';",
		"}"
	],
	"description": "print statement"
  },
  "printf": {
	"prefix": "phpprintf",
	"body": [
		"$s = 'monkey';",
		"$t = 'many monkeys';",
		
		"printf('[%s]\n',        $s);" ,
		"printf('[%10s]\n',      $s);" ,
		"printf('[%-10s]\n',     $s);" ,
		"printf('[%010s]\n',     $s); ",
		"printf('[%'#10s]\n',    $s); ",
		"printf('[%'#*s]\n', 10, $s); ",
		"printf('[%10.9s]\n',    $t);" ,
		"printf('[%-10.9s]\n',   $t); "
	],
	"description": "printf() function"
  },
  "quoted_printable_decode": {
	"prefix": "phpquoted_printable_decode",
	"body": [
		"$encoded = quoted_printable_encode('Möchten Sie ein paar Äpfel?');",

		"var_dump($encoded);",
		"var_dump(quoted_printable_decode($encoded));"
	],
	"description": "quoted_printable_decode() function"
  },
  "quotemeta": {
	"prefix": "phpquotemeta",
	"body": [
	  "var_dump(quotemeta('PHP is a popular scripting language. Fast, flexible, and pragmatic.'));"
	],
	"description": "quotemeta() function"
  },
  "rtrim": {
	"prefix": "phprtrim",
	"body": [
		"$text = '\t\tThese are a few words :) ...  ';",
		"$binary = '\"x09Example string\"x0A';",
		"$hello  = 'Hello World';",
		"var_dump($text, $binary, $hello);",
		
		"print '\n';",
		
		"$trimmed = rtrim($text);",
		"var_dump($trimmed);",
		
		"$trimmed = rtrim($text, ' \t.');",
		"var_dump($trimmed);",
		
		"$trimmed = rtrim($hello, 'Hdle');",
		"var_dump($trimmed);",
		
		
		"$clean = rtrim($binary, '\"x00..\"x1F');",
		"var_dump($clean);"
	],
	"description": "rtrim() function"
  },
  "setlocale": {
	"prefix": "phpsetlocale",
	"body": [
		"setlocale(LC_ALL, 'nl_NL');",

		"echo strftime('%A %e %B %Y', mktime(0, 0, 0, 12, 22, 1978));",
		
		"$loc_de = setlocale(LC_ALL, 'de_DE@euro', 'de_DE', 'de', 'ge');",
		"echo 'Preferred locale for german on this system is '$loc_de'';"
	],
	"description": "setlocale() function"
  },
  "sha1": {
	"prefix": "phpsha1",
	"body": [
		"$str = 'apple';",

		"if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {",
			"echo 'Would you like a green or red apple?';",
		"}"
	],
	"description": "sha1() function"
  },
  "sha1_file": {
	"prefix": "phpsha1_file",
	"body": [
		"foreach(glob('/home/Kalle/myproject/*.php') as $ent)",
		"{",
			"if(is_dir($ent))",
			"{",
				"continue;",
			"}",
		
			"echo $ent . ' (SHA1: ' . sha1_file($ent) . ')', PHP_EOL;"
	],
	"description": "sha1_file() function"
  },
  "similar_text": {
	"prefix": "phpsimilar_text",
	"body": [
		"$sim = similar_text('bafoobar', 'barfoo', $perc);",
		"echo 'similarity: $sim ($perc %)\n';",
		"$sim = similar_text('barfoo', 'bafoobar', $perc);",
		"echo 'similarity: $sim ($perc %)\n';"
	],
	"description": "similar_text() function"
  },
  "soundex": {
	"prefix": "phpsoundex",
	"body": [
		"soundex('Euler')       == soundex('Ellery');    // E460",
		"soundex('Gauss')       == soundex('Ghosh');     // G200",
		"soundex('Hilbert')     == soundex('Heilbronn'); // H416",
		"soundex('Knuth')       == soundex('Kant');      // K530",
		"soundex('Lloyd')       == soundex('Ladd');      // L300",
		"soundex('Lukasiewicz') == soundex('Lissajous'); // L222"
	],
	"description": "soundex() function"
  },
  "sprintf": {
	"prefix": "phpsprintf",
	"body": [
		"$format = 'The %s contains %d monkeys';",
		"echo sprintf($format, $num, $location);"
	],
	"description": "sprintf() function"
  },
  "sscanf": {
	"prefix": "phpsscanf",
	"body": [
		"list($serial) = sscanf('SN/2350001', 'SN/%d');",
		"$mandate = 'January 01 2000';",
		"list($month, $day, $year) = sscanf($mandate, '%s %d %d');",
		"echo 'Item $serial was manufactured on: $year-' . substr($month, 0, 3) . '-$day\n';"
	],
	"description": "sscanf() function"
  },
  "str_ireplace": {
	"prefix": "phpstr_ireplace",
	"body": [
		"$bodytag = str_ireplace('%body%', 'black', '<body text=%BODY%>');",
		"echo $bodytag; // <body text=black>"
	],
	"description": "str_ireplace() function"
  },
  "str_pad": {
	"prefix": "phpstr_pad",
	"body": [
		"$input = 'Alien';",
		"echo str_pad($input, 10); "             ,        
		"echo str_pad($input, 10, '-=', STR_PAD_LEFT);  // produces '-=-=-Alien'",
		"echo str_pad($input, 10, '_', STR_PAD_BOTH);   // produces '__Alien___'",
		"echo str_pad($input,  6, '___');               // produces 'Alien_'",
		"echo str_pad($input,  3, '*');"    
	],
	"description": "str_pad() function"
  },
  "str_repeat": {
	"prefix": "phpstr_repeat",
	"body": [
	  "echo str_repeat('-=', 10);"
	],
	"description": "str_repeat() function"
  },
  "str_replace": {
	"prefix": "phpstr_replace",
	"body": [
		"$bodytag = str_replace('%body%', 'black', '<body text='%body%'>');",

		"$vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');",
		"$onlyconsonants = str_replace($vowels, ', 'Hello World of PHP');",
		
		"$phrase  = 'You should eat fruits, vegetables, and fiber every day.';",
		"$healthy = array('fruits', 'vegetables', 'fiber');",
	"$yummy   = array('pizza', 'beer', 'ice cream');",
		
		"$newphrase = str_replace($healthy, $yummy, $phrase);",
		
		"$str = str_replace('ll', ', 'good golly miss molly!', $count);",
		"echo $count;"
	],
	"description": "str_replace() function"
  },
  "str_rot13": {
	"prefix": "phpstr_rot13",
	"body": [
	  "https://www.php.net/manual/en/function.str-rot13.php"
	],
	"description": "str_rot13() function"
  },
  "str_shuffle": {
	"prefix": "phpstr_shuffle",
	"body": [
		"$str = 'abcdef';",
		"$shuffled = str_shuffle($str);",
		
		"echo $shuffled;"
	],
	"description": "str_shuffle() function"
  },
  "str_split": {
	"prefix": "phpstr_split",
	"body": [
		"$str = 'Hello Friend';",

		"$arr1 = str_split($str);",
		"$arr2 = str_split($str, 3);",
		
		"print_r($arr1);",
		"print_r($arr2);"
	],
	"description": "str_split() function"
  },
  "str_word_count": {
	"prefix": "phpstr_word_count",
	"body": [
		"$str = 'Hello fri3nd, you'relooking          good today!';",
		
 
" print_r(str_word_count($str, 1));",
 "print_r(str_word_count($str, 2));",
 "print_r(str_word_count($str, 1, 'àáãç3'));",
 
 "echo str_word_count($str);"
	],
	"description": "str_word_count() function"
  },
  "strcasecmp": {
	"prefix": "phpstrcasecmp",
	"body": [
		"$var1 = 'Hello';",
		"$var2 = 'hello';",
		"if (strcasecmp($var1, $var2) == 0) {",
		"echo '$var1 is equal to $var2 in a case-insensitive string comparison';",
		"}"
	],
	"description": "strcasecmp() function"
  },
  "strchr": {
	"prefix": "phpstrchr",
	"body": [
	 "https://www.php.net/manual/en/function.strchr.php"
	],
	"description": "strchr() function"
  },
  "strcmp": {
	"prefix": "phpstrcmp",
	"body": [
		"$var1 = 'Hello';",
		"$var2 = 'hello';",
		"if (strcmp($var1, $var2) !== 0) {",
			"echo '$var1 is not equal to $var2 in a case sensitive string comparison';",
		"}"
	],
	"description": "strcmp() function"
  },
  "strcoll": {
	"prefix": "phpstrcoll",
	"body": [
	  "https://www.php.net/manual/en/function.strcoll.php"
	],
	"description": "strcoll() function"
  },
  "strcspn": {
	"prefix": "phpstrcspn",
	"body": [
		"$a = strcspn('abcd',  'apple');",
		"$b = strcspn('abcd',  'banana');",
		"$c = strcspn('hello', 'l');",
		"$d = strcspn('hello', 'world');",
		"$e = strcspn('abcdhelloabcd', 'abcd', -9);",
		"$f = strcspn('abcdhelloabcd', 'abcd', -9, -5);",
		
		"var_dump($a);",
		"var_dump($b);",
		"var_dump($c);",
		"var_dump($d);",
		"var_dump($e);",
		"var_dump($f);"
	],
	"description": "strcspn() function"
  },
  "strip_tags": {
	"prefix": "phpstrip_tags",
	"body": [
		"$text = '<p>Test paragraph.</p><!-- Comment --> <a href='#fragment'>Other text</a>';",
		"echo strip_tags($text);",
		"echo '\n';",
		
		"echo strip_tags($text, '<p><a>');"
	],
	"description": "strip_tags() function"
  },
  "stripcslashes": {
	"prefix": "phpstripcslashes",
	"body": [
		"var_dump(stripcslashes('I\"d have a coffee.\nNot a problem.') === I'd have a coffee.",
		"Not a problem.'); // true"
	],
	"description": "stripcslashes() function"
  },
  "stripslashes": {
	"prefix": "phpstripslashes",
	"body": [
		"$str = 'Is your name O\"reilly?';",

		"echo stripslashes($str);"
	],
	"description": "stripslashes() function"
  },
  "stripos": {
	"prefix": "phpstripos",
	"body": [
		"$findme    = 'a';",
		"$mystring1 = 'xyz';",
		"$mystring2 = 'ABC';",
		
		"$pos1 = stripos($mystring1, $findme);",
		"$pos2 = stripos($mystring2, $findme);",
		
		
		"if ($pos1 === false) {",
			"echo 'The string '$findme' was not found in the string '$mystring1'';",
		"}",
		
		
		"if ($pos2 !== false) {",
			"echo 'We found '$findme' in '$mystring2' at position $pos2';"
	],
	"description": "stripos() function"
  },
  "stristr": {
	"prefix": "phpstristr",
	"body": [
		"$email = 'USER@EXAMPLE.com';",
		"echo stristr($email, 'e'); // outputs ER@EXAMPLE.com",
		"echo stristr($email, 'e', true); // outputs US"
	],
	"description": "stristr() function"
  },
  "strlen": {
	"prefix": "phpstrlen",
	"body": [
		"$str = 'abcdef';",
		"echo strlen($str); // 6",
		
		"$str = ' ab cd ';",
		"echo strlen($str); // 7"
	],
	"description": "strlen() function"
  },
  "strnatcasecmp": {
	"prefix": "phpstrnatcasecmp",
	"body": [
		"var_dump(strnatcasecmp('Apple', 'Banana'));",
		"var_dump(strnatcasecmp('Banana', 'Apple'));",
		"var_dump(strnatcasecmp('apple', 'Apple'));"
	],
	"description": "strnatcasecmp() function"
  },
  "strnatcmp": {
	"prefix": "phpstrnatcmp",
	"body": [
		"$arr1 = $arr2 = array('img12.png', 'img10.png', 'img2.png', 'img1.png');",
		"echo 'Standard string comparison\n';",
		"usort($arr1, 'strcmp');",
		"print_r($arr1);",
		"echo '\nNatural order string comparison\n';",
		"usort($arr2, 'strnatcmp');",
		"print_r($arr2);"
	],
	"description": "strnatcmp() function"
  },
  "strncasecmp": {
	"prefix": "phpstrncasecmp",
	"body": [
		"$var1 = 'Hello John';",
		"$var2 = 'hello Doe';",
		"if (strncasecmp($var1, $var2, 5) === 0) {",
			"echo 'First 5 characters of $var1 and $var2 are equals in a case-insensitive string comparison';"
	],
	"description": "strncasecmp() function"
  },
  "strncmp": {
	"prefix": "phpstrncmp",
	"body": [
		"$var1 = 'Hello John';",
		"$var2 = 'Hello Doe';",
		"if (strncmp($var1, $var2, 5) === 0) {",
			"echo 'First 5 characters of $var1 and $var2 are equals in a case-sensitive string comparison';"
	],
	"description": "strncmp() function"
  },
  "strpbrk": {
	"prefix": "phpstrpbrk",
	"body": [
		"$text = 'This is a Simple text.';",

		"echo strpbrk($text, 'mi');",
		
		"echo strpbrk($text, 'S');"
	],
	"description": "strpbrk() function"
  },
  "strpos": {
	"prefix": "phpstrpos",
	"body": [
		"$newstring = 'abcdef abcdef';",
		"$pos = strpos($newstring, 'a', 1); // $pos = 7, not 0"
	],
	"description": "strpos() function"
  },
  "strrchr": {
	"prefix": "phpstrrchr",
	"body": [
		"$dir = substr(strrchr($PATH, ':'), 1);",

		"$text = 'Line 1\nLine 2\nLine 3';",
		"$last = substr(strrchr($text, 10), 1 );"
	],
	"description": "strrchr() function"
  },
  "strrev": {
	"prefix": "phpstrrev",
	"body": [
	  "echo strrev('Hello world!'); // outputs '!dlrow olleH'"
	],
	"description": "strrev() function"
  },
  "strripos": {
	"prefix": "phpstrripos",
	"body": [
		"$haystack = 'ababcd';",
		"$needle   = 'aB';",
		
		"$pos      = strripos($haystack, $needle);",
		
		"if ($pos === false) {",
			"echo 'Sorry, we did not find ($needle) in ($haystack)';",
		"} else {",
			"echo 'Congratulations!\n';",
			"echo 'We found the last ($needle) in ($haystack) at position ($pos)';"
	],
	"description": "strripos() function"
  },
  "strrpos": {
	"prefix": "phpstrrpos",
	"body": [
		"$pos = strrpos($mystring, 'b');",
		"if ($pos === false) { // note: three equal signs",
		"}"
	],
	"description": "strrpos() function"
  },
  "strspn": {
	"prefix": "phpstrspn",
	"body": [
		"var_dump(strspn('foo', 'o'));",

		"var_dump(strspn('foo', 'o', 1, 2));",
		
		"var_dump(strspn('foo', 'o', 1, 1));"
	],
	"description": "strspn() function"
  },
  "strstr": {
	"prefix": "phpstrstr",
	"body": [
		"$email  = 'name@example.com';",
		"$domain = strstr($email, '@');",
		"echo $domain;", 
		
		"$user = strstr($email, '@', true);",
		"echo $user; // prints name"
	],
	"description": "strstr() function"
  },
  "strtok": {
	"prefix": "phpstrtok",
	"body": [
		"$first_token  = strtok('/something', '/');",
		"$second_token = strtok('/');",
		"var_dump($first_token, $second_token);"
	],
	"description": "strtok() function"
  },
  "strtolower": {
	"prefix": "phpstrtolower",
	"body": [
		"$str = 'Mary Had A Little Lamb and She LOVED It So';",
		"$str = strtolower($str);"
	],
	"description": "strtolower() function"
  },
  "strtoupper": {
	"prefix": "phpstrtoupper",
	"body": [
		"$str = 'Mary Had A Little Lamb and She LOVED It So';",
		"$str = strtoupper($str);",
		"echo $str;"
	],
	"description": "strtoupper() function"
  },
  "strtr": {
	"prefix": "phpstrtr",
	"body": [
	  "$addr = strtr($addr, 'äåö', 'aao');"
	],
	"description": "strtr() function"
  },
  "substr": {
	"prefix": "phpsubstr",
	"body": [
		"echo substr_compare('abcde', 'bc', 1, 2); // 0",
		"echo substr_compare('abcde', 'de', -2, 2); // 0",
		"echo substr_compare('abcde', 'bcg', 1, 2); // 0",
		"echo substr_compare('abcde', 'BC', 1, 2, true); // 0",
		"echo substr_compare('abcde', 'bc', 1, 3); // 1",
		"echo substr_compare('abcde', 'cd', 1, 2); // -1",
		"echo substr_compare('abcde', 'abc', 5, 1); // warning"
	],
	"description": "substr() function"
  },
  "substr_compare": {
	"prefix": "phpsubstr_compare",
	"body": [
		"echo substr_compare('abcde', 'bc', 1, 2); // 0",
		"echo substr_compare('abcde', 'de', -2, 2); // 0",
		"echo substr_compare('abcde', 'bcg', 1, 2); // 0",
		"echo substr_compare('abcde', 'BC', 1, 2, true); // 0",
		"echo substr_compare('abcde', 'bc', 1, 3); // 1",
		"echo substr_compare('abcde', 'cd', 1, 2); // -1",
		"echo substr_compare('abcde', 'abc', 5, 1); // warning"
	],
	"description": "substr_compare() function"
  },
  "substr_count": {
	"prefix": "phpsubstr_count",
	"body": [
		"$text = 'This is a test';",
		"echo strlen($text); // 14",
		
		"echo substr_count($text, 'is'); // 2",
		
		"echo substr_count($text, 'is', 3);",
		
		"echo substr_count($text, 'is', 3, 3);",
		
		"echo substr_count($text, 'is', 5, 10);",
		
		
		"$text2 = 'gcdgcdgcd';",
		"echo substr_count($text2, 'gcdgcd');"
	],
	"description": "substr_count() function"
  },
  "substr_replace": {
	"prefix": "phpsubstr_replace",
	"body": [
		"$input = array('A: XXX', 'B: XXX', 'C: XXX');",

		"echo implode('; ', substr_replace($input, 'YYY', 3, 3)).'\n';",
		
		"$replace = array('AAA', 'BBB', 'CCC');",
		"echo implode('; ', substr_replace($input, $replace, 3, 3)).'\n';",
		
		"$length = array(1, 2, 3);",
		"echo implode('; ', substr_replace($input, $replace, 3, $length)).'\n';"
	],
	"description": "substr_replace() function"
  },
  "trim": {
	"prefix": "phptrim",
	"body": [
		"$text   = '\t\tThese are a few words :) ...  ';",
		"$binary = '\"x09Example string\"x0A';",
		"$hello  = 'Hello World';",
		"var_dump($text, $binary, $hello);",
		
		"print '\n';",
		
		"$trimmed = trim($text);",
		"var_dump($trimmed);",
		
		"$trimmed = trim($text, ' \t.');",
		"var_dump($trimmed);",
		
		"$trimmed = trim($hello, 'Hdle');",
		"var_dump($trimmed);",
		
		"$trimmed = trim($hello, 'HdWr');",
		"var_dump($trimmed);",
		
	
		"$clean = trim($binary, '\"x00..\"x1F');",
		"var_dump($clean);"
	],
	"description": "trim() function"
  },
  "ucfirst": {
	"prefix": "phpucfirst",
	"body": [
		"$foo = 'hello world!';",
		"$foo = ucfirst($foo);   "  ,        
		
		"$bar = 'HELLO WORLD!';",
		"$bar = ucfirst($bar);    "    ,     
		"$bar = ucfirst(strtolower($bar));" 
	],
	"description": "ucfirst() function"
  },
  "ucwords": {
	"prefix": "phpucwords",
	"body": [
		"$foo = 'hello|world!';",
		"$bar = ucwords($foo); "    ,        
		
		"$baz = ucwords($foo, '|');  "      
	],
	"description": "ucwords() function"
  },
  "vfprintf": {
	"prefix": "phpvfprintf",
	"body": [
		"if (!($fp = fopen('date.txt', 'w')))",
		"return;",
	
	"vfprintf($fp, '%04d-%02d-%02d', array($year, $month, $day));"
	],
	"description": "vfprintf() function"
  },
  "vprintf": {
	"prefix": "phpvprintf",
	"body": [
	 "https://www.php.net/manual/en/function.vprintf.php"
	],
	"description": "vprintf() function"
  },
  "vsprintf": {
	"prefix": "phpvsprintf",
	"body": [
	  "print vsprintf('%04d-%02d-%02d', explode('-', '1988-8-1'));"
	],
	"description": "vsprintf() function"
  },
  "wordwrap": {
	"prefix": "phpwordwrap",
	"body": [
		"$text = 'A very long woooooooooooord.';",
		"$newtext = wordwrap($text, 8, '\n', true);",
		
		"echo '$newtext\n';"
	],
	"description": "wordwrap() function"
  },
  
  
  
  "String Functions": {
    "prefix": "php_string_functions",
    "body": [
      "addcslashes()",
      "addslashes()",
      "bin2hex()",
      "chop()",
      "chr()",
      "chunk_split()",
      "convert_cyr_string()",
      "convert_uudecode()",
      "convert_uuencode()",
      "count_chars()",
      "crc32()",
      "crypt()",
      "echo()",
      "explode()",
      "fprintf()",
      "get_html_translation_table()",
      "hebrev()",
      "hebrevc()",
      "html_entity_decode()",
      "htmlentities()",
      "htmlspecialchars_decode()",
      "htmlspecialchars()",
      "implode()",
      "join()",
      "levenshtein()",
      "localeconv()",
      "ltrim()",
      "md5()",
      "md5_file()",
      "metaphone()",
      "money_format()",
      "nl_langinfo()",
      "nl2br()",
      "number_format()",
      "ord()",
      "parse_str()",
      "print()",
      "printf()",
      "quoted_printable_decode()",
      "quotemeta()",
      "rtrim()",
      "setlocale()",
      "sha1()",
      "sha1_file()",
      "similar_text()",
      "soundex()",
      "sprintf()",
      "sscanf()",
      "str_ireplace()",
      "str_pad()",
      "str_repeat()",
      "str_replace()",
      "str_rot13()",
      "str_shuffle()",
      "str_split()",
      "str_word_count()",
      "strcasecmp()",
      "strchr()",
      "strcmp()",
      "strcoll()",
      "strcspn()",
      "strip_tags()",
      "stripcslashes()",
      "stripslashes()",
      "stripos()",
      "stristr()",
      "strlen()",
      "strnatcasecmp()",
      "strnatcmp()",
      "strncasecmp()",
      "strncmp()",
      "strpbrk()",
      "strpos()",
      "strrchr()",
      "strrev()",
      "strripos()",
      "strrpos()",
      "strspn()",
      "strstr()",
      "strtok()",
      "strtolower()",
      "strtoupper()",
      "strtr()",
      "substr()",
      "substr_compare()",
      "substr_count()",
      "substr_replace()",
      "trim()",
      "ucfirst()",
      "ucwords()",
      "vfprintf()",
      "vprintf()",
      "vsprintf()",
      "wordwrap()"
    ],
    "description": "List of String functions"
  },
  "String Constants": {
    "prefix": "php_string_constants",
    "body": [
      "CRYPT_SALT_LENGTH",
      "CRYPT_STD_DES",
      "CRYPT_EXT_DES",
      "CRYPT_MD5",
      "CRYPT_BLOWFISH",
      "HTML_SPECIALCHARS",
      "HTML_ENTITIES",
      "ENT_COMPAT",
      "ENT_QUOTES",
      "ENT_NOQUOTES",
      "CHAR_MAX",
      "LC_CTYPE",
      "LC_NUMERIC",
      "LC_TIME",
      "LC_COLLATE",
      "LC_MONETARY",
      "LC_ALL",
      "LC_MESSAGES",
      "STR_PAD_LEFT",
      "STR_PAD_RIGHT",
      "STR_PAD_BOTH"
    ],
    "description": "List of String constants"
  },
  "Zip Functions": {
    "prefix": "php_zip_functions",
    "body": [
      "zip_close(zip)",
      "zip_entry_close(zip_entry)",
      "zip_entry_compressedsize(zip_entry)",
      "zip_entry_compressionmethod(zip_entry)",
      "zip_entry_filesize(zip_entry)",
      "zip_entry_name(zip_entry)",
      "zip_entry_open(zip, zip_entry [, mode])",
      "zip_entry_read(zip_entry [, length])",
      "zip_open(filename)",
      "zip_read(zip)"
    ],
    "description": "List of Zip functions"
  },
  "zip_close": {
	"prefix": "phpzip_close",
	"body": [
	 "https://www.php.net/manual/en/function.zip-close.php"
	],
	"description": "zip_close() function"
  },
  "zip_entry_close": {
	"prefix": "phpzip_entry_close",
	"body": [
	 "https://www.php.net/manual/en/function.zip-entry-close.php"
	],
	"description": "zip_entry_close() function"
  },
  "zip_entry_compressedsize": {
	"prefix": "phpzip_entry_compressedsize",
	"body": [
	  "https://www.php.net/manual/en/function.zip-entry-compressedsize.php"
	],
	"description": "zip_entry_compressedsize() function"
  },
  "zip_entry_compressionmethod": {
	"prefix": "phpzip_entry_compressionmethod",
	"body": [
	  "https://www.php.net/manual/en/function.zip-entry-compressionmethod.php"
	],
	"description": "zip_entry_compressionmethod() function"
  },
  "zip_entry_filesize": {
	"prefix": "phpzip_entry_filesize",
	"body": [
	 "https://www.php.net/manual/en/function.zip-entry-filesize.php"
	],
	"description": "zip_entry_filesize() function"
  },
  "zip_entry_name": {
	"prefix": "phpzip_entry_name",
	"body": [
	  "https://www.php.net/manual/en/function.zip-entry-name.php"
	],
	"description": "zip_entry_name() function"
  },
  "zip_entry_open": {
	"prefix": "phpzip_entry_open",
	"body": [
	  "https://www.php.net/manual/en/function.zip-entry-open.php"
	],
	"description": "zip_entry_open() function"
  },
  "zip_entry_read": {
	"prefix": "phpzip_entry_read",
	"body": [
	  "https://www.php.net/manual/en/function.zip-entry-read.php"
	],
	"description": "zip_entry_read() function"
  },
  "zip_open": {
	"prefix": "phpzip_open",
	"body": [
	  "https://www.php.net/manual/en/function.zip-open.php"
	],
	"description": "zip_open() function"
  },
  "zip_read": {
	"prefix": "phpzip_read",
	"body": [
	  "https://www.php.net/manual/en/function.zip-read.php"
	],
	"description": "zip_read() function"
  },
  
  "Variable Handling Functions": {
    "prefix": "php_variable_functions",
    "body": [
      "boolval(var)",
      "debug_zval_dump(variable [, ...])",
      "doubleval(var)",
      "empty(var)",
      "floatval(var)",
      "get_defined_vars()",
      "get_resource_type(handle)",
      "gettype(var)",
      "import_request_variables(types, prefix)",
      "intval(var [, base])",
      "is_array(var)",
      "is_bool(var)",
      "is_callable(var, syntax_only [, callable_name])",
      "is_double(var)",
      "is_float(var)",
      "is_int(var)",
      "is_integer(var)",
      "is_long(var)",
      "is_null(var)",
      "is_numeric(var)",
      "is_object(var)",
      "is_real(var)",
      "is_resource(var)",
      "is_scalar(var)",
      "is_string(var)",
      "isset(var [...])",
      "print_r(expression [ return])",
      "serialize(value)",
      "settype(var, type)",
      "strval(var)",
      "unserialize(str [, options])",
      "unset(var [ ...])",
      "var_dump(var [ ...])",
      "var_export(var [return])"
    ],
    "description": "List of Variable Handling functions"
  },
  "boolval": {
	"prefix": "phpboolval",
	"body": [
		"echo '0:        '.(boolval(0) ? 'true' : 'false').'\n';",
		"echo '42:       '.(boolval(42) ? 'true' : 'false').'\n';",
		"echo '0.0:      '.(boolval(0.0) ? 'true' : 'false').'\n';",
		"echo '4.2:      '.(boolval(4.2) ? 'true' : 'false').'\n';",
		"echo '':       '.(boolval(') ? 'true' : 'false').'\n';",
		"echo ''string': '.(boolval('string') ? 'true' : 'false').'\n';",
		"echo ''0':      '.(boolval('0') ? 'true' : 'false').'\n';",
		"echo ''1':      '.(boolval('1') ? 'true' : 'false').'\n';",
		"echo '[1, 2]:   '.(boolval([1, 2]) ? 'true' : 'false').'\n';",
		"echo '[]:       '.(boolval([]) ? 'true' : 'false').'\n';",
		"echo 'stdClass: '.(boolval(new stdClass) ? 'true' : 'false').'\n';"
	],
	"description": "boolval() function"
  },
  "debug_zval_dump": {
	"prefix": "phpdebug_zval_dump",
	"body": [
		"$var1 = 'Hello';",
		"$var1 .= ' World';",
		"$var2 = $var1;",
		
		"debug_zval_dump($var1);"
	],
	"description": "debug_zval_dump() function"
  },
  "doubleval": {
	"prefix": "phpdoubleval",
	"body": [
	  "https://www.php.net/manual/en/function.doubleval.php"
	],
	"description": "doubleval() function"
  },
  "empty": {
	"prefix": "phpempty",
	"body": [
		"$var = 0;",

		"if (empty($var)) {",
			"echo '$var is either 0, empty, or not set at all';",
		"}",
		
		"if (isset($var)) {",
			"echo '$var is set even though it is empty';",
		"}"
	],
	"description": "empty() function"
  },
  "floatval": {
	"prefix": "phpfloatval",
	"body": [
		"$var = 'The122.34343';",
		"$float_value_of_var = floatval($var);",
		"echo $float_value_of_var; // 0"
	],
	"description": "floatval() function"
  },
  "get_defined_vars": {
	"prefix": "phpget_defined_vars",
	"body": [
		"$b = array(1, 1, 2, 3, 5, 8);",

		"$arr = get_defined_vars();",
		
		"// print $b",
		"print_r($arr['b']);",
		
		
		"echo $arr['_'];",
		
	"print_r($arr['argv']);",
		
		"print_r($arr['_SERVER']);",
		
		"print_r(array_keys(get_defined_vars()));"
	],
	"description": "get_defined_vars() function"
  },
  "get_resource_type": {
	"prefix": "phpget_resource_type",
	"body": [
		"$fp = fopen('foo', 'w');",
		"echo get_resource_type($fp) . '\n';",
		
		"$c = curl_init();",
		"echo get_resource_type($c) . '\n';"
	],
	"description": "get_resource_type() function"
  },
  "gettype": {
	"prefix": "phpgettype",
	"body": [
		"$data = array(1, 1., NULL, new stdClass, 'foo');",

		"foreach ($data as $value) {",
			"echo gettype($value), '\n';"
	],
	"description": "gettype() function"
  },
  "import_request_variables": {
	"prefix": "phpimport_request_variables",
	"body": [
	  "https://www.php.net/manual/en/function.import-request-variables.php"
	],
	"description": "import_request_variables() function"
  },
  "intval": {
	"prefix": "phpintval",
	"body": [
		"echo intval(42);   "    ,               
		"echo intval(4.2);   "  ,                
		"echo intval('42'); "   ,                
		"echo intval('+42');"  ,                 
		"echo intval('-42'); ",                  
		"echo intval(042); "  ,                  
		"echo intval('042');",                   
		"echo intval(1e10);   "  ,              
		"echo intval('1e10');" ,                
		"echo intval(0x1A);"    ,                
		"echo intval('0x1A');  "  ,              
		"echo intval('0x1A', 0);" ,              
		"echo intval(42000000);"  ,              
		"echo intval(420000000000000000000);",   
		"echo intval('420000000000000000000');", 
		"echo intval(42, 8);   "    ,           
		"echo intval('42', 8);  "  ,             
		"echo intval(array()); " ,               
		"echo intval(array('foo', 'bar'));",     
		"echo intval(false);" ,                
		"echo intval(true);"      
	],
	"description": "intval() function"
  },
  "is_array": {
	"prefix": "phpis_array",
	"body": [
		"$yes = array('this', 'is', 'an array');",

		"echo is_array($yes) ? 'Array' : 'not an Array';",
		"echo '\n';",
		
		"$no = 'this is a string';",
		
		"echo is_array($no) ? 'Array' : 'not an Array';"
	],
	"description": "is_array() function"
  },
  "is_bool": {
	"prefix": "phpis_bool",
	"body": [
		"$a = false;",
		"$b = 0;",
		
		"// Since $a is a boolean, it will return true",
		"if (is_bool($a) === true) {",
			"echo 'Yes, this is a boolean';",
		"}",
		
		
		"if (is_bool($b) === false) {",
			"echo 'No, this is not a boolean';"
	],
	"description": "is_bool() function"
  },
  "is_callable": {
	"prefix": "phpis_callable",
	"body": [
		"class Foo",
		"{",
			"public function __construct() {}",
			"public function foo() {}",
		"}",
		
		"var_dump(",
			"is_callable(array('Foo', '__construct')),",
			"is_callable(array('Foo', 'foo'))"
	],
	"description": "is_callable() function"
  },
  "is_double": {
	"prefix": "phpis_double",
	"body": [
	  "https://www.php.net/manual/en/function.is-double.php"
	],
	"description": "is_double() function"
  },
  "is_float": {
	"prefix": "phpis_float",
	"body": [
		"var_dump(is_float(27.25));",
		"var_dump(is_float('abc'));",
		"var_dump(is_float(23));",
		"var_dump(is_float(23.5));",
		"var_dump(is_float(1e7)); ",
		"var_dump(is_float(true));"
	],
	"description": "is_float() function"
  },
  "is_int": {
	"prefix": "phpis_int",
	"body": [
		"$values = array(23, '23', 23.5, '23.5', null, true, false);",
		"foreach ($values as $value) {",
			"echo 'is_int(';",
			"var_export($value);",
			"echo ') = ';",
			"var_dump(is_int($value));"
	],
	"description": "is_int() function"
  },
  "is_integer": {
	"prefix": "phpis_integer",
	"body": [
	  "https://www.php.net/manual/en/function.is-integer.php"
	],
	"description": "is_integer() function"
  },
  "is_long": {
	"prefix": "phpis_long",
	"body": [
	  "https://www.php.net/manual/en/function.is-long.php"
	],
	"description": "is_long() function"
  },
  "is_null": {
	"prefix": "phpis_null",
	"body": [
		"error_reporting(E_ALL);",

		"$foo = NULL;",
		"var_dump(is_null($inexistent), is_null($foo));"
	],
	"description": "is_null() function"
  },
  "is_numeric": {
	"prefix": "phpis_numeric",
	"body": [
		"$tests = [",
			"' 42',",
			"'42 '",
			"'\"u{A0}9001', // non-breaking space",
			"'9001\"u{A0}', // non-breaking space",
		"];",
		
		"foreach ($tests as $element) {",
			"if (is_numeric($element)) {",
				"echo var_export($element, true) . ' is numeric', PHP_EOL;",
			"} else {",
				"echo var_export($element, true) . ' is NOT numeric', PHP_EOL;"
	],
	"description": "is_numeric() function"
  },
  "is_object": {
	"prefix": "is_object",
	"body": [
		"function get_students($obj)",
		"{",
			"if (!is_object($obj)) {",
				"return false;",
			"}",
		
			"return $obj->students;",
		"}",
		
		
		"$obj = new stdClass();",
		"$obj->students = array('Kalle', 'Ross', 'Felipe');",
		
		"var_dump(get_students(null));",
		"var_dump(get_students($obj));"
	],
	"description": "is_object() function"
  },
  "is_real": {
	"prefix": "phpis_real",
	"body": [
	  "https://www.php.net/manual/en/function.is-real.php"
	],
	"description": "is_real() function"
  },
  "is_resource": {
	"prefix": "phpis_resource",
	"body": [
		"$handle = fopen('php://stdout', 'w');",
		"if (is_resource($handle)) {",
			"echo '$handle is a resource';"
	],
	"description": "is_resource() function"
  },
  "is_scalar": {
	"prefix": "phpis_scalar",
	"body": [
		"function show_var($var) ",
		"{",
			"if (is_scalar($var)) {",
				"echo $var;",
			"} else {",
				"var_dump($var);",
			"}",
		"}",
		"$pi = 3.1416;",
		"$proteins = array('hemoglobin', 'cytochrome c oxidase', 'ferredoxin');",
		
		"show_var($pi);",
		"show_var($proteins)"
	],
	"description": "is_scalar() function"
  },
  "is_string": {
	"prefix": "phpis_string",
	"body": [
		"$values = array(false, true, null, 'abc', '23', 23, '23.5', 23.5, '', ' ', '0', 0);",
		"foreach ($values as $value) {",
			"echo 'is_string(';",
			"var_export($value);",
			"echo '') = '';",
			"echo var_dump(is_string($value));"
	],
	"description": "is_string() function"
  },
  "isset": {
	"prefix": "phpisset",
	"body": [
		"$expected_array_got_string = 'somestring';",
		"var_dump(isset($expected_array_got_string['some_key']));",
		"var_dump(isset($expected_array_got_string[0]));",
		"var_dump(isset($expected_array_got_string['0']));",
		"var_dump(isset($expected_array_got_string[0.5]));",
		"var_dump(isset($expected_array_got_string['0.5']));",
		"var_dump(isset($expected_array_got_string['0 Mostel']));"
	],
	"description": "isset() function"
  },
  "print_r": {
	"prefix": "phpprint_r",
	"body": [
		"$a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z'));",
		"print_r ($a);"
	],
	"description": "print_r() function"
  },
  "serialize": {
	"prefix": "phpserialize",
	"body": [
		"$conn = odbc_connect('webdb', 'php', 'chicken');",
		"$stmt = odbc_prepare($conn,",
			  "'UPDATE sessions SET data = ? WHERE id = ?');",
		"$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);",
		"if (!odbc_execute($stmt, $sqldata)) {",
			"$stmt = odbc_prepare($conn,",
			 "'INSERT INTO sessions (id, data) VALUES(?, ?)');",
			"if (!odbc_execute($stmt, array_reverse($sqldata))) {"
	],
	"description": "serialize() function"
  },
  "settype": {
	"prefix": "phpsettype",
	"body": [
		"$foo = '5bar'; // string",
		"$bar = true;   // boolean",
		
		"settype($foo, 'integer'); // $foo is now 5   (integer)",
		"settype($bar, 'string');  // $bar is now '1' (string)"
	],
	"description": "settype() function"
  },
  "strval": {
	"prefix": "phpstrval",
	"body": [
		"class StrValTest",
		"{",
			"public function __toString()",
			"{",
				"return __CLASS__;",
			"}",
		"}",
		
		"// Prints 'StrValTest'",
		"echo strval(new StrValTest);"
	],
	"description": "strval() function"
  },
  "unserialize": {
	"prefix": "phpunserialize",
	"body": [
		"$serialized_object='O:1:'a':1:{s:5:'value';s:3:'100';}';",

		"ini_set('unserialize_callback_func', 'mycallback');", 
		
		"function mycallback($classname)" 
	],
	"description": "unserialize() function"
  },
  "unset": {
	"prefix": "phpunset",
	"body": [
		"function foo() ",
		"{",
			"unset($GLOBALS['bar']);",
		"}",
		
		"$bar = 'something';",
		"foo();"
	],
	"description": "unset() function"
  },
  "var_dump": {
	"prefix": "phpvar_dump",
	"body": [
		"$a = array(1, 2, array('a', 'b', 'c'));",
		"var_dump($a);"
	],
	"description": "var_dump() function"
  },
  "var_export": {
	"prefix": "phpvar_export",
	"body": [
		"$a = array (1, 2, array ('a', 'b', 'c'));",
		"var_export($a);"
	],
	"description": "var_export() function"
  },
  
  "Filter Functions and Constants": {
    "prefix": "php_filter_functions",
    "body": [
      "filter_has_var(type, variable_name)",
      "filter_id(filtername)",
      "filter_input(type, variable_name [ filter [ options]])",
      "filter_input_array(type [ definition [ add_empty]])",
      "filter_list()",
      "filter_var_array(data, definition [, add_empty])",
      "filter_var(variable [ filter [ options]])",
      "",
      "Filters:",
      "FILTER_CALLBACK",
      "FILTER_SANITIZE_STRING",
      "FILTER_SANITIZE_STRIPPED",
      "FILTER_SANITIZE_ENCODED",
      "FILTER_SANITIZE_SPECIAL_CHARS",
      "FILTER_SANITIZE_EMAIL",
      "FILTER_SANITIZE_URL",
      "FILTER_SANITIZE_NUMBER_INT",
      "filter_sanitize_number_float",
      "filter_sanitize_magic_quotes",
      "FILTER_UNSAFE_RAW",
      "FILTER_VALIDATE_INT",
      "FILTER_VALIDATE_BOOLEAN",
      "FILTER_VALIDATE_FLOAT",
      "FILTER_VALIDATE_REGEXP",
      "FILTER_VALIDATE_URL",
      "FILTER_VALIDATE_EMAIL",
      "FILTER_VALIDATE_IP"
    ],
    "description": "List of Filter functions and constants"
  },
  "filter_has_var": {
	"prefix": "phpfilter_has_var",
	"body": [
	 "https://www.php.net/manual/en/function.filter-has-var.php"
	],
	"description": "filter_has_var() function"
  },
  "filter_id": {
	"prefix": "phpfilter_id",
	"body": [
	 "https://www.php.net/manual/en/function.filter-id.php"
	],
	"description": "filter_id() function"
  },
  "filter_input": {
	"prefix": "phpfilter_input",
	"body": [
		"$search_html = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_SPECIAL_CHARS);",
		"$search_url = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_ENCODED);",
		"echo 'You have searched for $search_html.\n';",
		"echo '<a href='?search=$search_url'>Search again.</a>';"
	],
	"description": "filter_input() function"
  },
  "filter_input_array": {
	"prefix": "phpfilter_input_array",
	"body": [
		"$args = array(",
		"'product_id'   => FILTER_SANITIZE_ENCODED,",
		"'component'    => array('filter'    => FILTER_VALIDATE_INT,",
								"'flags'     => FILTER_REQUIRE_ARRAY, ",
								"'options'   => array('min_range' => 1, 'max_range' => 10)",
							   "),",
		"'version'      => FILTER_SANITIZE_ENCODED,",
		"'doesnotexist' => FILTER_VALIDATE_INT,",
		"'testscalar'   => array(",
								"'filter' => FILTER_VALIDATE_INT,",
								"'flags'  => FILTER_REQUIRE_SCALAR,",
							   "),",
		"'testarray'    => array(",
								"'filter' => FILTER_VALIDATE_INT,",
								"'flags'  => FILTER_REQUIRE_ARRAY,",
							  " )",
	
	");",
	
	"$myinputs = filter_input_array(INPUT_POST, $args);",
	
	"var_dump($myinputs);",
	"echo '\n';"
	],
	"description": "filter_input_array() function"
  },
  "filter_list": {
	"prefix": "phpfilter_list",
	"body": [
	  "print_r(filter_list());"
	],
	"description": "filter_list() function"
  },
  "filter_var_array": {
	"prefix": "phpfilter_var_array",
	"body": [
		"$data = array(",
		"'product_id'    => 'libgd<script>',",
		"'component'     => '10',",
		"'versions'      => '2.0.33',",
		"'testscalar'    => array('2', '23', '10', '12'),",
		"'testarray'     => '2',",
	");",
	
	"$args = array(",
		"'product_id'   => FILTER_SANITIZE_ENCODED,",
		"'component'    => array('filter'    => FILTER_VALIDATE_INT,",
								"'flags'     => FILTER_FORCE_ARRAY, ",
								"'options'   => array('min_range' => 1, 'max_range' => 10)",
							  " ),",
		"'versions'     => FILTER_SANITIZE_ENCODED,",
		"'doesnotexist' => FILTER_VALIDATE_INT,",
		"'testscalar'   => array(",
								"'filter' => FILTER_VALIDATE_INT,",
								"'flags'  => FILTER_REQUIRE_SCALAR,",
							  " ),",
		"'testarray'    => array(",
								"'filter' => FILTER_VALIDATE_INT,",
								"'flags'  => FILTER_FORCE_ARRAY,",
							  " )",
	
	");",
	
	"$myinputs = filter_var_array($data, $args);",
	
"var_dump($myinputs);",
	"echo '\n';"
	],
	"description": "filter_var_array() function"
  },
  "filter_var": {
	"prefix": "phpfilter_var",
	"body": [
		"var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));",
		"var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));"
	],
	"description": "filter_var() function"
  },
  "FILTER_CALLBACK": {
	"prefix": "phpFILTER_CALLBACK",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-callback"
	],
	"description": "FILTER_CALLBACK constant"
  },
  "FILTER_SANITIZE_STRING": {
	"prefix": "phpFILTER_SANITIZE_STRING",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-string"
	],
	"description": "FILTER_SANITIZE_STRING constant"
  },
  "FILTER_SANITIZE_STRIPPED": {
	"prefix": "phpFILTER_SANITIZE_STRIPPED",
	"body": [
	  "https://nodejs.org/api/crypto.html#crypto_class_cipher"
	],
	"description": "FILTER_SANITIZE_STRIPPED constant"
  },
  "FILTER_SANITIZE_ENCODED": {
	"prefix": "phpFILTER_SANITIZE_ENCODED",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-encoded"
	],
	"description": "FILTER_SANITIZE_ENCODED constant"
  },
  "FILTER_SANITIZE_SPECIAL_CHARS": {
	"prefix": "phpFILTER_SANITIZE_SPECIAL_CHARS",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-special-chars"
	],
	"description": "FILTER_SANITIZE_SPECIAL_CHARS constant"
  },
  "FILTER_SANITIZE_EMAIL": {
	"prefix": "phpFILTER_SANITIZE_EMAIL",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-email"
	],
	"description": "FILTER_SANITIZE_EMAIL constant"
  },
  "FILTER_SANITIZE_URL": {
	"prefix": "phpFILTER_SANITIZE_URL",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-url"
	],
	"description": "FILTER_SANITIZE_URL constant"
  },
  "FILTER_SANITIZE_NUMBER_INT": {
	"prefix": "phpFILTER_SANITIZE_NUMBER_INT",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-number-int"
	],
	"description": "FILTER_SANITIZE_NUMBER_INT constant"
  },
  "FILTER_SANITIZE_NUMBER_FLOAT": {
	"prefix": "phpFILTER_SANITIZE_NUMBER_FLOAT",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-number-float"
	],
	"description": "FILTER_SANITIZE_NUMBER_FLOAT constant"
  },
  "FILTER_SANITIZE_MAGIC_QUOTES": {
	"prefix": "phpFILTER_SANITIZE_MAGIC_QUOTES",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-sanitize-magic-quotes"
	],
	"description": "FILTER_SANITIZE_MAGIC_QUOTES constant"
  },
  "FILTER_UNSAFE_RAW": {
	"prefix": "phpFILTER_UNSAFE_RAW",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-unsafe-raw"
	],
	"description": "FILTER_UNSAFE_RAW constant"
  },
  "FILTER_VALIDATE_INT": {
	"prefix": "phpFILTER_VALIDATE_INT",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-int"
	],
	"description": "FILTER_VALIDATE_INT constant"
  },
  "FILTER_VALIDATE_BOOLEAN": {
	"prefix": "phpFILTER_VALIDATE_BOOLEAN",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-boolean"
	],
	"description": "FILTER_VALIDATE_BOOLEAN constant"
  },
  "FILTER_VALIDATE_FLOAT": {
	"prefix": "phpFILTER_VALIDATE_FLOAT",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-float"
	],
	"description": "FILTER_VALIDATE_FLOAT constant"
  },
  "FILTER_VALIDATE_REGEXP": {
	"prefix": "phpFILTER_VALIDATE_REGEXP",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-regexp"
	],
	"description": "FILTER_VALIDATE_REGEXP constant"
  },
  "FILTER_VALIDATE_URL": {
	"prefix": "phpFILTER_VALIDATE_URL",
	"body": [
	  "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-url"
	],
	"description": "FILTER_VALIDATE_URL constant"
  },
  "FILTER_VALIDATE_EMAIL": {
	"prefix": "phpFILTER_VALIDATE_EMAIL",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-email"
	],
	"description": "FILTER_VALIDATE_EMAIL constant"
  },
  "FILTER_VALIDATE_IP": {
	"prefix": "phpFILTER_VALIDATE_IP",
	"body": [
	 "https://www.php.net/manual/en/filter.constants.php#constant.filter-validate-ip"
	],
	"description": "FILTER_VALIDATE_IP constant"
  },
  
  "FTP Functions and Constants": {
    "prefix": "php_ftp_functions",
    "body": [
      "ftp_alloc(ftp_stream, filesize [, &result])",
      "ftp_cdup(ftp_stream)",
      "ftp_chdir(ftp_stream, directory)",
      "ftp_chmod(ftp_stream, mode, filename)",
      "ftp_close(ftp_stream)",
      "ftp_connect(host [, port [, timeout]])",
      "ftp_delete(ftp_stream, path)",
      "ftp_exec(ftp_stream, command)",
      "ftp_fget(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_fput(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_get_option(ftp_stream, option)",
      "ftp_get(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_login(ftp_stream, username, password)",
      "ftp_mdtm(ftp_stream, remote_file)",
      "ftp_mkdir(ftp_stream, directory)",
      "ftp_nb_continue(ftp_stream)",
      "ftp_nb_fget(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_nb_fput(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_nb_get(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_nb_put(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_nlist(ftp_stream, directory)",
      "ftp_pasv(ftp_stream, pasv)",
      "ftp_put(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_pwd(ftp_stream)",
      "ftp_quit(ftp_stream)",
      "ftp_raw(ftp_stream, command)",
      "ftp_rawlist(ftp_stream, directory [, recursive])",
      "ftp_rename(ftp_stream, oldname, newname)",
      "ftp_rmdir(ftp_stream, directory)",
      "ftp_set_option(ftp_stream, option, value)",
      "ftp_site(ftp_stream, command)",
      "ftp_size(ftp_stream, remote_file)",
      "ftp_ssl_connect(host [ port [ timeout]])",
      "ftp_systype(ftp_stream)"
    ],
    "description": "List of FTP functions and constants"
  },
  "ftp_alloc": {
	"prefix": "phpftp_alloc",
	"body": [
		"$file = '/home/user/myfile';",

		"// connect to the server",
		"$ftp = ftp_connect('ftp.example.com');",
		"$login_result = ftp_login($ftp, 'anonymous', 'user@example.com');",
		
		"if (ftp_alloc($ftp, filesize($file), $result)) {",
		  "echo 'Space successfully allocated on server.  Sending $file.\n';",
		  "ftp_put($ftp, '/incoming/myfile', $file, FTP_BINARY);",
		"} else {",
		  "echo 'Unable to allocate space on server.  Server said: $result\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_alloc() function"
  },
  "ftp_cdup": {
	"prefix": "phpftp_cdup",
	"body": [
		"$ftp = ftp_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"ftp_chdir($ftp, 'html');",
		
		"echo ftp_pwd($ftp); // /html ",
		
		"if (ftp_cdup($ftp)) { ",
		  "echo 'cdup successful\n';",
		"} else {",
		 " echo 'cdup not successful\n';",
		"}",
		
		"echo ftp_pwd($ftp); // /",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_cdup() function"
  },
  "ftp_chdir": {
	"prefix": "phpftp_chdir",
	"body": [
		"$ftp = ftp_connect($ftp_server); ",

		"// login with username and password",
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);" ,
		
		"// check connection",
		"if ((!$ftp) || (!$login_result)) {",
			"die('FTP connection has failed !');",
		"}",
		
		"echo 'Current directory: ' . ftp_pwd($ftp) . '\n';",
		
		"if (ftp_chdir($ftp, 'somedir')) {",
			"echo 'Current directory is now: ' . ftp_pwd($ftp) . '\n';",
		"} else { ",
			"echo 'Couldn't change directory\n';",
		"}",
		
		"// close the connection",
		"ftp_close($ftp);"
	],
	"description": "ftp_chdir() function"
  },
  "ftp_chmod": {
	"prefix": "phpftp_chmod",
	"body": [
		"$file = 'public_html/index.php';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_chmod($ftp, 0644, $file) !== false) {",
		 "echo '$file chmoded successfully to 644\n';",
		"} else {",
		" echo 'could not chmod $file\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_chmod() function"
  },
  "ftp_close": {
	"prefix": "phpftp_close",
	"body": [
		"$ftp = ftp_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"echo ftp_pwd($ftp);",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_close() function"
  },
  "ftp_connect": {
	"prefix": "phpftp_connect",
	"body": [
		"$ftp_server = 'ftp.example.com';",

		"$ftp = ftp_connect($ftp_server) or die('Couldn't connect to $ftp_server'); "
	],
	"description": "ftp_connect() function"
  },
  "ftp_delete": {
	"prefix": "phpftp_delete",
	"body": [
		"$file = 'public_html/old.txt';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_delete($ftp, $file)) {",
		 "echo '$file deleted successful\n';",
		"} else {",
		" echo 'could not delete $file\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_delete() function"
  },
  "ftp_exec": {
	"prefix": "phpftp_exec",
	"body": [
		"$command = 'ls -al >files.txt';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_exec($ftp, $command)) {",
			"echo '$command executed successfully\n';",
		"} else {",
			"echo 'could not execute $command\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_exec() function"
  },
  "ftp_fget": {
	"prefix": "phpftp_fget",
	"body": [
		"$remote_file = 'somefile.txt';",
		"$local_file = 'localfile.txt';",
		
		"$handle = fopen($local_file, 'w');",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_fget($ftp, $handle, $remote_file, FTP_ASCII, 0)) {",
		 "echo 'successfully written to $local_file\n';",
		"} else {",
		" echo 'There was a problem while downloading $remote_file to $local_file\n';",
		"}",
		
		"ftp_close($ftp);",
		"fclose($handle);"
	],
	"description": "ftp_fget() function"
  },
  "ftp_fput": {
	"prefix": "phpftp_fput",
	"body": [
		"$file = 'somefile.txt';",
		"$fp = fopen($file, 'r');",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_fput($ftp, $file, $fp, FTP_ASCII)) {",
			"echo 'Successfully uploaded $file\n';",
		"} else {",
			"echo 'There was a problem while uploading $file\n';",
		"}",
		
		"ftp_close($ftp);",
		"fclose($fp);"
	],
	"description": "ftp_fput() function"
  },
  "ftp_get_option": {
	"prefix": "phpftp_get_option",
	"body": [
	  "// Get the timeout of the given FTP connection",
"$timeout = ftp_get_option($ftp, FTP_TIMEOUT_SEC);"
	],
	"description": "ftp_get_option() function"
  },
  "ftp_get": {
	"prefix": "phpftp_get",
	"body": [
		"$local_file = 'local.zip';",
		"$server_file = 'server.zip';",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_get($ftp, $local_file, $server_file, FTP_BINARY)) {",
			"echo 'Successfully written to $local_file\n';",
		"} else {",
			"echo 'There was a problem\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_get() function"
  },
  "ftp_login": {
	"prefix": "phpftp_login",
	"body": [
		"$ftp_server = 'ftp.example.com';",
		"$ftp_user = 'foo';",
		"$ftp_pass = 'bar';",
		
		"$ftp = ftp_connect($ftp_server) or die('Couldn't connect to $ftp_server');" ,
		
		"if (@ftp_login($ftp, $ftp_user, $ftp_pass)) {",
			"echo 'Connected as $ftp_user@$ftp_server\n';",
		"} else {",
			"echo 'Couldn't connect as $ftp_user\n';",
		"}",
		
		"ftp_close($ftp); " 
	],
	"description": "ftp_login() function"
  },
  "ftp_mdtm": {
	"prefix": "phpftp_mdtm",
	"body": [
		"$file = 'somefile.txt';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$buff = ftp_mdtm($ftp, $file);",
		
		"if ($buff != -1) {",
			"echo '$file was last modified on : ' . date('F d Y H:i:s.', $buff);",
		"} else {",
			"echo 'Couldn't get mdtime';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_mdtm() function"
  },
  "ftp_mkdir": {
	"prefix": "phpftp_mkdir",
	"body": [
		"$dir = 'www';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_mkdir($ftp, $dir)) {",
		" echo 'successfully created $dir\n';",
		"} else {",
		 "echo 'There was a problem while creating $dir\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_mkdir() function"
  },
  "ftp_nb_continue": {
	"prefix": "phpftp_nb_continue",
	"body": [
		"$ret = ftp_nb_get($ftp, 'test', 'README', FTP_BINARY);",
		"while ($ret == FTP_MOREDATA) {",
		
		  " $ret = ftp_nb_continue($ftp);",
		"}",
		"if ($ret != FTP_FINISHED) {",
		   "echo 'There was an error downloading the file...';",
		  " exit(1);",
		"}"
	],
	"description": "ftp_nb_continue() function"
  },
  "ftp_nb_fget": {
	"prefix": "phpftp_nb_fget",
	"body": [
		"$file = 'index.php';",
		"$fp = fopen($file, 'w');",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$ret = ftp_nb_fget($ftp, $fp, $file, FTP_BINARY);",
		"while ($ret == FTP_MOREDATA) {",
		
		   "echo '.';",
		
		   "$ret = ftp_nb_continue($ftp);",
		"}",
		"if ($ret != FTP_FINISHED) {",
		   "echo 'There was an error downloading the file...';",
		   "exit(1);",
		"}",
		
		"fclose($fp);"
	],
	"description": "ftp_nb_fget() function"
  },
  "ftp_nb_fput": {
	"prefix": "phpftp_nb_fput",
	"body": [
		"$file = 'index.php';",

		"$fp = fopen($file, 'r');",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$ret = ftp_nb_fput($ftp, $file, $fp, FTP_BINARY);",
		"while ($ret == FTP_MOREDATA) {",
		
		  " echo '.';",
		
		  " $ret = ftp_nb_continue($ftp);",
		"}",
		"if ($ret != FTP_FINISHED) {",
		   "echo 'There was an error uploading the file...';",
		  " exit(1);",
		"}",
		
		"fclose($fp);"
	],
	"description": "ftp_nb_fput() function"
  },
  "ftp_nb_get": {
	"prefix": "phpftp_nb_get",
	"body": [
		"ftp_set_option($ftp, FTP_AUTOSEEK, false);",

		"$ret = ftp_nb_get($ftp, 'newfile', 'README', FTP_BINARY, 100);",
		"while ($ret == FTP_MOREDATA) {",
		
		   
		   "$ret = ftp_nb_continue($ftp);"
	],
	"description": "ftp_nb_get() function"
  },
  "ftp_nb_put": {
	"prefix": "phpftp_nb_put",
	"body": [
		"$ret = ftp_nb_put($ftp, 'test.remote', 'test.local', FTP_BINARY);",
		"while ($ret == FTP_MOREDATA) {",
		   
		  " echo '.';",
		
		   "$ret = ftp_nb_continue($ftp);",
		"}",
		"if ($ret != FTP_FINISHED) {",
		  " echo 'There was an error uploading the file...';",
		   "exit(1);"
	],
	"description": "ftp_nb_put() function"
  },
  "ftp_nlist": {
	"prefix": "phpftp_nlist",
	"body": [
		"$ftp = ftp_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$contents = ftp_nlist($ftp, ''.'');",
		
		"var_dump($contents);"
	],
	"description": "ftp_nlist() function"
  },
  "ftp_pasv": {
	"prefix": "phpftp_pasv",
	"body": [
		"$file = 'somefile.txt';",
		"$remote_file = 'readme.txt';",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"ftp_pasv($ftp, true);",
		
		"if (ftp_put($ftp, $remote_file, $file, FTP_ASCII)) {",
		 "echo 'successfully uploaded $file\n';",
		"} else {",
		" echo 'There was a problem while uploading $file\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_pasv() function"
  },
  "ftp_put": {
	"prefix": "phpftp_put",
	"body": [
		"$file = 'somefile.txt';",
		"$remote_file = 'readme.txt';",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_put($ftp, $remote_file, $file, FTP_ASCII)) {",
		 "echo 'successfully uploaded $file\n';",
		"} else {",
		 "echo 'There was a problem while uploading $file\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_put() function"
  },
  "ftp_pwd": {
	"prefix": "phpftp_pwd",
	"body": [
		"$ftp = ftp_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"ftp_chdir($ftp, 'public_html');",
		
		"echo ftp_pwd($ftp);", 
		
		"ftp_close($ftp);"
	],
	"description": "ftp_pwd() function"
  },
  "ftp_quit": {
	"prefix": "phpftp_quit",
	"body": [
	  "https://www.php.net/manual/en/function.ftp-quit.php"
	],
	"description": "ftp_quit() function"
  },
  "ftp_raw": {
	"prefix": "phpftp_raw",
	"body": [
		"$ftp = ftp_connect('ftp.example.com');",

		"ftp_raw($ftp, 'USER joeblow');",
		"ftp_raw($ftp, 'PASS secret');"
	],
	"description": "ftp_raw() function"
  },
  "ftp_rawlist": {
	"prefix": "phpftp_rawlist",
	"body": [
		"$ftp = ftp_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$buff = ftp_rawlist($ftp, '/');",
		
		"ftp_close($ftp);",
		
		"var_dump($buff);"
	],
	"description": "ftp_rawlist() function"
  },
  "ftp_rename": {
	"prefix": "phpftp_rename",
	"body": [
		"$old_file = 'somefile.txt.bak';",
		"$new_file = 'somefile.txt';",
		
		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_rename($ftp, $old_file, $new_file)) {",
		 "echo 'successfully renamed $old_file to $new_file\n';",
		"} else {",
		" echo 'There was a problem while renaming $old_file to $new_file\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_rename() function"
  },
  "ftp_rmdir": {
	"prefix": "phpftp_rmdir",
	"body": [
		"$dir = 'www/';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (ftp_rmdir($ftp, $dir)) {",
			"echo 'Successfully deleted $dir\n';",
		"} else {",
			"echo 'There was a problem while deleting $dir\n';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_rmdir() function"
  },
  "ftp_set_option": {
	"prefix": "phpftp_set_option",
	"body": [
	  "ftp_set_option($ftp, FTP_TIMEOUT_SEC, 10);"
	],
	"description": "ftp_set_option() function"
  },
  "ftp_site": {
	"prefix": "phpftp_site",
	"body": [
		"$ftp = ftp_connect('ftp.example.com');",
		"if (!$ftp) die('Unable to connect to ftp.example.com');",
		
		"if (!ftp_login($ftp, 'user', 'pass')) die('Error logging into ftp.example.com');",
		
		"if (ftp_site($ftp, 'CHMOD 0600 /home/user/privatefile')) {",
		   "echo 'Command executed successfully.\n';",
		"} else {",
		   "die('Command failed.');"
	],
	"description": "ftp_site() function"
  },
  "ftp_size": {
	"prefix": "phpftp_size",
	"body": [
		"$file = 'somefile.txt';",

		"$ftp = ftp_connect($ftp_server);",
		
		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"$res = ftp_size($ftp, $file);",
		
		"if ($res != -1) {",
			"echo 'size of $file is $res bytes';",
		"} else {",
			"echo 'couldn't get the size';",
		"}",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_size() function"
  },
  "ftp_ssl_connect": {
	"prefix": "phpftp_ssl_connect",
	"body": [
		"$ftp = ftp_ssl_connect($ftp_server);",

		"$login_result = ftp_login($ftp, $ftp_user_name, $ftp_user_pass);",
		
		"if (!$login_result) {",
			"die('can't login');",
		"}",
		
		"echo ftp_pwd($ftp);",
		
		"ftp_close($ftp);"
	],
	"description": "ftp_ssl_connect() function"
  },
  "ftp_systype": {
	"prefix": "phpftp_systype",
	"body": [
		"$ftp = ftp_connect('ftp.example.com');",
		"ftp_login($ftp, 'user', 'password');",
		
		"if ($type = ftp_systype($ftp)) {",
			"echo 'Example.com is powered by $type\n';",
		"} else {",
			"echo 'Couldn't get the systype';",
		"}"
	],
	"description": "ftp_systype() function"
  },
     
  "oop": {
    "prefix": "php_oop",
    "body": [
      "__construct()",
      "__destruct()",
      "__callStatic(name, arguments)",
      "__call(name, arguments)",
      "__get(name)",
      "__set(name, value)",
      "__isset(name)",
      "__unset(name)",
      "__sleep()",
      "__wakeup()",
      "__toString()",
      "__invoke(arguments)",
      "__set_state(properties)",
      "__clone()"
    ],
    "description": "List of magic methods in OOP"
  },
  "__construct": {
	"prefix": "php__construct",
	"body": [
		"class Point {",
			"protected int $x;",
			"protected int $y;",
		
			"public function __construct(int $x, int $y = 0) {",
				"$this->x = $x;",
				"$this->y = $y;",
			"}",
		"}",
		
		"$p1 = new Point(4, 5);",
		"$p2 = new Point(4);",
		"$p3 = new Point(y: 5, x: 4);"
	],
	"description": "Magic method __construct()"
  },
  "__destruct": {
	"prefix": "php__destruct",
	"body": [
		"class MyDestructableClass ",
		"{",
			"function __construct() {",
				"print 'In constructor\n';",
			"}",
		
			"function __destruct() {",
				"print 'Destroying ' . __CLASS__ . '\n';",
			"}",
		"}",
		
		"$obj = new MyDestructableClass();"
	],
	"description": "Magic method __destruct()"
  },
  "__callStatic": {
	"prefix": "php__callStatic",
	"body": [
		"class MethodTest",
		"{",
			"public function __call($name, $arguments)",
			"{",
				"echo 'Calling object method '$name' '",
					 ". implode(', ', $arguments). '\n';",
			"}",
		
			"public static function __callStatic($name, $arguments)",
			"{",
				"echo 'Calling static method '$name' '",
					 ". implode(', ', $arguments). '\n';",
			"}",
		"}",
		
		"$obj = new MethodTest;",
		"$obj->runTest('in object context');",
		
		"MethodTest::runTest('in static context');"
	],
	"description": "Magic method __callStatic()"
  },
  "__call": {
	"prefix": "php__call",
	"body": [
		"class MethodTest",
		"{",
			"public function __call($name, $arguments)",
			"{",
				"echo 'Calling object method '$name' '",
					" . implode(', ', $arguments). '\n';",
			"}",
		
			"public static function __callStatic($name, $arguments)",
			"{",
				"echo 'Calling static method '$name' '",
					" . implode(', ', $arguments). '\n';",
			"}",
		"}",
		
		"$obj = new MethodTest;",
		"$obj->runTest('in object context');",
		
		"MethodTest::runTest('in static context');"
	],
	"description": "Magic method __call()"
  },
  "__get": {
	"prefix": "php__get",
	"body": [
	  "https://www.php.net/manual/en/language.oop5.overloading.php#object.get"
	],
	"description": "Magic method __get()"
  },
  "__set": {
	"prefix": "php__set",
	"body": [
	  "https://www.php.net/manual/en/language.oop5.overloading.php#object.set"
	],
	"description": "Magic method __set()"
  },
  "__isset": {
	"prefix": "php__isset",
	"body": [
	  "https://www.php.net/manual/en/language.oop5.overloading.php#object.isset"
	],
	"description": "Magic method __isset()"
  },
  "__unset": {
	"prefix": "php__unset",
	"body": [
	 "https://www.php.net/manual/en/language.oop5.overloading.php#object.unset"
	],
	"description": "Magic method __unset()"
  },
  "__sleep": {
	"prefix": "php__sleep",
	"body": [
		"class Connection",
		"{",
			"protected $link;",
			"private $dsn, $username, $password;",
			
			"public function __construct($dsn, $username, $password)",
			"{",
				"$this->dsn = $dsn;",
				"$this->username = $username;",
				"$this->password = $password;",
				"$this->connect();",
			"}",
			
			"private function connect()",
			"{",
				"$this->link = new PDO($this->dsn, $this->username, $this->password);",
			"}",
			
			"public function __sleep()",
			"{",
				"return array('dsn', 'username', 'password');",
			"}",
			
			"public function __wakeup()",
			"{",
				"$this->connect();"
	],
	"description": "Magic method __sleep()"
  },
  "__wakeup": {
	"prefix": "php__wakeup",
	"body": [
		"class Connection",
		"{",
			"protected $link;",
			"private $dsn, $username, $password;",
			
			"public function __construct($dsn, $username, $password)",
			"{",
				"$this->dsn = $dsn;",
				"$this->username = $username;",
				"$this->password = $password;",
				"$this->connect();",
			"}",
			
			"private function connect()",
			"{",
				"$this->link = new PDO($this->dsn, $this->username, $this->password);",
			"}",
			
			"public function __sleep()",
			"{",
				"return array('dsn', 'username', 'password');",
			"}",
			
			"public function __wakeup()",
			"{",
				"$this->connect();"
	],
	"description": "Magic method __wakeup()"
  },
  "__toString": {
	"prefix": "php__toString",
	"body": [
		"class TestClass",
		"{",
			"public $foo;",
		
			"public function __construct($foo)",
			"{",
				"$this->foo = $foo;",
			"}",
		
			"public function __toString()",
			"{",
				"return $this->foo;",
			"}",
		"}",
		
		"$class = new TestClass('Hello');",
		"echo $class;"
	],
	"description": "Magic method __toString()"
  },
  "__invoke": {
	"prefix": "php__invoke",
	"body": [
		"class CallableClass",
		"{",
			"public function __invoke($x)",
			"{",
				"var_dump($x);",
			"}",
		"}",
		"$obj = new CallableClass;",
		"$obj(5);",
		"var_dump(is_callable($obj));"
	],
	"description": "Magic method __invoke()"
  },
  "__set_state": {
	"prefix": "php__set_state",
	"body": [
		"class CallableClass",
		"{",
			"public function __invoke($x)",
			"{",
				"var_dump($x);",
			"}",
		"}",
		"$obj = new CallableClass;",
		"$obj(5);",
		"var_dump(is_callable($obj));"
	],
	"description": "Magic method __set_state()"
  },
  "__clone": {
	"prefix": "php__clone",
	"body": [
	  "https://www.php.net/manual/en/language.oop5.cloning.php#object.clone"
	],
	"description": "Magic method __clone()"
  },

  "Date/Time Functions": {
    "prefix": "php_datetime_functions",
    "body": [
      "checkdate(month, day, year)",
      "date_default_timezone_get()",
      "date_default_timezone_set(timezone)",
      "date_sunrise(timestamp, format, latitude, longitude, zenith, gmt_offset)",
      "date_sunset(timestamp, format, latitude, longitude, zenith, gmt_offset)",
      "date()",
      "getdate([timestamp])",
      "gettimeofday([return_float])",
      "gmdate(format, [timestamp])",
      "gmmktime(hour, minute, second, month, day, year)",
      "gmstrftime(format, [timestamp])",
      "idate(format, [timestamp])",
      "localtime([timestamp, is_associative])",
      "microtime([as_float])",
      "mktime([hour, minute, second, month, day, year, is_dst])",
      "strftime(format, [timestamp])",
      "strptime(date, format)",
      "strtotime(time, [now])",
      "time()",
      ""
    ],
    "description": "List of date/time functions in PHP"
  },
  "Date/Time Constants": {
    "prefix": "php_datetime_constants",
    "body": [
      "DATE_ATOM",
      "DATE_COOKIE",
      "DATE_ISO8601",
      "DATE_RFC822",
      "DATE_RFC850",
      "DATE_RFC1036",
      "DATE_RFC1123",
      "DATE_RFC2822",
      "DATE_RSS",
      "DATE_W3C"
    ],
    "description": "List of date/time constants in PHP"
  },
  "checkdate": {
	"prefix": "phpcheckdate",
	"body": [
		"var_dump(checkdate(12, 31, 2000));",
		"var_dump(checkdate(2, 29, 2001));"
	],
	"description": "checkdate() function"
  },
  "date_default_timezone_get": {
	"prefix": "phpdate_default_timezone_get",
	"body": [
		"date_default_timezone_set('America/Los_Angeles');",
		"echo date_default_timezone_get() . ' => ' . date('e') . ' => ' . date('T');"
	],
	"description": "date_default_timezone_get() function"
  },
  "date_default_timezone_set": {
	"prefix": "phpdate_default_timezone_set",
	"body": [
		"date_default_timezone_set('America/Los_Angeles');",

		"$script_tz = date_default_timezone_get();",
		
		"if (strcmp($script_tz, ini_get('date.timezone'))){",
			"echo 'Script timezone differs from ini-set timezone.';",
		"} else {",
			"echo 'Script timezone and ini-set timezone match.';"
	],
	"description": "date_default_timezone_set() function"
  },
  "date_sunrise": {
	"prefix": "phpdate_sunrise",
	"body": [
		"$solstice = strtotime('2017-12-21');",
		"var_dump(date_sunrise($solstice, SUNFUNCS_RET_STRING, 69.245833, -53.537222));"
	],
	"description": "date_sunrise() function"
  },
  "date_sunset": {
	"prefix": "phpdate_sunset",
	"body": [
		"$solstice = strtotime('2017-12-21');",
		"var_dump(date_sunset($solstice, SUNFUNCS_RET_STRING, 69.245833, -53.537222));"
	],
	"description": "date_sunset() function"
  },
  "date": {
	"prefix": "phpdate",
	"body": [
	 "echo date('l \t\"h\"e jS');"
	],
	"description": "date() function"
  },
  "getdate": {
	"prefix": "phpgetdate",
	"body": [
		"$today = getdate();",
		"print_r($today);"
	],
	"description": "getdate() function"
  },
  "gettimeofday": {
	"prefix": "phpgettimeofday",
	"body": [
		"print_r(gettimeofday());",

		"echo gettimeofday(true);"
	],
	"description": "gettimeofday() function"
  },
  "gmdate": {
	"prefix": "phpgmdate",
	"body": [
		"echo date('M d Y H:i:s', mktime(0, 0, 0, 1, 1, 1998));",
		"echo gmdate('M d Y H:i:s', mktime(0, 0, 0, 1, 1, 1998));"
	],
	"description": "gmdate() function"
  },
  "gmmktime": {
	"prefix": "phpgmmktime",
	"body": [
	  "echo 'July 1, 2000 is on a ' . date('l', gmmktime(0, 0, 0, 7, 1, 2000));"
	],
	"description": "gmmktime() function"
  },
  "gmstrftime": {
	"prefix": "phpgmstrftime",
	"body": [
		"setlocale(LC_TIME, 'en_US');",
		"echo strftime('%b %d %Y %H:%M:%S', mktime(20, 0, 0, 12, 31, 98)) . '\n';",
		"echo gmstrftime('%b %d %Y %H:%M:%S', mktime(20, 0, 0, 12, 31, 98)) . '\n';"
	],
	"description": "gmstrftime() function"
  },
  "idate": {
	"prefix": "phpidate",
	"body": [
		"$timestamp = strtotime('1st January 2004'); //1072915200",

		"// this prints the year in a two digit format",
		"// however, as this would start with a 0, it",
		"// only prints 4",
		"echo idate('y', $timestamp);"
	],
	"description": "idate() function"
  },
  "localtime": {
	"prefix": "phplocaltime",
	"body": [
		"$localtime = localtime();",
	"$localtime_assoc = localtime(time(), true);",
		"print_r($localtime);",
		"print_r($localtime_assoc);"
	],
	"description": "localtime() function"
  },
  "microtime": {
	"prefix": "phpmicrotime",
	"body": [
		"$time_start = microtime(true);",

		
		"usleep(100);",
		
		"$time_end = microtime(true);",
		"$time = $time_end - $time_start;",
		
		"echo 'Did nothing in $time seconds\n';"
	],
	"description": "microtime() function"
  },
  "mktime": {
	"prefix": "phpmktime",
	"body": [
		"$lastday = mktime(0, 0, 0, 3, 0, 2000);",
		"echo strftime('Last day in Feb 2000 is: %d', $lastday);",
		"$lastday = mktime(0, 0, 0, 4, -31, 2000);",
		"echo strftime('Last day in Feb 2000 is: %d', $lastday);"
	],
	"description": "mktime() function"
  },
  "strftime": {
	"prefix": "phpstrftime",
	"body": [
		"setlocale(LC_TIME, 'C');",
		"echo strftime('%A');",
		"setlocale(LC_TIME, 'fi_FI');",
		"echo strftime(' in Finnish is %A,');",
		"setlocale(LC_TIME, 'fr_FR');",
		"echo strftime(' in French %A and');",
		"setlocale(LC_TIME, 'de_DE');",
		"echo strftime(' in German %A.\n');"
	],
	"description": "strftime() function"
  },
  "strptime": {
	"prefix": "phpstrptime",
	"body": [
		"$format = '%d/%m/%Y %H:%M:%S';",
		"$strf = strftime($format);",
		
		"echo '$strf\n';",
		
		"print_r(strptime($strf, $format));"
	],
	"description": "strptime() function"
  },
  "strtotime": {
	"prefix": "phpstrtotime",
	"body": [
		"$str = 'Not Good';",

		"if (($timestamp = strtotime($str)) === false) {",
			"echo 'The string ($str) is bogus';",
		"} else {",
			"echo '$str == ' . date('l dS \"o\f F Y h:i:s A', $timestamp);"
	],
	"description": "strtotime() function"
  },
  "time": {
	"prefix": "phptime",
	"body": [
	  "echo 'Now: '. time();"
	],
	"description": "time() function"
  },
  "Calendar Functions": {
    "prefix": "php_calendar_functions",
    "body": [
      "cal_days_in_month(calendar, month, year)",
      "cal_from_jd(jd, calendar)",
      "cal_info([calendar = CAL_GREGORIAN])",
      "cal_to_jd(calendar, month, day, year)",
      "easter_date([year = date(\"Y\")])",
      "easter_days([year = date(\"Y\")], [method = CAL_EASTER_DEFAULT])",
      "FrenchToJD(month, day, year, [calendar])",
      "GregorianToJD(month, day, year)",
      "JDDayOfWeek(jd, [mode = CAL_DOW_DAYNO])",
      "JDMonthName(jd, [mode = CAL_MONTH_GREGORIAN_LONG])",
      "JDToFrench(jd, [calendar])",
      "JDToGregorian(jd)",
      "jdtojewish(jd)",
      "JDToJulian(jd)",
      "jdtounix(jd)",
      "JewishToJD(month, day, year)",
      "JulianToJD(month, day, year)",
      "unixtojd([timestamp = time()])"
    ],
    "description": "List of calendar functions in PHP"
  },
  "Calendar Constants": {
    "prefix": "php_calendar_constants",
    "body": [
      "CAL_GREGORIAN",
      "CAL_JULIAN",
      "CAL_JEWISH",
      "CAL_FRENCH",
      "CAL_NUM_CALS",
      "CAL_DOW_DAYNO",
      "CAL_DOW_SHORT",
      "CAL_DOW_LONG",
      "CAL_MONTH_GREGORIAN_SHORT",
      "CAL_MONTH_GREGORIAN_LONG",
      "CAL_MONTH_JULIAN_SHORT",
      "CAL_MONTH_JULIAN_LONG",
      "CAL_MONTH_JEWISH",
      "CAL_MONTH_FRENCH",
      "CAL_EASTER_DEFAULT",
      "CAL_EASTER_ROMAN",
      "CAL_EASTER_ALWAYS_GREGORIAN",
      "CAL_EASTER_ALWAYS_JULIAN",
      "CAL_JEWISH_ADD_ALAFIM_GERESH",
      "CAL_JEWISH_ADD_ALAFIM",
      "CAL_JEWISH_ADD_GERESHAYIM"
    ],
    "description": "List of calendar constants in PHP"
  },
  "cal_days_in_month": {
	"prefix": "phpcal_days_in_month",
	"body": [
		"$number = cal_days_in_month(CAL_GREGORIAN, 8, 2003); // 31",
		"echo 'There were {$number} days in August 2003';"
	],
	"description": "cal_days_in_month() function"
  },
  "cal_from_jd": {
	"prefix": "phpcal_from_jd",
	"body": [
		"$today = unixtojd(mktime(0, 0, 0, 8, 16, 2003));",
		"print_r(cal_from_jd($today, CAL_GREGORIAN));"
	],
	"description": "cal_from_jd() function"
  },
  "cal_info": {
	"prefix": "phpcal_info",
	"body": [
		"$info = cal_info(0);",
		"print_r($info);"
	],
	"description": "cal_info() function"
  },
  "cal_to_jd": {
	"prefix": "phpcal_to_jd",
	"body": [
	  "https://www.php.net/manual/en/function.frenchtojd.php"
	],
	"description": "cal_to_jd() function"
  },
  "easter_date": {
	"prefix": "phpeaster_date",
	"body": [
		"echo date('M-d-Y', easter_date(1999));" ,      
		"echo date('M-d-Y', easter_date(2000)); "   ,   
		"echo date('M-d-Y', easter_date(2001));"        
	],
	"description": "easter_date() function"
  },
  "easter_days": {
	"prefix": "phpeaster_days",
	"body": [
		"echo easter_days(1999);  " ,     
		"echo easter_days(1492); " ,      
		"echo easter_days(1913);"        
	],
	"description": "easter_days() function"
  },
  "FrenchToJD": {
	"prefix": "phpFrenchToJD",
	"body": [
	  "https://www.php.net/manual/en/function.frenchtojd.php"
	],
	"description": "FrenchToJD() function"
  },
  "GregorianToJD": {
	"prefix": "phpGregorianToJD",
	"body": [
		"echo gregoriantojd(2, 31, 2018), PHP_EOL,",
		"gregoriantojd(3,  3, 2018), PHP_EOL;"
	],
	"description": "GregorianToJD() function"
  },
  "JDDayOfWeek": {
	"prefix": "phpJDDayOfWeek",
	"body": [
	 "https://www.php.net/manual/en/function.jddayofweek.php"
	],
	"description": "JDDayOfWeek() function"
  },
  "JDMonthName": {
	"prefix": "phpJDMonthName",
	"body": [
	  "https://www.php.net/manual/en/function.jdmonthname.php"
	],
	"description": "JDMonthName() function"
  },
  "JDToFrench": {
	"prefix": "phpJDToFrench",
	"body": [
	  "https://www.php.net/manual/en/function.jdtofrench.php"
	],
	"description": "JDToFrench() function"
  },
  "JDToGregorian": {
	"prefix": "phpJDToGregorian",
	"body": [
	 "https://www.php.net/manual/en/function.jdtogregorian.php"
	],
	"description": "JDToGregorian() function"
  },
  "jdtojewish": {
	"prefix": "phpjdtojewish",
	"body": [
		"$jd = gregoriantojd(10, 8, 2002);",
		"echo jdtojewish($jd, true), PHP_EOL,",
			 "jdtojewish($jd, true, CAL_JEWISH_ADD_GERESHAYIM), PHP_EOL,",
			" jdtojewish($jd, true, CAL_JEWISH_ADD_ALAFIM), PHP_EOL,",
			" jdtojewish($jd, true,CAL_JEWISH_ADD_ALAFIM_GERESH), PHP_EOL;"
	],
	"description": "jdtojewish() function"
  },
  "JDToJulian": {
	"prefix": "phpJDToJulian",
	"body": [
	  "https://www.php.net/manual/en/function.jdtojulian.php"
	],
	"description": "JDToJulian() function"
  },
  "jdtounix": {
	"prefix": "phpjdtounix",
	"body": [
	 "https://www.php.net/manual/en/function.jdtounix.php"
	],
	"description": "jdtounix() function"
  },
  "JewishToJD": {
	"prefix": "phpJewishToJD",
	"body": [
	 "https://www.php.net/manual/en/function.jewishtojd.php"
	],
	"description": "JewishToJD() function"
  },
  "JulianToJD": {
	"prefix": "phpJulianToJD",
	"body": [
	  "https://www.php.net/manual/en/function.juliantojd.php"
	],
	"description": "JulianToJD() function"
  },
  "unixtojd": {
	"prefix": "phpunixtojd",
	"body": [
	  "https://www.php.net/manual/en/function.unixtojd.php"
	],
	"description": "unixtojd() function"
  },
  
  "SimpleXML Functions": {
    "prefix": "php_simplexml_functions",
    "body": [
      "__construct([data], [options = 0], [data_is_url = false], [ns = \"\"], [is_prefix = false])",
      "addAttribute(name, value, [namespace = null])",
      "addChild(name, [value], [namespace = null])",
      "asXML([filename = null])",
      "attributes([namespace = null], [is_prefix = false])",
      "children([namespace = null], [is_prefix = false])",
      "getDocNamespaces([recursive = false])",
      "getName()",
      "getNamespace([prefix = null])",
      "registerXPathNamespace(prefix, namespace)",
      "simplexml_import_dom(DOMNode node, [class_name = \"SimpleXMLElement\"])",
      "simplexml_load_file(filename, [class_name = \"SimpleXMLElement\"], [options = 0], [ns = \"\"], [is_prefix = false])",
      "simplexml_load_string(data, [class_name = \"SimpleXMLElement\"], [options = 0], [ns = \"\"], [is_prefix = false])",
      "xpath(path)"
    ],
    "description": "List of SimpleXML functions in PHP"
  },
  
  "__construct()": {
    "prefix": "php__construct",
    "body": [
		"include 'example.php';",

		"$sxe = new SimpleXMLElement($xmlstr);",
		"echo $sxe->movie[0]->title;"
	],
    "description": "__construct() - Creates a new SimpleXMLElement object"
  },
  "addAttribute()": {
    "prefix": "phpaddAttribute",
    "body": [
		"include 'example.php';",
 
"$sxe = new SimpleXMLElement($xmlstr);",
"$sxe->addAttribute('type', 'documentary');",

"$movie = $sxe->addChild('movie');",
"$movie->addChild('title', 'PHP2: More Parser Stories');",
"$movie->addChild('plot', 'This is all about the people who make it work.');",

"$characters = $movie->addChild('characters');",
"$character  = $characters->addChild('character');",
"$character->addChild('name', 'Mr. Parser');",
"$character->addChild('actor', 'John Doe');",

"$rating = $movie->addChild('rating', '5');",
"$rating->addAttribute('type', 'stars');",
 
"echo $sxe->asXML();"
	],
    "description": "addAttribute() - Adds an attribute to the SimpleXMLElement"
  },
  "addChild()": {
    "prefix": "phpaddChild",
    "body": [
		"include 'example.php';",

"$sxe = new SimpleXMLElement($xmlstr);",
"$sxe->addAttribute('type', 'documentary');",

"$movie = $sxe->addChild('movie');",
"$movie->addChild('title', 'PHP2: More Parser Stories');",
"$movie->addChild('plot', 'This is all about the people who make it work.');",

"$characters = $movie->addChild('characters');",
"$character  = $characters->addChild('character');",
"$character->addChild('name', 'Mr. Parser');",
"$character->addChild('actor', 'John Doe');",

"$rating = $movie->addChild('rating', '5');",
"$rating->addAttribute('type', 'stars');",
 
"echo $sxe->asXML();"
	],
    "description": "addChild() - Adds a child element to the SimpleXMLElement"
  },
  "asXML()": {
    "prefix": "phpasXML",
    "body": [
		"$string = <<<XML",
"<a>",
" <b>",
 " <c>text</c>",
  "<c>stuff</c>",
 "</b>",
 "<d>",
 " <c>code</c>",
" </d>",
"</a>",
"XML;",

"$xml = new SimpleXMLElement($string);",

"echo $xml->asXML();"
	],
    "description": "asXML() - Return the SimpleXML data as XML or save to a file"
  },
  "attributes()": {
    "prefix": "phpattributes",
    "body": [
		"$string = <<<XML",
"<a>",
" <foo name='one' game='lonely'>1</foo>",
"</a>",
"XML;",

"$xml = simplexml_load_string($string);",
"foreach($xml->foo[0]->attributes() as $a => $b) {",
    "echo $a,'='',$b,'\"\n';"
	],
    "description": "attributes() - Returns a SimpleXMLElement object with attributes"
  },
  "children()": {
    "prefix": "phpchildren",
    "body": [
		"$xml = new SimpleXMLElement(",
"'<person>",
 "<child role='son'>",
  "<child role='daughter'/>",
 "</child>",
 "<child role='daughter'>",
 " <child role='son'>",
   "<child role='son'/>",
  "</child>",
" </child>",
"</person>');",

"foreach ($xml->children() as $second_gen) {",
    "echo ' The person begot a ' . $second_gen['role'];",

    "foreach ($second_gen->children() as $third_gen) {",
        "echo ' who begot a ' . $third_gen['role'] . ';';",

        "foreach ($third_gen->children() as $fourth_gen) {",
           " echo ' and that ' . $third_gen['role'] .",
               " ' begot a ' . $fourth_gen['role'];",
        "}",
    "}",
"}"
	],
    "description": "children() - Returns a filtered list of children elements"
  },
  "getDocNamespaces()": {
    "prefix": "phpgetDocNamespaces",
    "body": [
		"$xml = <<<XML",
"<?xml version='1.0' standalone='yes'?>",
"<people xmlns:p='http://example.org/ns'>",
   " <p:person id='1'>John Doe</p:person>",
    "<p:person id='2'>Susie Q. Public</p:person>",
"</people>",
"XML;",
 
"$sxe = new SimpleXMLElement($xml);",

"$namespaces = $sxe->getDocNamespaces();",
"var_dump($namespaces);"
	],
    "description": "getDocNamespaces() - Returns namespaces declared in document"
  },
  "getName()": {
    "prefix": "phpgetName",
    "body":[
		"include 'example.php';",
"$sxe = new SimpleXMLElement($xmlstr);",

"echo $sxe->getName() . '\n';",

"foreach ($sxe->children() as $child)",
"{",
    "echo $child->getName() . '\n';",
"}"
	],
    "description": "getName() - Gets the name of the XML element"
  },
  "getNamespace()": {
    "prefix": "phpgetNamespace",
    "body": [
		"$xml = <<<XML",
"<?xml version='1.0' standalone='yes'?>",
"<people xmlns:p='http://example.org/ns' xmlns:t='http://example.org/test'>",
    "<p:person id='1'>John Doe</p:person>",
    "<p:person id='2'>Susie Q. Public</p:person>",
"</people>",
"XML;",
 
"$sxe = new SimpleXMLElement($xml);",

"$namespaces = $sxe->getNamespaces(true);",
"var_dump($namespaces);"
	],
    "description": "getNamespace() - Gets namespaces for the document"
  },
  "registerXPathNamespace()": {
    "prefix": "phpregisterXPathNamespace",
    "body": [
		
"$sxe = new SimpleXMLElement($xml);",

"$sxe->registerXPathNamespace('c', 'http://example.org/chapter-title');",
"$result = $sxe->xpath('//c:title');",

"foreach ($result as $title) {",
  "echo $title . '\n';",
"}"
	],
    "description": "registerXPathNamespace() - Creates a prefix/ns context for the next XPath query"
  },
  "simplexml_import_dom()": {
    "prefix": "phpsimplexml_import_dom",
    "body":[
		"$dom = new DOMDocument;",
"$dom->loadXML('<books><book><title>blah</title></book></books>');",
"if (!$dom) {",
   " echo 'Error while parsing the document';",
    "exit;",
"}",

"$s = simplexml_import_dom($dom);",

"echo $s->book[0]->title;"
	],
    "description": "simplexml_import_dom() - Import a DOM node into SimpleXML"
  },
  "simplexml_load_file()": {
    "prefix": "phpsimplexml_load_file",
    "body": [
		"if (file_exists('test.xml')) {",
			"$xml = simplexml_load_file('test.xml');",
		 
			"print_r($xml);",
		"} else {",
			"exit('Failed to open test.xml.');",
		"}"
	],
    "description": "simplexml_load_file() - Load XML file into SimpleXML"
  },
  "simplexml_load_string()": {
    "prefix": "phpsimplexml_load_string",
    "body": [
		"$string = <<<XML",
"<?xml version='1.0'?> ",
"<document>",
 "<title>Forty What?</title>",
" <from>Joe</from>",
 "<to>Jane</to>",
 "<body>",
  "I know that's the answer -- but what's the question?",
 "</body>",
"</document>",
"XML;",

"$xml = simplexml_load_string($string);",

"print_r($xml);"
	],
    "description": "simplexml_load_string() - Load XML string into SimpleXML"
  },
  "xpath()": {
    "prefix": "phpxpath",
    "body": [
		"$string = <<<XML",
"<a>",
 "<b>",
 " <c>text</c>",
  "<c>stuff</c>",
 "</b>",
 "<d>",
  "<c>code</c>",
" </d>",
"</a>",
"XML;",

"$xml = new SimpleXMLElement($string);",

"$result = $xml->xpath('/a/b/c');",

"foreach ($result as $node) {",
    "echo '/a/b/c: ',$node,'\n';",
"}",

"$result = $xml->xpath('b/c');",

"foreach ($result as $node) {",
    "echo 'b/c: ',$node,'\n';",
"}"
	],
    "description": "xpath() - Runs an XPath query on XML data"
  },

  "Directory Functions": {
    "prefix": "php_directory_functions",
    "body": [
      "chdir(directory)",
      "chroot(directory)",
      "dir(directory, context)",
      "closedir(dir_handle)",
      "getcwd()",
      "opendir(path, [context])",
      "readdir(dir_handle)",
      "rewinddir(dir_handle)",
      "scandir(directory, [sorting_order = SCANDIR_SORT_ASCENDING], [context])"
    ],
    "description": "List of directory functions in PHP"
  },

  "Directory Constants": {
    "prefix": "php_directory_constants",
    "body": [
      "DIRECTORY_SEPARATOR",
      "PATH_SEPARATOR"
    ],
    "description": "List of directory constants in PHP"
  },
  "chdir": {
	"prefix": "phpchdir",
	"body": [
		"echo getcwd() . '\n';",

		"chdir('public_html');",
		
		"echo getcwd() . '\n';"
	],
	"description": "chdir() function"
  },
  "chroot": {
	"prefix": "phpchroot",
	"body": [
		"chroot('/path/to/your/chroot/');",
		"echo getcwd();"
	],
	"description": "chroot() function"
  },
  "dir": {
	"prefix": "phpdir",
	"body": [
		"$d = dir('/etc/php5');",
		"echo 'Handle: ' . $d->handle . '\n';",
		"echo 'Path: ' . $d->path . '\n';",
		"while (false !== ($entry = $d->read())) {",
		   "echo $entry.'\n';",
		"}",
		"$d->close();"
	],
	"description": "dir() function"
  },
  "closedir": {
	"prefix": "phpclosedir",
	"body": [
		"$dir = '/etc/php5/';",

		"if (is_dir($dir)) {",
			"if ($dh = opendir($dir)) {",
				"$directory = readdir($dh);",
				"closedir($dh);"
	],
	"description": "closedir() function"
  },
  "getcwd": {
	"prefix": "phpgetcwd",
	"body": [
		"echo getcwd() . '\n';",

		"chdir('cvs');",
		
		"echo getcwd() . '\n';"
	],
	"description": "getcwd() function"
  },
  "opendir": {
	"prefix": "phpopendir",
	"body": [
		"$dir = '/etc/php5/';",

		"if (is_dir($dir)) {",
			"if ($dh = opendir($dir)) {",
				"while (($file = readdir($dh)) !== false) {",
					"echo 'filename: $file : filetype: ' . filetype($dir . $file) . '\n';",
				"}",
				"closedir($dh);"
	],
	"description": "opendir() function"
  },
  "readdir": {
	"prefix": "phpreaddir",
	"body": [
		"if ($handle = opendir('.')) {",
			"while (false !== ($entry = readdir($handle))) {",
				"if ($entry != '.' && $entry != '..') {",
					"echo '$entry\n';",
				"}",
			"}",
			"closedir($handle);"
	],
	"description": "readdir() function"
  },
  "rewinddir": {
	"prefix": "phprewinddir",
	"body": [
	  "https://www.php.net/manual/en/function.rewinddir.php"
	],
	"description": "rewinddir() function"
  },
  "scandir": {
	"prefix": "phpscandir",
	"body": [
		"$dir    = '/tmp';",
		"$files1 = scandir($dir);",
		"$files2 = scandir($dir, SCANDIR_SORT_DESCENDING);",
		
		"print_r($files1);",
		"print_r($files2);"
	],
	"description": "scandir() function"
  },
  
  "Filesystem Functions": {
    "prefix": "php_filesystem_functions",
    "body": [
      "basename(path, [suffix])",
      "chgrp(filename, group)",
      "chmod(filename, mode)",
      "chown(filename, user)",
      "clearstatcache([clear_realpath_cache = false], filename)",
      "copy(source, destination, [context])",
      "delete(filename, [context])",
      "dirname(path, [levels = 1])",
      "disk_free_space(directory)",
      "disk_total_space(directory)",
      "diskfreespace(directory)",
      "fclose(handle)",
      "feof(handle)",
      "fflush(handle)",
      "fgetc(handle)",
      "fgetcsv(handle, [length = 0], [delimiter = ','], [enclosure = '\"'], [escape = '\\\\'])",
      "fgets(handle, [length])",
      "fgetss(handle, [length], [allowable_tags])",
      "file(filename, [flags = 0], [context])",
      "file_exists(filename)",
      "file_get_contents(filename, [flags = 0], [context], [offset = 0], [max_length])",
      "file_put_contents(filename, data, [flags = 0], [context])",
      "fileatime(filename)",
      "filectime(filename)",
      "filegroup(filename)",
      "fileinode(filename)",
      "filemtime(filename)",
      "fileowner(filename)",
      "fileperms(filename)",
      "filesize(filename)",
      "filetype(filename)",
      "flock(handle, operation)",
      "fnmatch(pattern, string, [flags = 0])",
      "fopen(filename, mode, [use_include_path = false], [context])",
      "fpassthru(handle)",
      "fputcsv(handle, fields, [delimiter = ','], [enclosure = '\"'], [escape_char = '\\\\'])",
      "fputs(handle, string, [length])",
      "fread(handle, length)",
      "fscanf(handle, format, &...vars)",
      "fseek(handle, offset, [whence = SEEK_SET])",
      "fstat(handle)",
      "ftell(handle)",
      "ftruncate(handle, size)",
      "fwrite(handle, string, [length])",
      "glob(pattern, [flags = 0])",
      "is_dir(filename)",
      "is_executable(filename)",
      "is_file(filename)",
      "is_link(filename)",
      "is_readable(filename)",
      "is_uploaded_file(filename)",
      "is_writable(filename)",
      "is_writeable(filename)",
      "link(target, link)",
      "linkinfo(path)",
      "lstat(filename)",
      "mkdir(pathname, [mode = 0777], [recursive = false], [context])",
      "move_uploaded_file(filename, destination)",
      "parse_ini_file(filename, [process_sections = false], [scanner_mode = INI_SCANNER_NORMAL])",
      "pathinfo(path, [options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME])",
      "pclose(handle)",
      "popen(command, mode)",
      "readfile(filename, [use_include_path = false], [context])",
      "readlink(path)",
      "realpath(path)",
      "rename(oldname, newname, [context])",
      "rewind(handle)",
      "rmdir(dirname, [context])",
      "set_file_buffer(handle, buffer)",
      "stat(filename)",
      "symlink(target, link)",
      "tempnam(dir, prefix)",
      "tmpfile()",
      "touch(filename, [time = time()], [atime])",
      "umask([mask])",
      "unlink(filename, [context])"
    ],
    "description": "List of filesystem functions in PHP"
  },

  "Filesystem Constants": {
    "prefix": "php_filesystem_constants",
    "body": [
      "GLOB_BRACE",
      "GLOB_ONLYDIR",
      "GLOB_MARK",
      "GLOB_NOSORT",
      "GLOB_NOCHECK",
      "GLOB_NOESCAPE",
      "PATHINFO_DIRNAME",
      "PATHINFO_BASENAME",
      "PATHINFO_EXTENSION",
      "FILE_USE_INCLUDE_PATH",
      "FILE_APPEND",
      "FILE_IGNORE_NEW_LINES",
      "FILE_SKIP_EMPTY_LINES"
    ],
    "description": "List of filesystem constants in PHP"
  },
  "basename": {
	"prefix": "phpbasename",
	"body": [
		"echo '1) '.basename('/etc/sudoers.d', '.d').PHP_EOL;",
		"echo '2) '.basename('/etc/sudoers.d').PHP_EOL;",
		"echo '3) '.basename('/etc/passwd').PHP_EOL;",
		"echo '4) '.basename('/etc/').PHP_EOL;",
		"echo '5) '.basename('.').PHP_EOL;",
		"echo '6) '.basename('/');"
	],
	"description": "basename() function"
  },
  "chgrp": {
	"prefix": "phpchgrp",
	"body": [
		"$filename = 'shared_file.txt';",
		"$format = '%s's Group ID @ %s: %d\n';",
		"printf($format, $filename, date('r'), filegroup($filename));",
		"chgrp($filename, 8);",
		"clearstatcache(); // do not cache filegroup() results",
		"printf($format, $filename, date('r'), filegroup($filename));"
	],
	"description": "chgrp() function"
  },
  "chmod": {
	"prefix": "phpchmod",
	"body": [
		"chmod('/somedir/somefile', 755); " , 
		"chmod('/somedir/somefile', 'u+rwx,go+rx');", 
		"chmod('/somedir/somefile', 0755); " 
	],
	"description": "chmod() function"
  },
  "chown": {
	"prefix": "phpchown",
	"body": [
		"$file_name= 'foo.php';",
		"$path = '/home/sites/php.net/public_html/sandbox/' . $file_name ;",
		"$user_name = 'root';",
		
		"chown($path, $user_name);",
		
		"$stat = stat($path);",
		"print_r(posix_getpwuid($stat['uid']));"
	],
	"description": "chown() function"
  },
  "clearstatcache": {
	"prefix": "phpclearstatcache",
	"body": [
		"$file = 'output_log.txt';",

		"function get_owner($file)",
		"{",
			"$stat = stat($file);",
			"$user = posix_getpwuid($stat['uid']);",
			"return $user['name'];",
		"}",
		
		"$format = 'UID @ %s: %s\n';",
		
		"printf($format, date('r'), get_owner($file));",
		
		"chown($file, 'ross');",
		"printf($format, date('r'), get_owner($file));",
		
		"clearstatcache();",
		"printf($format, date('r'), get_owner($file));"
	],
	"description": "clearstatcache() function"
  },
  "copy": {
	"prefix": "phpcopy",
	"body": [
		"$file = 'example.txt';",
		"$newfile = 'example.txt.bak';",
		
		"if (!copy($file, $newfile)) {",
			"echo 'failed to copy $file...\n';",
		"}"
	],
	"description": "copy() function"
  },
  "delete": {
	"prefix": "phpdelete",
	"body": [
	 "https://www.php.net/manual/en/function.delete.php"
	],
	"description": "Delete (unlink) a file"
  },
  "dirname": {
	"prefix": "phpdirname",
	"body": [
		"dirname('.');    // Will return '.'.",
		"dirname('/');    // Will return `\" on Windows and '/' on *nix systems.",
		"dirname('\\');   // Will return `\" on Windows and '.' on *nix systems.",
		"dirname('C:\\'); // Will return 'C:\" on Windows and '.' on *nix systems."
	],
	"description": "dirname() function"
  },
  "disk_free_space": {
	"prefix": "phpdisk_free_space",
	"body": [
		"$df = disk_free_space('/');",

		"$df_c = disk_free_space('C:');",
		"$df_d = disk_free_space('D:');"
	],
	"description": "disk_free_space() function"
  },
  "disk_total_space": {
	"prefix": "phpdisk_total_space",
	"body": [
		"$ds = disk_total_space('/');",

		"$ds = disk_total_space('C:');",
		"$ds = disk_total_space('D:');"
	],
	"description": "disk_total_space() function"
  },
  "diskfreespace": {
	"prefix": "phpdiskfreespace",
	"body": [
	  "https://www.php.net/manual/en/function.diskfreespace.php"
	],
	"description": "diskfreespace() function"
  },
  "fclose": {
	"prefix": "phpfclose",
	"body": [
		"$handle = fopen('somefile.txt', 'r');",

		"fclose($handle);"
	],
	"description": "fclose() function"
  },
  "feof": {
	"prefix": "phpfeof",
	"body": [
	  "feof(${1:$handle})"
	],
	"description": "feof() function"
  },
  "fflush": {
	"prefix": "phpfflush",
	"body": [
		"$filename = 'bar.txt';",

		"$file = fopen($filename, 'r+');",
		"rewind($file);",
		"fwrite($file, 'Foo');",
		"fflush($file);",
		"ftruncate($file, ftell($file));",
		"fclose($file);"
	],
	"description": "fflush() function"
  },
  "fgetc": {
	"prefix": "phpfgetc",
	"body": [
		"$fp = fopen('somefile.txt', 'r');",
		"if (!$fp) {",
			"echo 'Could not open file somefile.txt';",
		"}",
		"while (false !== ($char = fgetc($fp))) {",
			"echo '$char\n';",
		"}"
	],
	"description": "fgetc() function"
  },
  "fgetcsv": {
	"prefix": "phpfgetcsv",
	"body": [
		"$row = 1;",
		"if (($handle = fopen('test.csv', 'r')) !== FALSE) {",
			"while (($data = fgetcsv($handle, 1000, ',')) !== FALSE) {",
				"$num = count($data);",
				"echo '<p> $num fields in line $row: <br /></p>\n';",
				"$row++;",
				"for ($c=0; $c < $num; $c++) {",
					"echo $data[$c] . '<br />\n';",
				"}",
			"}",
			"fclose($handle);"
	],
	"description": "fgetcsv() function"
  },
  "fgets": {
	"prefix": "phpfgets",
	"body": [
		"$fp = @fopen('/tmp/inputfile.txt', 'r');",
		"if ($fp) {",
			"while (($buffer = fgets($fp, 4096)) !== false) {",
				"echo $buffer;",
			"}",
			"if (!feof($fp)) {",
				"echo 'Error: unexpected fgets() fail\n';",
			"}",
			"fclose($fp);",
		"}"
	],
	"description": "fgets() function"
  },
  "fgetss": {
	"prefix": "phpfgetss",
	"body": [
	"$str = <<<EOD",
	"<html><body>",
		 "<p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.</p>",
		"</body></html>",
		"Text outside of the HTML block.",
		"EOD;",
		"file_put_contents('sample.php', $str);",
		
		"$handle = @fopen('sample.php', 'r');",
		"if ($handle) {",
			"while (!feof($handle)) {",
				"$buffer = fgetss($handle, 4096);",
				"echo $buffer;",
			"}",
			"fclose($handle);"
	],
	"description": "fgetss() function"
  },
  "file": {
	"prefix": "phpfile",
	"body": [
		"$lines = file('http://www.example.com/');",

		"foreach ($lines as $line_num => $line) {",
			"echo 'Line #<b>{$line_num}</b> : ' . htmlspecialchars($line) . '<br />\n';",
		"}",
		
		"$trimmed = file('somefile.txt', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);"
	],
	"description": "file() function"
  },
  "file_exists": {
	"prefix": "phpfile_exists",
	"body": [
		"$filename = '/path/to/foo.txt';",

		"if (file_exists($filename)) {",
			"echo 'The file $filename exists';",
		"} else {",
			"echo 'The file $filename does not exist';"
	],
	"description": "file_exists() function"
  },
  "file_get_contents": {
	"prefix": "phpfile_get_contents",
	"body": [
		"$homepage = file_get_contents('http://www.example.com/');",
		"echo $homepage;"
	],
	"description": "file_get_contents() function"
  },
  "file_put_contents": {
	"prefix": "phpfile_put_contents",
	"body": [
	  
	],
	"description": "file_put_contents() function"
  },
  "fileatime": {
	"prefix": "phpfileatime",
	"body": [
		"$filename = 'somefile.txt';",
		"if (file_exists($filename)) {",
			"echo '$filename was last accessed: ' . date('F d Y H:i:s.', fileatime($filename));",
		"}"
	],
	"description": "fileatime() function"
  },
  "filectime": {
	"prefix": "phpfilectime",
	"body": [
		"$filename = 'somefile.txt';",
		"if (file_exists($filename)) {",
			"echo '$filename was last changed: ' . date('F d Y H:i:s.', filectime($filename));",
		"}"
	],
	"description": "filectime() function"
  },
  "filegroup": {
	"prefix": "phpfilegroup",
	"body": [
		"$filename = 'index.php';",
		"print_r(posix_getgrgid(filegroup($filename)));"
	],
	"description": "filegroup() function"
  },
  "fileinode": {
	"prefix": "phpfileinode",
	"body": [
		"$filename = 'index.php';",
		"if (getmyinode() == fileinode($filename)) {",
			"echo 'You are checking the current file.';",
		"}"
	],
	"description": "fileinode() function"
  },
  "filemtime": {
	"prefix": "phpfilemtime",
	"body": [
		"$filename = 'somefile.txt';",
		"if (file_exists($filename)) {",
			"echo '$filename was last modified: ' . date ('F d Y H:i:s.', filemtime($filename));",
		"}"
	],
	"description": "filemtime() function"
  },
  "fileowner": {
	"prefix": "phpfileowner",
	"body": [
		"$filename = 'index.php';",
		"print_r(posix_getpwuid(fileowner($filename)));"
	],
	"description": "fileowner() function"
  },
  "fileperms": {
	"prefix": "phpfileperms",
	"body": [
		"echo substr(sprintf('%o', fileperms('/tmp')), -4);",
		"echo substr(sprintf('%o', fileperms('/etc/passwd')), -4);"
	],
	"description": "fileperms() function"
  },
  "filesize": {
	"prefix": "phpfilesize",
	"body": [
		"$filename = 'somefile.txt';",
		"echo $filename . ': ' . filesize($filename) . ' bytes';"
	],
	"description": "filesize() function"
  },
  "filetype": {
	"prefix": "phpfiletype",
	"body": [
		"echo filetype('/etc/passwd');",
		"echo '\n';",
		"echo filetype('/etc/');"
	],
	"description": "filetype() function"
  },
  "flock": {
	"prefix": "phpflock",
	"body": [
		"$fp = fopen('/tmp/lock.txt', 'r+');",

		"if(!flock($fp, LOCK_EX | LOCK_NB)) {",
			"echo 'Unable to obtain lock';",
			"exit(-1);",
		"}"
	],
	"description": "flock() function"
  },
  "fnmatch": {
	"prefix": "phpfnmatch",
	"body": [
		"if (fnmatch('*gr[ae]y', $color)) {",
			"echo 'some form of gray ...';",
		  "}"
	],
	"description": "fnmatch() function"
  },
  "fopen": {
	"prefix": "phpfopen",
	"body": [
	  "$handle = fopen('c:\\folder\\resource.txt', 'r');"
	],
	"description": "fopen() function"
  },
  "fpassthru": {
	"prefix": "phpfpassthru",
	"body": [
		"$name = './img/ok.png';",
		"$fp = fopen($name, 'rb');",
		
		"header('Content-Type: image/png');",
		"header('Content-Length: ' . filesize($name));",
		
		"fpassthru($fp);",
		"exit;"
	],
	"description": "fpassthru() function"
  },
  "fputcsv": {
	"prefix": "phpfputcsv",
	"body": [
		"$list = array (",
		"array('aaa', 'bbb', 'ccc', 'dddd'),",
		"array('123', '456', '789'),",
		"array('aaa', 'bbb')",
	");",
	
	"$fp = fopen('file.csv', 'w');",
	
	"foreach ($list as $fields) {",
		"fputcsv($fp, $fields);",
	"}",
	
"fclose($fp);"
	],
	"description": "fputcsv() function"
  },
  "fputs": {
	"prefix": "phpfputs",
	"body": [
	  "https://www.php.net/manual/en/function.fputs.php"
	],
	"description": "fputs() function"
  },
  "fread": {
	"prefix": "phpfread",
	"body": [
		"$filename = '/usr/local/something.txt';",
		"$handle = fopen($filename, 'r');",
		"$contents = fread($handle, filesize($filename));",
		"fclose($handle);"
	],
	"description": "fread() function"
  },
  "fscanf": {
	"prefix": "phpfscanf",
	"body": [
		"$handle = fopen('users.txt', 'r');",
		"while ($userinfo = fscanf($handle, '%s\t%s\t%s\n')) {",
			"list ($name, $profession, $countrycode) = $userinfo;",
		"}",
		"fclose($handle);"
	],
	"description": "fscanf() function"
  },
  "fseek": {
	"prefix": "phpfseek",
	"body": [
		"$fp = fopen('somefile.txt', 'r');",

		"$data = fgets($fp, 4096);",
		
		"fseek($fp, 0);"
	],
	"description": "fseek() function"
  },
  "fstat": {
	"prefix": "phpfstat",
	"body": [
	  
"$fp = fopen('/etc/passwd', 'r');",

"$fstat = fstat($fp);",

"fclose($fp);",

"print_r(array_slice($fstat, 13));"
	],
	"description": "fstat() function"
  },
  "ftell": {
	"prefix": "phpftell",
	"body": [
		"$fp = fopen('/etc/passwd', 'r');",
		"$data = fgets($fp, 12);",
		
		"echo ftell($fp); // 11",
		
		"fclose($fp);"
	],
	"description": "ftell() function"
  },
  "ftruncate": {
	"prefix": "phpftruncate",
	"body": [
		"$filename = 'lorem_ipsum.txt';",

		"$handle = fopen($filename, 'r+');",
		"ftruncate($handle, rand(1, filesize($filename)));",
		"rewind($handle);",
		"echo fread($handle, filesize($filename));",
		"fclose($handle);"
	],
	"description": "ftruncate() function"
  },
  "fwrite": {
	"prefix": "phpfwrite",
	"body": [
	  "https://www.php.net/manual/en/function.fwrite.php"
	],
	"description": "fwrite() function"
  },
  "glob": {
	"prefix": "phpglob",
	"body": [
		"foreach (glob('*.txt') as $filename) {",
			"echo '$filename size ' . filesize($filename) . '\n';"
	],
	"description": "glob() function"
  },
  "is_dir": {
	"prefix": "phpis_dir",
	"body": [
		"var_dump(is_dir('a_file.txt'));",
		"var_dump(is_dir('bogus_dir/abc'));",
		
		"var_dump(is_dir('..')); //one dir up"
	],
	"description": "is_dir() function"
  },
  "is_executable": {
	"prefix": "phpis_executable",
	"body": [
		"$file = '/home/vincent/somefile.sh';",

		"if (is_executable($file)) {",
			"echo $file.' is executable';",
		"} else {",
			"echo $file.' is not executable';",
		"}"
	],
	"description": "is_executable() function"
  },
  "is_file": {
	"prefix": "phpis_file",
	"body": [
		"var_dump(is_file('a_file.txt')) . '\n';",
		"var_dump(is_file('/usr/bin/')) . '\n';"
	],
	"description": "is_file() function"
  },
  "is_link": {
	"prefix": "phpis_link",
	"body": [
		"$link = 'uploads';",

		"if (is_link($link)) {",
			"echo readlink($link);",
		"} else {",
			"symlink('uploads.php', $link);",
		"}"
	],
	"description": "is_link() function"
  },
  "is_readable": {
	"prefix": "phpis_readable",
	"body": [
		"$filename = 'test.txt';",
		"if (is_readable($filename)) {",
			"echo 'The file is readable';",
		"} else {",
			"echo 'The file is not readable';",
		"}"
	],
	"description": "is_readable() function"
  },
  "is_uploaded_file": {
	"prefix": "phpis_uploaded_file",
	"body": [
		"if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {",
			"echo 'File '. $_FILES['userfile']['name'] .' uploaded successfully.\n';",
			"echo 'Displaying contents\n';",
			"readfile($_FILES['userfile']['tmp_name']);",
		 "} else {",
			"echo 'Possible file upload attack: ';",
			"echo 'filename ''. $_FILES['userfile']['tmp_name'] . ''.';",
		" }"
	],
	"description": "is_uploaded_file() function"
  },
  "is_writable": {
	"prefix": "phpis_writable",
	"body": [
		"$filename = 'test.txt';",
		"if (is_writable($filename)) {",
			"echo 'The file is writable';",
		"} else {",
			"echo 'The file is not writable';",
		"}"
	],
	"description": "is_writable() function"
  },
  "is_writeable": {
	"prefix": "phpis_writeable",
	"body": [
	  "https://www.php.net/manual/en/function.is-writeable.php"
	],
	"description": "is_writeable() function"
  },
  "link": {
	"prefix": "phplink",
	"body": [
	 "https://www.php.net/manual/en/function.lchgrp.php"
	],
	"description": "link() function"
  },
  "linkinfo": {
	"prefix": "phplinkinfo",
	"body": [
		"$target = 'output.php';",
		"$link = 'output.html';",
		"symlink($target, $link);",
		
		"lchown($link, 8);"
	],
	"description": "linkinfo() function"
  },
  "lstat": {
	"prefix": "phplstat",
	"body": [
		"symlink('uploads.php', 'uploads');",

		"array_diff(stat('uploads'), lstat('uploads'));"
	],
	"description": "lstat() function"
  },
  "mkdir": {
	"prefix": "phpmkdir",
	"body": [
	  "mkdir('/path/to/my/dir', 0700);"
	],
	"description": "mkdir() function"
  },
  "move_uploaded_file": {
	"prefix": "phpmove_uploaded_file",
	"body": [
		"$uploads_dir = '/uploads';",
		"foreach ($_FILES['pictures']['error'] as $key => $error) {",
			"if ($error == UPLOAD_ERR_OK) {",
				"$tmp_name = $_FILES['pictures']['tmp_name'][$key];",
				"$name = basename($_FILES['pictures']['name'][$key]);",
				"move_uploaded_file($tmp_name, '$uploads_dir/$name');"
	],
	"description": "move_uploaded_file() function"
  },
  "parse_ini_file": {
	"prefix": "phpparse_ini_file",
	"body": [
		"define('BIRD', 'Dodo bird');",

		"$ini_array = parse_ini_file('sample.ini');",
	"print_r($ini_array);",
		
		"$ini_array = parse_ini_file('sample.ini', true);",
		"print_r($ini_array);"
	],
	"description": "parse_ini_file() function"
  },
  "pathinfo": {
	"prefix": "phppathinfo",
	"body": [
	  "print_r(pathinfo('/some/path/.test'));"
	],
	"description": "pathinfo() function"
  },
  "pclose": {
	"prefix": "phppclose",
	"body": [
		"$handle = popen('/bin/ls', 'r');",
		"pclose($handle);"
	],
	"description": "pclose() function"
  },
  "popen": {
	"prefix": "phppopen",
	"body": [
	  "$handle = popen('/bin/ls', 'r');"
	],
	"description": "popen() function"
  },
  "readfile": {
	"prefix": "phpreadfile",
	"body": [
		"$file = 'monkey.gif';",

		"if (file_exists($file)) {",
			"header('Content-Description: File Transfer');",
			"header('Content-Type: application/octet-stream');",
			"header('Content-Disposition: attachment; filename=''.basename($file).''');",
			"header('Expires: 0');",
			"header('Cache-Control: must-revalidate');",
			"header('Pragma: public');",
			"header('Content-Length: ' . filesize($file));",
			"readfile($file);",
			"exit;"
	],
	"description": "readfile() function"
  },
  "readlink": {
	"prefix": "phpreadlink",
	"body": [
	  "echo readlink('/vmlinuz');"
	],
	"description": "readlink() function"
  },
  "realpath": {
	"prefix": "phprealpath",
	"body": [
		"chdir('/var/www/');",
		"echo realpath('./../../etc/passwd') . PHP_EOL;",
		
		"echo realpath('/tmp/') . PHP_EOL;"
	],
	"description": "realpath() function"
  },
  "rename": {
	"prefix": "phprename",
	"body": [
	  "rename('/tmp/tmp_file.txt', '/home/user/login/docs/my_file.txt');"
	],
	"description": "rename() function"
  },
  "rewind": {
	"prefix": "phprewind",
	"body": [
		"$handle = fopen('output.txt', 'r+');",

	"fwrite($handle, 'Really long sentence.');",
		"rewind($handle);",
		"fwrite($handle, 'Foo');",
		"rewind($handle);",
		
		"echo fread($handle, filesize('output.txt'));",
		
		"fclose($handle);"
	],
	"description": "rewind() function"
  },
  "rmdir": {
	"prefix": "phprmdir",
	"body": [
		"if (!is_dir('examples')) {",
			"mkdir('examples');",
		"}",
		
		"rmdir('examples');"
	],
	"description": "rmdir() function"
  },
  "set_file_buffer": {
	"prefix": "phpset_file_buffer",
	"body": [
	  "https://www.php.net/manual/en/function.set-file-buffer.php"
	],
	"description": "set_file_buffer() function"
  },
  "stat": {
	"prefix": "phpstat",
	"body": [
		"$stat = stat('C:\"php\"php.exe');",

	
		"echo 'Access time: ' . $stat['atime'];",
		
		
		"echo 'Modification time: ' . $stat['mtime'];",
		
		"echo 'Device number: ' . $stat['dev'];"
	],
	"description": "stat() function"
  },
  "symlink": {
	"prefix": "phpsymlink",
	"body": [
		"$target = 'uploads.php';",
		"$link = 'uploads';",
		"symlink($target, $link);",
		
		"echo readlink($link);"
	],
	"description": "symlink() function"
  },
  "tempnam": {
	"prefix": "phptempnam",
	"body": [
		"$tmpfname = tempnam('/tmp', 'FOO');",

		"$handle = fopen($tmpfname, 'w');",
		"fwrite($handle, 'writing to tempfile');",
		"fclose($handle);",
		
		
		"unlink($tmpfname);"
	],
	"description": "tempnam() function"
  },
  "tmpfile": {
	"prefix": "phptmpfile",
	"body": [
		"$temp = tmpfile();",
		"fwrite($temp, 'writing to tempfile');",
		"fseek($temp, 0);",
		"echo fread($temp, 1024);",
		"fclose($temp); // this removes the file"
	],
	"description": "tmpfile() function"
  },
  "touch": {
	"prefix": "phptouch",
	"body": [
		"if (touch($filename)) {",
			"echo $filename . ' modification time has been changed to present time';",
		"} else {",
			"echo 'Sorry, could not change modification time of ' . $filename;",
		"}"
	],
	"description": "touch() function"
  },
  "umask": {
	"prefix": "phpumask",
	"body": [
		"$old = umask(0);",
		"chmod('/path/some_dir/some_file.txt', 0755);",
		"umask($old);",
		
		"if ($old != umask()) {",
			"die('An error occurred while changing back the umask');",
		"}"
	],
	"description": "umask() function"
  },
  "unlink": {
	"prefix": "phpunlink",
	"body": [
		"$fh = fopen('test.html', 'a');",
		"fwrite($fh, '<h1>Hello world!</h1>');",
		"fclose($fh);",
		
		"unlink('test.html');"
	],
	"description": "unlink() function"
  },
  "MySQLi Class": {
    "prefix": "php_mysqli_class",
    "body": [
      "mysqli::affected_rows",
      "mysqli::autocommit(mode)",
      "mysqli::change_user(user, password, database)",
      "mysqli::character_set_name()",
      "mysqli::client_info",
      "mysqli::client_version",
      "mysqli::close()",
      "mysqli::commit()",
      "mysqli::connect_errno",
      "mysqli::connect_error",
      "mysqli::__construct([host = 'localhost'], [username = 'user'], [passwd = 'password'], [dbname = 'database'], [port = 3306], [socket = null])",
      "mysqli::debug([message])",
      "mysqli::dump_debug_info()",
      "mysqli::errno",
      "mysqli::error_list",
      "mysqli::error",
      "mysqli::field_count",
      "mysqli::get_charset()",
      "mysqli::get_client_info()",
      "mysqli_get_client_stats()",
      "mysqli_get_client_version()",
      "mysqli::get_connection_stats()",
      "mysqli::host_info",
      "mysqli::protocol_version",
      "mysqli::server_info",
      "mysqli::server_version",
      "mysqli::get_warnings()",
      "mysqli::info",
      "mysqli::init()",
      "mysqli::insert_id",
      "mysqli::kill(process_id)",
      "mysqli::more_results()",
      "mysqli::multi_query(query)",
      "mysqli::next_result()",
      "mysqli::options(option, value)",
      "mysqli::ping()",
      "mysqli::poll(&...read, &...error, &...reject, sec, [usec])",
      "mysqli::prepare(query)",
      "mysqli::query(query, [resultmode = MYSQLI_STORE_RESULT])",
      "mysqli::real_connect([host = 'localhost'], [username = 'user'], [passwd = 'password'], [dbname = 'database'], [port = 3306], [socket = null], [flags = 0])",
      "mysqli::real_escape_string(escapestr)",
      "mysqli::real_query(query)",
      "mysqli::reap_async_query()",
      "mysqli::refresh([options = MYSQLI_REFRESH_GRANT | MYSQLI_REFRESH_LOG | MYSQLI_REFRESH_STATUS])",
      "mysqli::rollback([flags = MYSQLI_TRANS_COR_AND_CHAIN])",
      "mysqli::rpl_query_type()",
      "mysqli::select_db(dbname)",
      "mysqli::send_query(query)",
      "mysqli::set_charset(charset)",
      "mysqli::set_local_infile_default()",
      "mysqli::set_local_infile_handler(link, read_func)",
      "mysqli::sqlstate",
      "mysqli::ssl_set(key, cert, ca, capath, cipher)",
      "mysqli::stat()",
      "mysqli::stmt_init()",
      "mysqli::store_result([mode = MYSQLI_STORE_RESULT])",
      "mysqli::thread_id",
      "mysqli::thread_safe()",
      "mysqli::use_result()",
      "mysqli::warning_count"
    ],
    "description": "List of MySQLi class methods and properties"
  },"mysqli::affected_rows": {
	"prefix": "phpmysqli::affected_rows",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",

"$mysqli->query('CREATE TEMPORARY TABLE myCountry LIKE Country');",

"$query = 'INSERT INTO myCountry SELECT * FROM Country WHERE Code LIKE ?';",

"$stmt = $mysqli->prepare($query);",

"$code = 'A%';",
"$stmt->bind_param('s', $code);",

"$stmt->execute();",

"printf('Rows inserted: %d\n', $stmt->affected_rows);"
	],
	"description": "mysqli::affected_rows property"
  },
  "mysqli::autocommit": {
	"prefix": "phpmysqli::autocommit",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.attr-get.php"
	],
	"description": "mysqli::autocommit() method"
  },
  "mysqli::change_user": {
	"prefix": "phpmysqli::change_user",
	"body": [
	 
	],
	"description": "mysqli::change_user() method"
  },
  "mysqli::character_set_name": {
	"prefix": "phpmysqli::character_set_name",
	"body": [
	  "$${1:charset} = ${2:mysqli}::character_set_name();"
	],
	"description": "mysqli::character_set_name() method"
  },
  "mysqli::client_info": {
	"prefix": "phpmysqli::client_info",
	"body": [
	  "$${1:client_info} = ${2:mysqli}::client_info;"
	],
	"description": "mysqli::client_info property"
  },
  "mysqli::client_version": {
	"prefix": "phpmysqli::client_version",
	"body": [
	  "$${1:client_version} = ${2:mysqli}::client_version;"
	],
	"description": "mysqli::client_version property"
  },
  "mysqli::close": {
	"prefix": "phpmysqli::close",
	"body": [
	  "${1:mysqli}::close();"
	],
	"description": "mysqli::close() method"
  },
  "mysqli::commit": {
	"prefix": "phpmysqli::commit",
	"body": [
	  "${1:mysqli}::commit();"
	],
	"description": "mysqli::commit() method"
  },
  "mysqli::$connect_errno": {
	"prefix": "phpmysqli::$connect_errno",
	"body": [
	  "$${1:connect_errno} = ${2:mysqli}::$connect_errno;"
	],
	"description": "mysqli::$connect_errno property"
  },
  "mysqli::$connect_error": {
	"prefix": "phpmysqli::$connect_error",
	"body": [
	  "$${1:connect_error} = ${2:mysqli}::$connect_error;"
	],
	"description": "mysqli::$connect_error property"
  },
  "mysqli::__construct": {
	"prefix": "phpmysqli::__construct",
	"body": [
	  "${1:mysqli}::__construct(${2:'host'}, ${3:'user'}, ${4:'password'}, ${5:'database'}, ${6:port}, ${7:socket});"
	],
	"description": "mysqli::__construct() constructor"
  },
  "mysqli::debug": {
	"prefix": "phpmysqli::debug",
	"body": [
	  "${1:mysqli}::debug(${2:'debug'});"
	],
	"description": "mysqli::debug() method"
  },
  "mysqli::dump_debug_info": {
	"prefix": "phpmysqli::dump_debug_info",
	"body": [
	  "${1:mysqli}::dump_debug_info();"
	],
	"description": "mysqli::dump_debug_info() method"
  },
  "mysqli::$errno": {
	"prefix": "phpmysqli::$errno",
	"body": [
	  "$${1:errno} = ${2:mysqli}::$errno;"
	],
	"description": "mysqli::$errno property"
  },
  "mysqli::$error_list": {
	"prefix": "phpmysqli::$error_list",
	"body": [
	  "$${1:error_list} = ${2:mysqli}::$error_list;"
	],
	"description": "mysqli::$error_list property"
  },
  "mysqli::$error": {
	"prefix": "phpmysqli::$error",
	"body": [
	  "$${1:error} = ${2:mysqli}::$error;"
	],
	"description": "mysqli::$error property"
  },
  "mysqli::$field_count": {
	"prefix": "phpmysqli::$field_count",
	"body": [
	  "$${1:field_count} = ${2:mysqli}::$field_count;"
	],
	"description": "mysqli::$field_count property"
  },
  "mysqli::get_charset": {
	"prefix": "phpmysqli::get_charset",
	"body": [
	  "${1:charset} = ${2:mysqli}::get_charset();"
	],
	"description": "mysqli::get_charset() method"
  },
  "mysqli::get_client_info": {
	"prefix": "phpmysqli::get_client_info",
	"body": [
	  "${1:client_info} = ${2:mysqli}::get_client_info();"
	],
	"description": "mysqli::get_client_info() method"
  },
  "mysqli_get_client_stats": {
	"prefix": "phpmysqli_get_client_stats",
	"body": [
	  "$${1:client_stats} = mysqli_get_client_stats();"
	],
	"description": "mysqli_get_client_stats() function"
  },
  "mysqli_get_client_version": {
	"prefix": "phpmysqli_get_client_version",
	"body": [
	  "$${1:client_version} = mysqli_get_client_version();"
	],
	"description": "mysqli_get_client_version() function"
  },
 
  "mysqli::$host_info": {
	"prefix": "phpmysqli::$host_info",
	"body": [
	  "$${1:host_info} = ${2:mysqli}::$host_info;"
	],
	"description": "mysqli::$host_info property"
  },
  "mysqli::$protocol_version": {
	"prefix": "phpmysqli::$protocol_version",
	"body": [
	  "$${1:protocol_version} = ${2:mysqli}::$protocol_version;"
	],
	"description": "mysqli::$protocol_version property"
  },
  "mysqli::$server_info": {
	"prefix": "phpmysqli::$server_info",
	"body": [
	  "$${1:server_info} = ${2:mysqli}::$server_info;"
	],
	"description": "mysqli::$server_info property"
  },
  "mysqli::$server_version": {
	"prefix": "phpmysqli::$server_version",
	"body": [
	  "$${1:server_version} = ${2:mysqli}::$server_version;"
	],
	"description": "mysqli::$server_version property"
  },
  "mysqli::get_warnings": {
	"prefix": "phpmysqli::get_warnings",
	"body": [
	  "${1:warnings} = ${2:mysqli}::get_warnings();"
	],
	"description": "mysqli::get_warnings() method"
  },
  "mysqli::$info": {
	"prefix": "phpmysqli::$info",
	"body": [
	  "$${1:info} = ${2:mysqli}::$info;"
	],
	"description": "mysqli::$info property"
  },
  "mysqli::init": {
	"prefix": "phpmysqli::init",
	"body": [
	  "$${1:init} = ${2:mysqli}::init();"
	],
	"description": "mysqli::init() method"
  },
  "mysqli::$insert_id": {
	"prefix": "phpmysqli::$insert_id",
	"body": [
	  "$${1:insert_id} = ${2:mysqli}::$insert_id;"
	],
	"description": "mysqli::$insert_id property"
  },
  "mysqli::kill": {
	"prefix": "phpmysqli::kill",
	"body": [
	  "${1:success} = ${2:mysqli}::kill(${3:process_id});"
	],
	"description": "mysqli::kill() method"
  },
  "mysqli::more_results": {
	"prefix": "phpmysqli::more_results",
	"body": [
	  "${1:more_results} = ${2:mysqli}::more_results();"
	],
	"description": "mysqli::more_results() method"
  },
  "mysqli::multi_query": {
	"prefix": "phpmysqli::multi_query",
	"body": [
	  "${1:success} = ${2:mysqli}::multi_query(${3:query});"
	],
	"description": "mysqli::multi_query() method"
  },
  "mysqli::next_result": {
	"prefix": "phpmysqli::next_result",
	"body": [
	  "${1:next_result} = ${2:mysqli}::next_result();"
	],
	"description": "mysqli::next_result() method"
  },
  "mysqli::options": {
	"prefix": "phpmysqli::options",
	"body": [
	  "${1:success} = ${2:mysqli}::options(${3:option}, ${4:value});"
	],
	"description": "mysqli::options() method"
  },
  "mysqli::ping": {
	"prefix": "phpmysqli::ping",
	"body": [
	  "${1:success} = ${2:mysqli}::ping();"
	],
	"description": "mysqli::ping() method"
  },
  "mysqli::poll": {
	"prefix": "phpmysqli::poll",
	"body": [
	  "${1:success} = ${2:mysqli}::poll(${3:read}, ${4:error}, ${5:reject}, ${6:sec}, ${7:usec});"
	],
	"description": "mysqli::poll() method"
  },
  "mysqli::prepare": {
	"prefix": "phpmysqli::prepare",
	"body": [
	  "$${1:stmt} = ${2:mysqli}::prepare(${3:query});"
	],
	"description": "mysqli::prepare() method"
  },
  "mysqli::query": {
	"prefix": "phpmysqli::query",
	"body": [
	  "$${1:result} = ${2:mysqli}::query(${3:query});"
	],
	"description": "mysqli::query() method"
  },
  "mysqli::real_connect": {
	"prefix": "phpmysqli::real_connect",
	"body": [
	  "${1:success} = ${2:mysqli}::real_connect(${3:host}, ${4:username}, ${5:passwd}, ${6:dbname}, ${7:port}, ${8:socket});"
	],
	"description": "mysqli::real_connect() method"
  },
  "mysqli::real_escape_string": {
	"prefix": "phpmysqli::real_escape_string",
	"body": [
	  "$${1:escaped_string} = ${2:mysqli}::real_escape_string(${3:unescaped_string});"
	],
	"description": "mysqli::real_escape_string() method"
  },
  "mysqli::real_query": {
	"prefix": "phpmysqli::real_query",
	"body": [
	  "${1:success} = ${2:mysqli}::real_query(${3:query});"
	],
	"description": "mysqli::real_query() method"
  },
  "mysqli::reap_async_query": {
	"prefix": "phpmysqli::reap_async_query",
	"body": [
	  "$${1:result} = ${2:mysqli}::reap_async_query();"
	],
	"description": "mysqli::reap_async_query() method"
  },
  "mysqli::refresh": {
	"prefix": "phpmysqli::refresh",
	"body": [
	  "${1:success} = ${2:mysqli}::refresh(${3:options});"
	],
	"description": "mysqli::refresh() method"
  },
  "mysqli::rollback": {
	"prefix": "phpmysqli::rollback",
	"body": [
	  "${1:success} = ${2:mysqli}::rollback(${3:flags}, ${4:name});"
	],
	"description": "mysqli::rollback() method"
  },
  "mysqli::rpl_query_type": {
	"prefix": "phpmysqli::rpl_query_type",
	"body": [
	  "$${1:type} = ${2:mysqli}::rpl_query_type(${3:query_type});"
	],
	"description": "mysqli::rpl_query_type() method"
  },
  "mysqli::select_db": {
	"prefix": "phpmysqli::select_db",
	"body": [
	  "${1:success} = ${2:mysqli}::select_db(${3:dbname});"
	],
	"description": "mysqli::select_db() method"
  },
  "mysqli::send_query": {
	"prefix": "phpmysqli::send_query",
	"body": [
	  "${1:success} = ${2:mysqli}::send_query(${3:query});"
	],
	"description": "mysqli::send_query() method"
  },
  "mysqli::set_charset": {
	"prefix": "phpmysqli::set_charset",
	"body": [
	  "${1:success} = ${2:mysqli}::set_charset(${3:charset});"
	],
	"description": "mysqli::set_charset() method"
  },
  "mysqli::set_local_infile_default": {
	"prefix": "phpmysqli::set_local_infile_default",
	"body": [
	  "${1:success} = ${2:mysqli}::set_local_infile_default();"
	],
	"description": "mysqli::set_local_infile_default() method"
  },
  "mysqli::set_local_infile_handler": {
	"prefix": "phpmysqli::set_local_infile_handler",
	"body": [
	  "${1:success} = ${2:mysqli}::set_local_infile_handler(${3:read_func});"
	],
	"description": "mysqli::set_local_infile_handler() method"
  },
  "mysqli::$sqlstate": {
	"prefix": "phpmysqli::$sqlstate",
	"body": [
	  "$${1:sqlstate} = ${2:mysqli}::$sqlstate;"
	],
	"description": "mysqli::$sqlstate property"
  },
  "mysqli::ssl_set": {
	"prefix": "phpmysqli::ssl_set",
	"body": [
	  "${1:success} = ${2:mysqli}::ssl_set(${3:key}, ${4:cert}, ${5:ca}, ${6:capath}, ${7:cipher});"
	],
	"description": "mysqli::ssl_set() method"
  },
  "mysqli::stat": {
	"prefix": "phpmysqli::stat",
	"body": [
	  "$${1:info} = ${2:mysqli}::stat();"
	],
	"description": "mysqli::stat() method"
  },
  "mysqli::stmt_init": {
	"prefix": "phpmysqli::stmt_init",
	"body": [
	  "$${1:stmt} = ${2:mysqli}::stmt_init();"
	],
	"description": "mysqli::stmt_init() method"
  },
  "mysqli::store_result": {
	"prefix": "phpmysqli::store_result",
	"body": [
	  "$${1:result} = ${2:mysqli}::store_result();"
	],
	"description": "mysqli::store_result() method"
  },
  "mysqli::$thread_id": {
	"prefix": "phpmysqli::$thread_id",
	"body": [
	  "$${1:thread_id} = ${2:mysqli}::$thread_id;"
	],
	"description": "mysqli::$thread_id property"
  },
  "mysqli::thread_safe": {
	"prefix": "phpmysqli::thread_safe",
	"body": [
	  "$${1:safe} = ${2:mysqli}::thread_safe();"
	],
	"description": "mysqli::thread_safe() method"
  },
  "mysqli::use_result": {
	"prefix": "phpmysqli::use_result",
	"body": [
	  "$${1:result} = ${2:mysqli}::use_result();"
	],
	"description": "mysqli::use_result() method"
  },
  "mysqli::$warning_count": {
	"prefix": "phpmysqli::$warning_count",
	"body": [
	  "$${1:count} = ${2:mysqli}::$warning_count;"
	],
	"description": "phpmysqli::$warning_count property"
  },

  "MySQLi Stmt Class": {
    "prefix": "php_mysqli_stmt_class",
    "body": [
      "mysqli_stmt::affected_rows",
      "mysqli_stmt::attr_get(attr)",
      "mysqli_stmt::attr_set(attr, mode)",
      "mysqli_stmt::bind_param(types, &...vars)",
      "mysqli_stmt::bind_result(&...vars)",
      "mysqli_stmt::close()",
      "mysqli_stmt::data_seek(offset)",
      "mysqli_stmt::errno",
      "mysqli_stmt::error_list",
      "mysqli_stmt::error",
      "mysqli_stmt::execute()",
      "mysqli_stmt::fetch()",
      "mysqli_stmt::field_count",
      "mysqli_stmt::free_result()",
      "mysqli_stmt::get_result()",
      "mysqli_stmt::get_warnings()",
      "mysqli_stmt::insert_id",
      "mysqli_stmt::more_results()",
      "mysqli_stmt::next_result()",
      "mysqli_stmt::num_rows",
      "mysqli_stmt::param_count",
      "mysqli_stmt::prepare(query)",
      "mysqli_stmt::reset()",
      "mysqli_stmt::result_metadata()",
      "mysqli_stmt::send_long_data(param_num, data)",
      "mysqli_stmt::sqlstate",
      "mysqli_stmt::store_result()"
    ],
    "description": "List of MySQLi Stmt class methods and properties"
  },
  "mysqli_stmt::$affected_rows": {
	"prefix": "phpmysqli_stmt::$affected_rows",
	"body": [
	 "https://www.php.net/manual/en/mysqli-stmt.affected-rows.php"
	],
	"description": "mysqli_stmt::$affected_rows property"
  },
  "mysqli_stmt::attr_get": {
	"prefix": "phpmysqli_stmt::attr_get",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.attr-get.php"
	],
	"description": "mysqli_stmt::attr_get() method"
  },
  "mysqli_stmt::attr_set": {
	"prefix": "phpmysqli_stmt::attr_set",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.attr-set.php"
	],
	"description": "mysqli_stmt::attr_set() method"
  },
  "mysqli_stmt::bind_param": {
	"prefix": "phpmysqli_stmt::bind_param",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$stmt = $mysqli->prepare('INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)');",
		"$stmt->bind_param('sssd', $code, $language, $official, $percent);",
		
		"$code = 'DEU';",
		"$language = 'Bavarian';",
		"$official = 'F';",
		"$percent = 11.2;",
		
		"$stmt->execute();",
		
		"printf('%d row inserted.\n', $stmt->affected_rows);",
		
		"$mysqli->query('DELETE FROM CountryLanguage WHERE Language='Bavarian'');",
		"printf('%d row deleted.\n', $mysqli->affected_rows);"
	],
	"description": "mysqli_stmt::bind_param() method"
  },
  "mysqli_stmt::bind_result": {
	"prefix": "phpmysqli_stmt::bind_result",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$stmt = $mysqli->prepare('SELECT Code, Name FROM Country ORDER BY Name LIMIT 5');",
		"$stmt->execute();",
		
		"$stmt->bind_result($col1, $col2);",
		
		"while ($stmt->fetch()) {",
			"printf('%s %s\n', $col1, $col2);"
	],
	"description": "mysqli_stmt::bind_result() method"
  },
  "mysqli_stmt::close": {
	"prefix": "phpmysqli_stmt::close",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.close.php"
	],
	"description": "mysqli_stmt::close() method"
  },
  "mysqli_stmt::data_seek": {
	"prefix": "phpmysqli_stmt::data_seek",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY Name';",
		"$stmt = $mysqli->prepare($query);",
		"$stmt->execute();",
		
		"$stmt->bind_result($name, $code);",
		
		"$stmt->store_result();",
		
		"$stmt->data_seek(399);",
		
		"$stmt->fetch();",
		
		"printf('City: %s  Countrycode: %s\n', $name, $code);"
	],
	"description": "mysqli_stmt::data_seek() method"
  },
  "mysqli_stmt::$errno": {
	"prefix": "phpmysqli_stmt::$errno",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.errno.php"
	],
	"description": "mysqli_stmt::$errno property"
  },
  "mysqli_stmt::$error_list": {
	"prefix": "phpmysqli_stmt::$error_list",
	"body": [
		"mysqli_query($link, 'CREATE TABLE myCountry LIKE Country');",
		"mysqli_query($link, 'INSERT INTO myCountry SELECT * FROM Country');",
		
		
		"$query = 'SELECT Name, Code FROM myCountry ORDER BY Name';",
		"if ($stmt = mysqli_prepare($link, $query)) {",
		
			"mysqli_query($link, 'DROP TABLE myCountry');",
		
			"mysqli_stmt_execute($stmt);",
			
			"echo 'Error:\n';",
			"print_r(mysql_stmt_error_list($stmt));",
		
			"mysqli_stmt_close($stmt);",
		"}",
		
		"mysqli_close($link);"
	],
	"description": "mysqli_stmt::$error_list property"
  },
  "mysqli_stmt::$error": {
	"prefix": "phpmysqli_stmt::$error",
	"body": [
		"mysqli_query($link, 'INSERT INTO myCountry SELECT * FROM Country');",


		"$query = 'SELECT Name, Code FROM myCountry ORDER BY Name';",
		"if ($stmt = mysqli_prepare($link, $query)) {",
		
			"mysqli_query($link, 'DROP TABLE myCountry');",
		
			"mysqli_stmt_execute($stmt);",
		
			"printf('Error: %s.\n', mysqli_stmt_error($stmt));",
		
			"mysqli_stmt_close($stmt);",
		"}",
		
		"mysqli_close($link);"
	],
	"description": "mysqli_stmt::$error property"
  },
  "mysqli_stmt::execute": {
	"prefix": "phpmysqli_stmt::execute",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.execute.php"
	],
	"description": "mysqli_stmt::execute() method"
  },
  "mysqli_stmt::fetch": {
	"prefix": "phpmysqli_stmt::fetch",
	"body": [
		"$link = mysqli_connect('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
			"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5';",
		
		"if ($stmt = mysqli_prepare($link, $query)) {",
		
			"mysqli_stmt_execute($stmt);",
		
			"mysqli_stmt_bind_result($stmt, $name, $code);",
		
			"while (mysqli_stmt_fetch($stmt)) {",
				"printf ('%s (%s)\n', $name, $code);",
			"}",
		
			"mysqli_stmt_close($stmt);",
		"}",
		
		"mysqli_close($link);"
	],
	"description": "mysqli_stmt::fetch() method"
  },
  "mysqli_stmt::$field_count": {
	"prefix": "phpmysqli_stmt::$field_count",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$code = 'FR';",
		
		"$stmt = $mysqli->prepare('SELECT Name FROM Country WHERE Code=?');",
		"$stmt->bind_param('s', $code);",
		"$stmt->execute();",
		"$row = $stmt->get_result()->fetch_row();",
		"for ($i = 0; $i < $stmt->field_count; $i++) {",
			"printf('Value of column number %d is %s', $i, $row[$i]);"
	],
	"description": "mysqli_stmt::$field_count property"
  },
  "mysqli_stmt::free_result": {
	"prefix": "phpmysqli_stmt::free_result",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.free-result.php"
	],
	"description": "mysqli_stmt::free_result() method"
  },
  "mysqli_stmt::get_result": {
	"prefix": "phpmysqli_stmt::get_result",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, Population, Continent FROM Country WHERE Continent=? ORDER BY Name LIMIT 1';",
		
		"$stmt = $mysqli->prepare($query);",
		"$stmt->bind_param('s', $continent);",
		
		"$continentList = array('Europe', 'Africa', 'Asia', 'North America');",
		
		"foreach ($continentList as $continent) {",
			"$stmt->execute();",
			"$result = $stmt->get_result();",
			"while ($row = $result->fetch_array(MYSQLI_NUM)) {",
				"foreach ($row as $r) {",
					"print '$r ';",
				"}",
				"print '\n';"
	],
	"description": "mysqli_stmt::get_result() method"
  },
  "mysqli_stmt::get_warnings": {
	"prefix": "phpmysqli_stmt::get_warnings",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.get-warnings.php"
	],
	"description": "mysqli_stmt::get_warnings() method"
  },
  "mysqli_stmt::$insert_id": {
	"prefix": "phpmysqli_stmt::$insert_id",
	"body": [
	 "https://www.php.net/manual/en/mysqli-stmt.insert-id.php"
	],
	"description": "mysqli_stmt::$insert_id property"
  },
  "mysqli_stmt::more_results": {
	"prefix": "phpmysqli_stmt::more_results",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.more-results.php"
	],
	"description": "mysqli_stmt::more_results() method"
  },
  "mysqli_stmt::next_result": {
	"prefix": "phpmysqli_stmt::next_result",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.next-result.php"
	],
	"description": "mysqli_stmt::next_result() method"
  },
  "mysqli_stmt::$num_rows": {
	"prefix": "phpmysqli_stmt::$num_rows",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20';",
		"$stmt = $mysqli->prepare($query);",
		"$stmt->execute();",
		
		"$stmt->store_result();",
		
		"printf('Number of rows: %d.\n', $stmt->num_rows);"
	],
	"description": "mysqli_stmt::$num_rows property"
  },
  "mysqli_stmt::$param_count": {
	"prefix": "phpmysqli_stmt::$param_count",
	"body": [
		"$link = mysqli_connect('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
			"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"if ($stmt = mysqli_prepare($link, 'SELECT Name FROM Country WHERE Name=? OR Code=?')) {",
		
			"$marker = mysqli_stmt_param_count($stmt);",
			"printf('Statement has %d markers.\n', $marker);",
		
			"mysqli_stmt_close($stmt);",
		"}",
		
		"mysqli_close($link);"
	],
	"description": "mysqli_stmt::$param_count property"
  },
  "mysqli_stmt::prepare": {
	"prefix": "phpmysqli_stmt::prepare",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$city = 'Amersfoort';",
		
		"$stmt = $mysqli->stmt_init();",
		"$stmt->prepare('SELECT District FROM City WHERE Name=?');",
		
		"$stmt->bind_param('s', $city);",
		
		"$stmt->execute();",
		
		"$stmt->bind_result($district);",
		
		"$stmt->fetch();",
		
		"printf('%s is in district %s\n', $city, $district);"
	],
	"description": "mysqli_stmt::prepare() method"
  },
  "mysqli_stmt::reset": {
	"prefix": "phpmysqli_stmt::reset",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.reset.php"
	],
	"description": "mysqli_stmt::reset() method"
  },
  "mysqli_stmt::result_metadata": {
	"prefix": "phpmysqli_stmt::result_metadata",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.result-metadata.php"
	],
	"description": "mysqli_stmt::result_metadata() method"
  },
  "mysqli_stmt::send_long_data": {
	"prefix": "phpmysqli_stmt::send_long_data",
	"body": [
		"$stmt = $mysqli->prepare('INSERT INTO messages (message) VALUES (?)');",
		"$null = NULL;",
		"$stmt->bind_param('b', $null);",
		"$fp = fopen('messages.txt', 'r');",
		"while (!feof($fp)) {",
			"$stmt->send_long_data(0, fread($fp, 8192));",
		"}",
		"fclose($fp);",
		"$stmt->execute();"
		
	],
	"description": "mysqli_stmt::send_long_data() method"
  },
  "mysqli_stmt::$sqlstate": {
	"prefix": "phpmysqli_stmt::$sqlstate",
	"body": [
	  "https://www.php.net/manual/en/mysqli-stmt.sqlstate.php"
	],
	"description": "mysqli_stmt::$sqlstate property"
  },
  "mysqli_stmt::store_result": {
	"prefix": "phpmysqli_stmt::store_result",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20';",
		"$stmt = $mysqli->prepare($query);",
		"$stmt->execute();",
		
		"$stmt->store_result();",
		
		"printf('Number of rows: %d.\n', $stmt->num_rows);"
	],
	"description": "mysqli_stmt::store_result() method"
  },

  "MySQLi Result Class": {
    "prefix": "php_mysqli_result_class",
    "body": [
      "mysqli_result::current_field",
      "mysqli_result::data_seek(offset)",
      "mysqli_result::fetch_all([resulttype = MYSQLI_NUM])",
      "mysqli_result::fetch_array([resulttype = MYSQLI_BOTH])",
      "mysqli_result::fetch_assoc()",
      "mysqli_result::fetch_field_direct(fieldnr)",
      "mysqli_result::fetch_field()",
      "mysqli_result::fetch_fields()",
      "mysqli_result::fetch_object([class_name], [params])",
      "mysqli_result::fetch_row()",
      "mysqli_result::field_count",
      "mysqli_result::field_seek(fieldnr)",
      "mysqli_result::free()",
      "mysqli_result::lengths",
      "mysqli_result::num_rows"
    ],
    "description": "List of MySQLi Result class methods and properties"
  },
  "mysqli_result::$current_field": {
	"prefix": "phpmysqli_result::$current_field",
	"body": [
	  "https://www.php.net/manual/en/mysqli-result.current-field.php"
	],
	"description": "mysqli_result::$current_field property"
  },
  "mysqli_result::data_seek": {
	"prefix": "phpmysqli_result::data_seek",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY Name';",
		"$result = $mysqli->query($query);",
		
		"$result->data_seek(400);",
		
		"$row = $result->fetch_row();",
		
		"printf('City: %s  Countrycode: %s\n', $row[0], $row[1]);"
	],
	"description": "mysqli_result::data_seek() method"
  },
  "mysqli_result::fetch_all": {
	"prefix": "phpmysqli_result::fetch_all",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$result = $mysqli->query('SELECT Name, CountryCode FROM City ORDER BY ID LIMIT 3');",
		
		"$rows = $result->fetch_all(MYSQLI_ASSOC);",
		"foreach ($rows as $row) {",
			"printf('%s (%s)\n', $row['Name'], $row['CountryCode']);"
	],
	"description": "mysqli_result::fetch_all() method"
  },
  "mysqli_result::fetch_array": {
	"prefix": "phpmysqli_result::fetch_array",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY ID LIMIT 3';",
		"$result = $mysqli->query($query);",
		
		"$row = $result->fetch_array(MYSQLI_NUM);",
		"printf('%s (%s)\n', $row[0], $row[1]);",
		
		"$row = $result->fetch_array(MYSQLI_ASSOC);",
		"printf('%s (%s)\n', $row['Name'], $row['CountryCode']);",
		
		"$row = $result->fetch_array(MYSQLI_BOTH);",
		"printf('%s (%s)\n', $row[0], $row['CountryCode']);"
	],
	"description": "mysqli_result::fetch_array() method"
  },
  "mysqli_result::fetch_assoc": {
	"prefix": "phpmysqli_result::fetch_assoc",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY ID DESC';",
		
		"$result = $mysqli->query($query);",
		
		"while ($row = $result->fetch_assoc()) {",
			"printf('%s (%s)\n', $row['Name'], $row['CountryCode']);"
	],
	"description": "mysqli_result::fetch_assoc() method"
  },
  "mysqli_result::fetch_field_direct": {
	"prefix": "phpmysqli_result::fetch_field_direct",
	"body": [
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
			"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"$query = 'SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5';",
		
		"if ($result = $mysqli->query($query)) {",
		
			"$finfo = $result->fetch_field_direct(1);",
		
			"printf('Name:     %s\n', $finfo->name);",
			"printf('Table:    %s\n', $finfo->table);",
			"printf('max. Len: %d\n', $finfo->max_length);",
			"printf('Flags:    %d\n', $finfo->flags);",
			"printf('Type:     %d\n', $finfo->type);",
		
			"$result->close();",
		"}",
		
		"$mysqli->close();"
	],
	"description": "mysqli_result::fetch_field_direct() method"
  },
  "mysqli_result::fetch_field": {
	"prefix": "phpmysqli_result::fetch_field",
	"body": [
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
			"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"$query = 'SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5';",
		
		"if ($result = $mysqli->query($query)) {",
		
			"while ($finfo = $result->fetch_field()) {",
		
				"printf('Name:     %s\n', $finfo->name);",
				"printf('Table:    %s\n', $finfo->table);",
				"printf('max. Len: %d\n', $finfo->max_length);",
				"printf('Flags:    %d\n', $finfo->flags);",
				"printf('Type:     %d\n\n', $finfo->type);",
			"}",
			"$result->close();",
		"}",
		
		"$mysqli->close();"
	],
	"description": "mysqli_result::fetch_field() method"
  },
  "mysqli_result::fetch_fields": {
	"prefix": "phpmysqli_result::fetch_fields",
	"body": [
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
		"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"$query = 'SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5';",
		
		"if ($result = $mysqli->query($query)) {",
		
			"while ($finfo = $result->fetch_field()) {",
		
				"printf('Name:     %s\n', $finfo->name);",
				"printf('Table:    %s\n', $finfo->table);",
				"printf('max. Len: %d\n', $finfo->max_length);",
				"printf('Flags:    %d\n', $finfo->flags);",
				"printf('Type:     %d\n\n', $finfo->type);",
			"}",
			"$result->close();",
		"}",
		
		"$mysqli->close();"
	],
	"description": "mysqli_result::fetch_fields() method"
  },
  "mysqli_result::fetch_object": {
	"prefix": "phpmysqli_result::fetch_object",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli(localhost, my_user, my_password, world);",
		 
		"$query = SELECT Name, CountryCode FROM City ORDER BY ID DESC;",
		
		"$result = $mysqli->query($query);",
		
		"while ($obj = $result->fetch_object()) {",
			"printf(%s (%s)\n, $obj->Name, $obj->CountryCode);"
	],
	"description": "mysqli_result::fetch_object() method"
  },
  "mysqli_result::fetch_row": {
	"prefix": "phpmysqli_result::fetch_row",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$query = 'SELECT Name, CountryCode FROM City ORDER BY ID DESC';",
		
		"$result = $mysqli->query($query);",
		
		"while ($row = $result->fetch_row()) {",
			"printf('%s (%s)\n', $row[0], $row[1]);"
	],
	"description": "mysqli_result::fetch_row() method"
  },
  "mysqli_result::$field_count": {
	"prefix": "phpmysqli_result::$field_count",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$result = $mysqli->query('SELECT Name, CountryCode, District, Population FROM City ORDER BY ID LIMIT 1');",
		
		"$field_cnt = $result->field_count;",
		
		"printf('Result set has %d fields.\n', $field_cnt);"
	],
	"description": "mysqli_result::$field_count property"
  },
  "mysqli_result::field_seek": {
	"prefix": "phpmysqli_result::field_seek",
	"body": [
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",

		"if (mysqli_connect_errno()) {",
			"printf('Connect failed: %s\n', mysqli_connect_error());",
			"exit();",
		"}",
		
		"$query = 'SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5';",
		
		"if ($result = $mysqli->query($query)) {",
		
			"$result->field_seek(1);",
			"$finfo = $result->fetch_field();",
		
			"printf('Name:     %s\n', $finfo->name);",
			"printf('Table:    %s\n', $finfo->table);",
			"printf('max. Len: %d\n', $finfo->max_length);",
			"printf('Flags:    %d\n', $finfo->flags);",
			"printf('Type:     %d\n\n', $finfo->type);",
		
			"$result->close();",
		"}"
	],
	"description": "mysqli_result::field_seek() method"
  },
  "mysqli_result::free": {
	"prefix": "phpmysqli_result::free",
	"body": [
	  "https://www.php.net/manual/en/mysqli-result.free.php"
	],
	"description": "mysqli_result::free() method"
  },
  "mysqli_result::$lengths": {
	"prefix": "phpmysqli_result::$lengths",
	"body": [
	  "https://www.php.net/manual/en/mysqli-result.free.php"
	],
	"description": "mysqli_result::$lengths property"
  },
  "mysqli_result::$num_rows": {
	"prefix": "phpmysqli_result::$num_rows",
	"body": [
		"mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);",
		"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');",
		
		"$result = $mysqli->query('SELECT Code, Name FROM Country ORDER BY Name');",
		
		"$row_cnt = $result->num_rows;",
		
		"printf('Result set has %d rows.\n', $row_cnt);"
	],
	"description": "mysqli_result::$num_rows property"
  },

  "MySQLi Driver Class": {
    "prefix": "php_mysqli_driver_class",
    "body": [
      "mysqli_driver::embedded_server_end()",
      "mysqli_driver::embedded_server_start([start, shutdown_options, error_handler])",
      "mysqli_driver::report_mode",
      "mysqli_driver::client_info",
      "mysqli_driver::client_version",
      "mysqli_driver::driver_version",
      "mysqli_driver::embedded",
      "mysqli_driver::reconnect",
      "mysqli_driver::report_mode"
    ],
    "description": "List of MySQLi Driver class properties and methods"
  },
  "mysqli_driver::embedded_server_end": {
	"prefix": "phpmysqli_driver::embedded_server_end",
	"body": [
	  "https://www.php.net/manual/en/mysqli-driver.embedded-server-end.php"
	],
	"description": "mysqli_driver::embedded_server_end() method"
  },
  "mysqli_driver::embedded_server_start": {
	"prefix": "phpmysqli_driver::embedded_server_start",
	"body": [
	 "https://www.php.net/manual/en/mysqli-driver.embedded-server-start.php"
	],
	"description": "mysqli_driver::embedded_server_start() method"
  },
  "mysqli_driver::$report_mode": {
	"prefix": "phpmysqli_driver::$report_mode",
	"body": [
		"$driver = new mysqli_driver();",
		"$driver->report_mode = MYSQLI_REPORT_ALL;",
		
		"try {",
		
			"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'my_db');",
		
			
			"$result = $mysqli->query('SELECT Name FROM Nonexistingtable WHERE population > 50000');",
		
			"$result = $mysqli->query('SELECT Name FROM City WHERE population > 50000');",
		"} catch (mysqli_sql_exception $e) {",
			"error_log($e->__toString());"
	],
	"description": "mysqli_driver::$report_mode property"
  },
  "mysqli_driver::$client_info": {
	"prefix": "phpmysqli_driver::$client_info",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-driver.php"
	],
	"description": "mysqli_driver::$client_info property"
  },
  "mysqli_driver::$client_version": {
	"prefix": "phpmysqli_driver::$client_version",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-driver.php"
	],
	"description": "mysqli_driver::$client_version property"
  },
  "mysqli_driver::$driver_version": {
	"prefix": "phpmysqli_driver::$driver_version",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-driver.php"
	],
	"description": "mysqli_driver::$driver_version property"
  },
  "mysqli_driver::$embedded": {
	"prefix": "phpmysqli_driver::$embedded",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-driver.php"
	],
	"description": "mysqli_driver::$embedded property"
  },
  "mysqli_driver::$reconnect": {
	"prefix": "phpmysqli_driver::$reconnect",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-driver.php"
	],
	"description": "mysqli_driver::$reconnect property"
  },

  "MySQLi Warning Class": {
    "prefix": "php_mysqli_warning_class",
    "body": [
      "mysqli_warning::__construct()",
      "mysqli_warning::next()",
      "mysqli_warning::message",
      "mysqli_warning::sqlstate",
      "mysqli_warning::errno"
    ],
    "description": "List of MySQLi Warning class properties and methods"
  },"mysqli_warning::__construct()": {
	"prefix": "phpmysqli_warning::__construct()",
	"body": [
	  "https://www.php.net/manual/en/mysqli-warning.construct.php"
	],
	"description": "mysqli_warning::__construct() method"
  },
  "mysqli_warning::next()": {
	"prefix": "phpmysqli_warning::next()",
	"body": [
	  "https://www.php.net/manual/en/mysqli-warning.next.php"
	],
	"description": "mysqli_warning::next() method"
  },
  "mysqli_warning::$message": {
	"prefix": "phpmysqli_warning::$message",
	"body": [
	  "https://www.php.net/manual/en/class.mysqli-warning.php"
	],
	"description": "mysqli_warning::$message property"
  },
  "mysqli_warning::$sqlstate": {
	"prefix": "phpmysqli_warning::$sqlstate",
	"body": [
	 "https://www.php.net/manual/en/class.mysqli-warning.php"
	],
	"description": "mysqli_warning::$sqlstate property"
  },
  "mysqli_warning::$errno": {
	"prefix": "phpmysqli_warning::$errno",
	"body": [
	 "https://www.php.net/manual/en/class.mysqli-warning.php"
	],
	"description": "mysqli_warning::$errno property"
  },
 
  
  
  "MySQL Constants": {
    "prefix": "php_mysqli_constants",
    "body": [
      "MYSQLI_READ_DEFAULT_GROUP",
      "MYSQLI_READ_DEFAULT_FILE",
      "MYSQLI_OPT_CONNECT_TIMEOUT",
      "MYSQLI_OPT_LOCAL_INFILE",
      "MYSQLI_INIT_COMMAND",
      "MYSQLI_CLIENT_SSL",
      "MYSQLI_CLIENT_COMPRESS",
      "MYSQLI_CLIENT_INTERACTIVE",
      "MYSQLI_CLIENT_IGNORE_SPACE",
      "MYSQLI_CLIENT_NO_SCHEMA",
      "MYSQLI_CLIENT_MULTI_QUERIES",
      "MYSQLI_STORE_RESULT",
      "MYSQLI_USE_RESULT",
      "MYSQLI_ASSOC",
      "MYSQLI_NUM",
      "MYSQLI_BOTH",
      "MYSQLI_NOT_NULL_FLAG",
      "MYSQLI_PRI_KEY_FLAG",
      "MYSQLI_UNIQUE_KEY_FLAG",
      "MYSQLI_MULTIPLE_KEY_FLAG",
      "MYSQLI_BLOB_FLAG",
      "MYSQLI_UNSIGNED_FLAG",
      "MYSQLI_ZEROFILL_FLAG",
      "MYSQLI_AUTO_INCREMENT_FLAG",
      "MYSQLI_TIMESTAMP_FLAG",
      "MYSQLI_SET_FLAG",
      "MYSQLI_NUM_FLAG",
      "MYSQLI_PART_KEY_FLAG",
      "MYSQLI_GROUP_FLAG",
      "MYSQLI_TYPE_DECIMAL",
      "MYSQLI_TYPE_NEWDECIMAL",
      "MYSQLI_TYPE_BIT",
      "MYSQLI_TYPE_TINY",
      "MYSQLI_TYPE_SHORT",
      "MYSQLI_TYPE_LONG",
      "MYSQLI_TYPE_FLOAT",
      "MYSQLI_TYPE_DOUBLE",
      "MYSQLI_TYPE_NULL",
      "MYSQLI_TYPE_TIMESTAMP",
      "MYSQLI_TYPE_LONGLONG",
      "MYSQLI_TYPE_INT24",
      "MYSQLI_TYPE_DATE",
      "MYSQLI_TYPE_TIME",
      "MYSQLI_TYPE_DATETIME",
      "MYSQLI_TYPE_YEAR",
      "MYSQLI_TYPE_NEWDATE",
      "MYSQLI_TYPE_INTERVAL",
      "MYSQLI_TYPE_ENUM",
      "MYSQLI_TYPE_SET",
      "MYSQLI_TYPE_TINY_BLOB",
      "MYSQLI_TYPE_MEDIUM_BLOB",
      "MYSQLI_TYPE_LONG_BLOB",
      "MYSQLI_TYPE_BLOB",
      "MYSQLI_TYPE_VAR_STRING",
      "MYSQLI_TYPE_STRING",
      "MYSQLI_TYPE_CHAR",
      "MYSQLI_TYPE_GEOMETRY",
      "MYSQLI_NEED_DATA",
      "MYSQLI_NO_DATA",
      "MYSQLI_DATA_TRUNCATED",
      "MYSQLI_ENUM_FLAG",
      "MYSQLI_CURSOR_TYPE_FOR_UPDATE",
      "MYSQLI_CURSOR_TYPE_NO_CURSOR",
      "MYSQLI_CURSOR_TYPE_READ_ONLY",
      "MYSQLI_CURSOR_TYPE_SCROLLABLE",
      "MYSQLI_STMT_ATTR_CURSOR_TYPE",
      "MYSQLI_STMT_ATTR_PREFETCH_ROWS",
      "MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH",
      "MYSQLI_SET_CHARSET_NAME",
      "MYSQLI_REPORT_INDEX",
      "MYSQLI_REPORT_ERROR",
      "MYSQLI_REPORT_STRICT",
      "MYSQLI_REPORT_ALL",
      "MYSQLI_REPORT_OFF",
      "MYSQLI_DEBUG_TRACE_ENABLED",
      "MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED",
      "MYSQLI_SERVER_QUERY_NO_INDEX_USED",
      "MYSQLI_REFRESH_GRANT",
      "MYSQLI_REFRESH_LOG",
      "MYSQLI_REFRESH_TABLES",
      "MYSQLI_REFRESH_HOSTS",
      "MYSQLI_REFRESH_STATUS",
      "MYSQLI_REFRESH_THREADS",
      "MYSQLI_REFRESH_SLAVE",
      "MYSQLI_REFRESH_MASTER"
    ],
    "description": "List of MySQL Constants"
  },
  "debug_backtrace()": {
	"prefix": "phpdebug_backtrace()",
	"body": [
		"function a_test($str)",
		"{",
			"echo '\nHi: $str';",
			"var_dump(debug_backtrace());",
		"}",
		
		"a_test('friend');"
		
		
		
		
	],
	"description": "debug_backtrace() function"
  },
  "debug_print_backtrace()": {
	"prefix": "phpdebug_print_backtrace()",
	"body": [
	  "include 'include.php';"
	],
	"description": "debug_print_backtrace() function"
  },
  "error_get_last()": {
	"prefix": "phperror_get_last()",
	"body": [
		"echo $a;",
		"print_r(error_get_last());"
	],
	"description": "error_get_last() function"
  },
  "error_log()": {
	"prefix": "phperror_log()",
	"body": [
		"if (!Ora_Logon($username, $password)) {",
			"error_log('Oracle database not available!', 0);",
		"}",
		
		"if (!($foo = allocate_new_foo())) {",
			"error_log('Big trouble, we're all out of FOOs!', 1,",
					   "'operator@example.com');",
		"}",
		
		
		"error_log('You messed up!', 3, '/var/tmp/my-errors.log');"
	],
	"description": "error_log() function"
  },
  "error_reporting()": {
	"prefix": "phperror_reporting()",
	"body": [
		"error_reporting(0);",

		
		"error_reporting(E_ERROR | E_WARNING | E_PARSE);",
		
		
		"error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);",
		
	
		"error_reporting(E_ALL & ~E_NOTICE);",
		
		
		"error_reporting(E_ALL);",
		
		
		"error_reporting(-1);",
		
		
		"ini_set('error_reporting', E_ALL);"
	],
	"description": "error_reporting() function"
  },
  "restore_error_handler()": {
	"prefix": "phprestore_error_handler()",
	"body": [
		"function unserialize_handler($errno, $errstr)",
		"{",
			"echo 'Invalid serialized value.\n';",
		"}"
		,
		"$serialized = 'foo';",
		"set_error_handler('unserialize_handler');",
		"$original = unserialize($serialized);",
		"restore_error_handler();"
	],
	"description": "restore_error_handler() function"
  },
  "restore_exception_handler()": {
	"prefix": "phprestore_exception_handler()",
	"body": [
	    "function exception_handler_1(Exception $e)",
    "{",
       " echo '[' . __FUNCTION__ . '] ' . $e->getMessage();",
    "}",

   " function exception_handler_2(Exception $e)",
    "{",
       " echo '[' . __FUNCTION__ . '] ' . $e->getMessage();",
   " }",

    "set_exception_handler('exception_handler_1');",
    "set_exception_handler('exception_handler_2');",

   " restore_exception_handler();"

	],
	"description": "restore_exception_handler() function"
  },
  "set_error_handler()": {
	"prefix": "phpset_error_handler()",
	"body": [
	  "https://www.php.net/manual/en/function.set-error-handler.php"
	],
	"description": "set_error_handler() function"
  },
  "set_exception_handler()": {
	"prefix": "phpset_exception_handler()",
	"body": [
		"function exception_handler(Throwable $exception) {",
			"echo 'Uncaught exception: ' , $exception->getMessage(), '\n';",
		  "}",
		  
		 " set_exception_handler('exception_handler');",
		  
		  "throw new Exception('Uncaught Exception');",
		 " echo 'Not Executed\n';"
	],
	"description": "set_exception_handler() function"
  },
  "trigger_error()": {
	"prefix": "phptrigger_error()",
	"body": [
		"if ($divisor == 0) {",
			"trigger_error('Cannot divide by zero', E_USER_ERROR);"
	],
	"description": "trigger_error() function"
  },
  "user_error()": {
	"prefix": "phpuser_error()",
	"body": [
	 "https://www.php.net/manual/en/function.user-error.php"
	],
	"description": "user_error() function"
  },
  "Error Constants": {
    "prefix": "php_error_constants",
    "body": [
      "E_ERROR",
      "E_WARNING",
      "E_PARSE",
      "E_NOTICE",
      "E_CORE_ERROR",
      "E_CORE_WARNING",
      "E_COMPILE_ERROR",
      "E_COMPILE_WARNING",
      "E_USER_ERROR",
      "E_USER_WARNING",
      "E_USER_NOTICE",
      "E_STRICT",
      "E_RECOVERABLE_ERROR",
      "E_ALL"
    ],
    "description": "List of PHP Error Constants"
  },
  "HTTP Functions": {
    "prefix": "php_http_functions",
    "body": [
      "header(string, replace = true, http_response_code = null);",
      "headers_list();",
      "headers_sent(&file = null, &line = null);",
      "setcookie(name, value = '', expires = 0, path = '', domain = '', secure = false, httponly = false);",
      "setrawcookie(name, value = '', expires = 0, path = '', domain = '', secure = false, httponly = false);"
    ],
    "description": "PHP HTTP Functions"
  },
  "header()": {
	"prefix": "phpheader()",
	"body": [
		"<?php",
		"/* This will give an error. Note the output",
		" * above, which is before the header() call */",
		"header('Location: http://www.example.com/');",
		"exit;"
	],
	"description": "header() function"
  },
  "headers_list()": {
	"prefix": "phpheaders_list()",
	"body": [
		"setcookie('foo', 'bar');",

	
		"header('Example-Test: foo');",
		
		"header('Content-Type: text/plain; charset=UTF-8');",
		
		"var_dump(headers_list());"
	],
	"description": "headers_list() function"
  },
  "headers_sent()": {
	"prefix": "phpheaders_sent()",
	"body": [
		"if (!headers_sent()) {",
			"header('Location: http://www.example.com/');",
			"exit;",
		"}"
		,
		"// An example using the optional file and line parameters",
		"// Note that $filename and $linenum are passed in for later use.",
		"// Do not assign them values beforehand.",
		"if (!headers_sent($filename, $linenum)) {",
			"header('Location: http://www.example.com/');",
			"exit;",
		
		"// You would most likely trigger an ,error here.",
		"} else {",
		
			"echo 'Headers already sent in $filename on line $linenum\n' .",
				  "'Cannot redirect, for now please click this <a ' .",
				  "'href=\"http://www.example.com\">link</a> instead\n';",
			"exit;"
	],
	"description": "headers_sent() function"
  },
  "setcookie()": {
	"prefix": "phpsetcookie()",
	"body": [
		"$value = 'something from somewhere';",

		"setcookie('TestCookie', $value);",
		"setcookie('TestCookie', $value, time()+3600);  /* expire in 1 hour */",
		"setcookie('TestCookie', $value, time()+3600, '/~rasmus/', 'example.com', 1);"
	],
	"description": "setcookie() function"
  },
  "setrawcookie()": {
	"prefix": "phpsetrawcookie()",
	"body": [
	 "https://www.php.net/manual/en/function.setrawcookie.php"
	],
	"description": "setrawcookie() function"
  },
  "Libxml Functions and Constants": {
    "prefix": "php_libxml_functions_constants",
    "body": [
      "libxml_clear_errors();",
      "libxml_get_errors();",
      "libxml_get_last_error();",
      "libxml_set_streams_context($streams_context);",
      "libxml_use_internal_errors($use_errors = null);",
      "LIBXML_COMPACT",
      "LIBXML_DTDATTR",
      "LIBXML_DTDLOAD",
      "LIBXML_DTDVALID",
      "LIBXML_NOBLANKS",
      "LIBXML_NOCDATA",
      "LIBXML_NOEMPTYTAG",
      "LIBXML_NOENT",
      "LIBXML_NOERROR",
      "LIBXML_NONET",
      "LIBXML_NOWARNING",
      "LIBXML_NOXMLDECL",
      "LIBXML_NSCLEAN",
      "LIBXML_XINCLUDE",
      "LIBXML_ERR_ERROR",
      "LIBXML_ERR_FATAL",
      "LIBXML_ERR_NONE",
      "LIBXML_ERR_WARNING",
      "LIBXML_VERSION",
      "LIBXML_DOTTED_VERSION"
    ],
    "description": "PHP Libxml Functions and Constants"
  }
  ,"libxml_clear_errors()": {
	"prefix": "phplibxml_clear_errors()",
	"body": [
	"https://www.php.net/manual/en/function.libxml-clear-errors.php"
	],
	"description": "libxml_clear_errors() function"
  },
  "libxml_get_errors()": {
	"prefix": "phplibxml_get_errors()",
	"body": [
	 "https://www.php.net/manual/en/function.libxml-get-errors.php"
	],
	"description": "libxml_get_errors() function"
  },
  "libxml_get_last_error()": {
	"prefix": "phplibxml_get_last_error()",
	"body": [
	  "https://www.php.net/manual/en/function.libxml-get-last-error.php"
	],
	"description": "libxml_get_last_error() function"
  },
  "libxml_set_streams_context()": {
	"prefix": "phplibxml_set_streams_context()",
	"body": [
	  
	],
	"description": "libxml_set_streams_context() function"
  },
  "libxml_use_internal_errors()": {
	"prefix": "phplibxml_use_internal_errors()",
	"body": [
		"var_dump(libxml_use_internal_errors(true));",

		"// load the document",
		"$doc = new DOMDocument;",
		
		"if (!$doc->load('file.xml')) {",
			"foreach (libxml_get_errors() as $error) {",
				"// handle errors here",
			"}",
		
			"libxml_clear_errors();"
	],
	"description": "libxml_use_internal_errors() function"
  }
	}