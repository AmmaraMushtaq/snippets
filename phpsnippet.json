{
  "php": {
    "prefix": "php",
    "body": [
      "Resource",
      "Math",
      "Misc.",
      "Array",
      "String",
      "Zip",
      "Variable",
      "Filter",
      "FTP",
      "OOP",
      "Date/Time",
      "Calendar",
      "SimpleXML",
      "Directory",
      "Filesystem",
      "MySQLi",
      "Error",
      "HTTP",
      "Libxml"

    ]},
  "Resource": {
    "prefix": "phpResource",
    "body": [
      " Online",
      "Official Website",
      "Download",
      "PHP Cheat Sheet [.pdf]",
      "Smarty cheat sheet for template designers [.pdf]",
      "Related",
      "Symfony",
      "Doctrine",
      "PHP Frameworks"
      
    ]},
	"Math Functions": {
	  "prefix": "phpmath",
	  "body": [
		"abs(",
		"acos()",
		"acosh()",
		"asin()",
		"asinh()",
		"atan()",
		"atan2()",
		"atanh()",
		"base_convert()",
		"bindec()",
		"ceil()",
		"cos()",
		"cosh()",
		"decbin()",
		"dechex()",
		"decoct()",
		"deg2rad()",
		"exp()",
		"expm1()",
		"floor()",
		"fmod()",
		"getrandmax()",
		"hexdec()",
		"hypot()",
		"is_finite()",
		"is_infinite()",
		"is_nan()",
		"lcg_value()",
		"log()",
		"log10()",
		"log1p()",
		"max()",
		"min()",
		"mt_getrandmax()",
		"mt_rand()",
		"mt_srand()",
		"octdec()",
		"pi()",
		"pow()",
		"rad2deg()",
		"rand()",
		"round()",
		"sin()",
		"sinh()",
		"sqrt()",
		"srand()",
		"tan()",
		"tanh()"
	  ],
	  "description": "Math functions"
	},
	"Math Constants": {
	  "prefix": "phpmathconst",
	  "body": [
		"M_E",
		"M_EULER",
		"M_LNPI",
		"M_LN2",
		"M_LN10",
		"M_LOG2E",
		"M_LOG10E",
		"M_PI",
		"M_PI_2",
		"M_PI_4",
		"M_1_PI",
		"M_2_PI",
		"M_SQRTPI",
		"M_2_SQRTPI",
		"M_SQRT1_2",
		"M_SQRT2",
		"M_SQRT3"
	  ],
	  "description": "Math constants"
	},
	"Misc. Functions": {
		"prefix": "phpmiscfuncs",
		"body": [
		  "connection_aborted()",
		  "connection_status()",
		  "connection_timeout()",
		  "constant()",
		  "define()",
		  "defined()",
		  "die()",
		  "eval()",
		  "exit()",
		  "get_browser()",
		  "highlight_file()",
		  "highlight_string()",
		  "ignore_user_abort()",
		  "pack()",
		  "php_check_syntax()",
		  "php_strip_whitespace()",
		  "show_source()",
		  "sleep()",
		  "time_nanosleep()",
		  "time_sleep_until()",
		  "uniqid()",
		  "unpack()",
		  "usleep()",
		  "miscconsts",
		  "CONNECTION_ABORTED",
		  "CONNECTION_NORMAL",
		  "CONNECTION_TIMEOUT",
		  "__COMPILER_HALT_OFFSET__"
		],
		"description": "Misc. Functions"
	  },
	  "Array Functions": {
		"prefix": "phparrayfuncs",
		"body": [
			"array()",
			"array_change_key_case()",
			"array_chunk()",
			"array_combine()",
			"array_count_values()",
			"array_diff()",
			"array_diff_assoc()",
			"array_diff_key()",
			"array_diff_uassoc()",
			"array_diff_ukey()",
			"array_fill()",
			"array_filter()",
			"array_flip()",
			"array_intersect()",
			"array_intersect_assoc()",
			"array_intersect_key()",
			"array_intersect_uassoc()",
			"array_intersect_ukey()",
			"array_key_exists()",
			"array_keys()",
			"array_map()",
			"array_merge()",
			"array_merge_recursive()",
			"array_multisort()",
			"array_pad()",
			"array_pop()",
			"array_product()",
			"array_push()",
			"array_rand()",
			"array_reduce()",
			"array_reverse()",
			"array_search()",
			"array_shift()",
			"array_slice()",
			"array_splice()",
			"array_sum()",
			"array_udiff()",
			"array_udiff_assoc()",
			"array_udiff_uassoc()",
			"array_uintersect()",
			"array_uintersect_assoc()",
			"array_uintersect_uassoc()",
			"array_unique()",
			"array_unshift()",
			"array_values()",
			"array_walk()",
			"array_walk_recursive()",
			"arsort()",
			"asort()",
			"compact()",
			"count()",
			"current()",
			"each()",
			"extract(array, flags = EXTR_OVERWRITE, prefix = null)",
      "in_array(needle, haystack, strict = false)",
      "key(array)",
      "krsort(&array, sort_flags = SORT_REGULAR)",
      "ksort(&array, sort_flags = SORT_REGULAR)",
      "list(var1, var2) = array",
      "natcasesort(&array)",
      "natsort(&array)",
      "next(&array)",
      "pos(&array)",
      "prev(&array)",
      "range(start, end, step = 1)",
      "reset(&array)",
      "rsort(&array, sort_flags = SORT_REGULAR)",
      "shuffle(&array)",
      "sizeof(array, mode = COUNT_NORMAL)",
      "sort(&array, sort_flags = SORT_REGULAR)",
      "uasort(&array, cmp_function)",
      "uksort(&array, cmp_function)",
      "usort(&array, cmp_function)"
    ],
    "description": "List of PHP array manipulation functions"
  },
  "PHP Array Constants": {
    "prefix": "php_array_constants",
    "body": [
      "CASE_LOWER",
      "Used with array_change_key_case() to convert array keys to lower case",
      "CASE_UPPER",
      "Used with array_change_key_case() to convert array keys to upper case",
      "SORT_ASC",
      "Used with array_multisort() to sort in ascending order",
      "SORT_DESC",
      "Used with array_multisort() to sort in descending order",
      "SORT_REGULAR",
      "Used to compare items normally",
      "SORT_NUMERIC",
      "Used to compare items numerically",
      "SORT_STRING",
      "Used to compare items as strings",
      "SORT_LOCALE_STRING",
      "Used to compare items as strings, based on the current locale",
      "COUNT_NORMAL",
      "COUNT_RECURSIVE",
      "EXTR_OVERWRITE",
      "EXTR_SKIP",
      "EXTR_PREFIX_SAME",
      "EXTR_PREFIX_ALL",
      "EXTR_PREFIX_INVALID",
      "EXTR_PREFIX_IF_EXISTS",
      "EXTR_IF_EXISTS",
      "EXTR_REFS"
    ],
    "description": "List of PHP array constants"
  },
  "PHP Mail Functions": {
    "prefix": "php_mail_functions",
    "body": [
      "ezmlm_hash()",
      "mail()"
    ],
    "description": "List of PHP mail functions"
  },
  "XML Parser Functions": {
    "prefix": "php_xml_parser_functions",
    "body": [
      "utf8_decode()",
      "utf8_encode()",
      "xml_error_string()",
      "xml_get_current_byte_index()",
      "xml_get_current_column_number()",
      "xml_get_current_line_number()",
      "xml_get_error_code()",
      "xml_parse()",
      "xml_parse_into_struct()",
      "xml_parser_create_ns()",
      "xml_parser_create()",
      "xml_parser_free()",
      "xml_parser_get_option()",
      "xml_parser_set_option()",
      "xml_set_character_data_handler()",
      "xml_set_default_handler()",
      "xml_set_element_handler()",
      "xml_set_end_namespace_decl_handler()",
      "xml_set_external_entity_ref_handler()",
      "xml_set_notation_decl_handler()",
      "xml_set_object()",
      "xml_set_processing_instruction_handler()",
      "xml_set_start_namespace_decl_handler()",
      "xml_set_unparsed_entity_decl_handler()"
    ],
    "description": "List of XML Parser functions"
  },
  "XML Parser Constants": {
    "prefix": "php_xml_parser_constants",
    "body": [
      "XML_ERROR_NONE (integer)",
      "XML_ERROR_NO_MEMORY (integer)",
      "XML_ERROR_SYNTAX (integer)",
      "XML_ERROR_NO_ELEMENTS (integer)",
      "XML_ERROR_INVALID_TOKEN (integer)",
      "XML_ERROR_UNCLOSED_TOKEN (integer)",
      "XML_ERROR_PARTIAL_CHAR (integer)",
      "XML_ERROR_TAG_MISMATCH (integer)",
      "XML_ERROR_DUPLICATE_ATTRIBUTE (integer)",
      "XML_ERROR_JUNK_AFTER_DOC_ELEMENT (integer)",
      "XML_ERROR_PARAM_ENTITY_REF (integer)",
      "XML_ERROR_UNDEFINED_ENTITY (integer)",
      "XML_ERROR_RECURSIVE_ENTITY_REF (integer)",
      "XML_ERROR_ASYNC_ENTITY (integer)",
      "XML_ERROR_BAD_CHAR_REF (integer)",
      "XML_ERROR_BINARY_ENTITY_REF (integer)",
      "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF (integer)",
      "XML_ERROR_MISPLACED_XML_PI (integer)",
      "XML_ERROR_UNKNOWN_ENCODING (integer)",
      "XML_ERROR_INCORRECT_ENCODING (integer)",
      "XML_ERROR_UNCLOSED_CDATA_SECTION (integer)",
      "XML_ERROR_EXTERNAL_ENTITY_HANDLING (integer)",
      "XML_OPTION_CASE_FOLDING (integer)",
      "XML_OPTION_TARGET_ENCODING (integer)",
      "XML_OPTION_SKIP_TAGSTART (integer)",
      "XML_OPTION_SKIP_WHITE (integer)"
    ],
    "description": "List of XML Parser constants"
  },
  
  "String Functions": {
    "prefix": "php_string_functions",
    "body": [
      "addcslashes()",
      "addslashes()",
      "bin2hex()",
      "chop()",
      "chr()",
      "chunk_split()",
      "convert_cyr_string()",
      "convert_uudecode()",
      "convert_uuencode()",
      "count_chars()",
      "crc32()",
      "crypt()",
      "echo()",
      "explode()",
      "fprintf()",
      "get_html_translation_table()",
      "hebrev()",
      "hebrevc()",
      "html_entity_decode()",
      "htmlentities()",
      "htmlspecialchars_decode()",
      "htmlspecialchars()",
      "implode()",
      "join()",
      "levenshtein()",
      "localeconv()",
      "ltrim()",
      "md5()",
      "md5_file()",
      "metaphone()",
      "money_format()",
      "nl_langinfo()",
      "nl2br()",
      "number_format()",
      "ord()",
      "parse_str()",
      "print()",
      "printf()",
      "quoted_printable_decode()",
      "quotemeta()",
      "rtrim()",
      "setlocale()",
      "sha1()",
      "sha1_file()",
      "similar_text()",
      "soundex()",
      "sprintf()",
      "sscanf()",
      "str_ireplace()",
      "str_pad()",
      "str_repeat()",
      "str_replace()",
      "str_rot13()",
      "str_shuffle()",
      "str_split()",
      "str_word_count()",
      "strcasecmp()",
      "strchr()",
      "strcmp()",
      "strcoll()",
      "strcspn()",
      "strip_tags()",
      "stripcslashes()",
      "stripslashes()",
      "stripos()",
      "stristr()",
      "strlen()",
      "strnatcasecmp()",
      "strnatcmp()",
      "strncasecmp()",
      "strncmp()",
      "strpbrk()",
      "strpos()",
      "strrchr()",
      "strrev()",
      "strripos()",
      "strrpos()",
      "strspn()",
      "strstr()",
      "strtok()",
      "strtolower()",
      "strtoupper()",
      "strtr()",
      "substr()",
      "substr_compare()",
      "substr_count()",
      "substr_replace()",
      "trim()",
      "ucfirst()",
      "ucwords()",
      "vfprintf()",
      "vprintf()",
      "vsprintf()",
      "wordwrap()"
    ],
    "description": "List of String functions"
  },
  "String Constants": {
    "prefix": "php_string_constants",
    "body": [
      "CRYPT_SALT_LENGTH",
      "CRYPT_STD_DES",
      "CRYPT_EXT_DES",
      "CRYPT_MD5",
      "CRYPT_BLOWFISH",
      "HTML_SPECIALCHARS",
      "HTML_ENTITIES",
      "ENT_COMPAT",
      "ENT_QUOTES",
      "ENT_NOQUOTES",
      "CHAR_MAX",
      "LC_CTYPE",
      "LC_NUMERIC",
      "LC_TIME",
      "LC_COLLATE",
      "LC_MONETARY",
      "LC_ALL",
      "LC_MESSAGES",
      "STR_PAD_LEFT",
      "STR_PAD_RIGHT",
      "STR_PAD_BOTH"
    ],
    "description": "List of String constants"
  },
  "Zip Functions": {
    "prefix": "php_zip_functions",
    "body": [
      "zip_close(zip)",
      "zip_entry_close(zip_entry)",
      "zip_entry_compressedsize(zip_entry)",
      "zip_entry_compressionmethod(zip_entry)",
      "zip_entry_filesize(zip_entry)",
      "zip_entry_name(zip_entry)",
      "zip_entry_open(zip, zip_entry [, mode])",
      "zip_entry_read(zip_entry [, length])",
      "zip_open(filename)",
      "zip_read(zip)"
    ],
    "description": "List of Zip functions"
  },
  "Variable Handling Functions": {
    "prefix": "php_variable_functions",
    "body": [
      "boolval(var)",
      "debug_zval_dump(variable [, ...])",
      "doubleval(var)",
      "empty(var)",
      "floatval(var)",
      "get_defined_vars()",
      "get_resource_type(handle)",
      "gettype(var)",
      "import_request_variables(types, prefix)",
      "intval(var [, base])",
      "is_array(var)",
      "is_bool(var)",
      "is_callable(var, syntax_only [, callable_name])",
      "is_double(var)",
      "is_float(var)",
      "is_int(var)",
      "is_integer(var)",
      "is_long(var)",
      "is_null(var)",
      "is_numeric(var)",
      "is_object(var)",
      "is_real(var)",
      "is_resource(var)",
      "is_scalar(var)",
      "is_string(var)",
      "isset(var [...])",
      "print_r(expression [ return])",
      "serialize(value)",
      "settype(var, type)",
      "strval(var)",
      "unserialize(str [, options])",
      "unset(var [ ...])",
      "var_dump(var [ ...])",
      "var_export(var [return])"
    ],
    "description": "List of Variable Handling functions"
  },
  "Filter Functions and Constants": {
    "prefix": "php_filter_functions",
    "body": [
      "filter_has_var(type, variable_name)",
      "filter_id(filtername)",
      "filter_input(type, variable_name [ filter [ options]])",
      "filter_input_array(type [ definition [ add_empty]])",
      "filter_list()",
      "filter_var_array(data, definition [, add_empty])",
      "filter_var(variable [ filter [ options]])",
      "",
      "Filters:",
      "FILTER_CALLBACK",
      "FILTER_SANITIZE_STRING",
      "FILTER_SANITIZE_STRIPPED",
      "FILTER_SANITIZE_ENCODED",
      "FILTER_SANITIZE_SPECIAL_CHARS",
      "FILTER_SANITIZE_EMAIL",
      "FILTER_SANITIZE_URL",
      "FILTER_SANITIZE_NUMBER_INT",
      "filter_sanitize_number_float",
      "filter_sanitize_magic_quotes",
      "FILTER_UNSAFE_RAW",
      "FILTER_VALIDATE_INT",
      "FILTER_VALIDATE_BOOLEAN",
      "FILTER_VALIDATE_FLOAT",
      "FILTER_VALIDATE_REGEXP",
      "FILTER_VALIDATE_URL",
      "FILTER_VALIDATE_EMAIL",
      "FILTER_VALIDATE_IP"
    ],
    "description": "List of Filter functions and constants"
  },
  "FTP Functions and Constants": {
    "prefix": "php_ftp_functions",
    "body": [
      "ftp_alloc(ftp_stream, filesize [, &result])",
      "ftp_cdup(ftp_stream)",
      "ftp_chdir(ftp_stream, directory)",
      "ftp_chmod(ftp_stream, mode, filename)",
      "ftp_close(ftp_stream)",
      "ftp_connect(host [, port [, timeout]])",
      "ftp_delete(ftp_stream, path)",
      "ftp_exec(ftp_stream, command)",
      "ftp_fget(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_fput(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_get_option(ftp_stream, option)",
      "ftp_get(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_login(ftp_stream, username, password)",
      "ftp_mdtm(ftp_stream, remote_file)",
      "ftp_mkdir(ftp_stream, directory)",
      "ftp_nb_continue(ftp_stream)",
      "ftp_nb_fget(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_nb_fput(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_nb_get(ftp_stream, local_file, remote_file, mode [, resumepos])",
      "ftp_nb_put(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_nlist(ftp_stream, directory)",
      "ftp_pasv(ftp_stream, pasv)",
      "ftp_put(ftp_stream, remote_file, local_file, mode [, startpos])",
      "ftp_pwd(ftp_stream)",
      "ftp_quit(ftp_stream)",
      "ftp_raw(ftp_stream, command)",
      "ftp_rawlist(ftp_stream, directory [, recursive])",
      "ftp_rename(ftp_stream, oldname, newname)",
      "ftp_rmdir(ftp_stream, directory)",
      "ftp_set_option(ftp_stream, option, value)",
      "ftp_site(ftp_stream, command)",
      "ftp_size(ftp_stream, remote_file)",
      "ftp_ssl_connect(host [ port [ timeout]])",
      "ftp_systype(ftp_stream)"
    ],
    "description": "List of FTP functions and constants"
  },
  "oop": {
    "prefix": "php_oop",
    "body": [
      "__construct()",
      "__destruct()",
      "__callStatic(name, arguments)",
      "__call(name, arguments)",
      "__get(name)",
      "__set(name, value)",
      "__isset(name)",
      "__unset(name)",
      "__sleep()",
      "__wakeup()",
      "__toString()",
      "__invoke(arguments)",
      "__set_state(properties)",
      "__clone()"
    ],
    "description": "List of magic methods in OOP"
  },
  "Date/Time Functions": {
    "prefix": "php_datetime_functions",
    "body": [
      "checkdate(month, day, year)",
      "date_default_timezone_get()",
      "date_default_timezone_set(timezone)",
      "date_sunrise(timestamp, format, latitude, longitude, zenith, gmt_offset)",
      "date_sunset(timestamp, format, latitude, longitude, zenith, gmt_offset)",
      "date()",
      "getdate([timestamp])",
      "gettimeofday([return_float])",
      "gmdate(format, [timestamp])",
      "gmmktime(hour, minute, second, month, day, year)",
      "gmstrftime(format, [timestamp])",
      "idate(format, [timestamp])",
      "localtime([timestamp, is_associative])",
      "microtime([as_float])",
      "mktime([hour, minute, second, month, day, year, is_dst])",
      "strftime(format, [timestamp])",
      "strptime(date, format)",
      "strtotime(time, [now])",
      "time()",
      ""
    ],
    "description": "List of date/time functions in PHP"
  },
  "Date/Time Constants": {
    "prefix": "php_datetime_constants",
    "body": [
      "DATE_ATOM",
      "DATE_COOKIE",
      "DATE_ISO8601",
      "DATE_RFC822",
      "DATE_RFC850",
      "DATE_RFC1036",
      "DATE_RFC1123",
      "DATE_RFC2822",
      "DATE_RSS",
      "DATE_W3C"
    ],
    "description": "List of date/time constants in PHP"
  },
  "Calendar Functions": {
    "prefix": "php_calendar_functions",
    "body": [
      "cal_days_in_month(calendar, month, year)",
      "cal_from_jd(jd, calendar)",
      "cal_info([calendar = CAL_GREGORIAN])",
      "cal_to_jd(calendar, month, day, year)",
      "easter_date([year = date(\"Y\")])",
      "easter_days([year = date(\"Y\")], [method = CAL_EASTER_DEFAULT])",
      "FrenchToJD(month, day, year, [calendar])",
      "GregorianToJD(month, day, year)",
      "JDDayOfWeek(jd, [mode = CAL_DOW_DAYNO])",
      "JDMonthName(jd, [mode = CAL_MONTH_GREGORIAN_LONG])",
      "JDToFrench(jd, [calendar])",
      "JDToGregorian(jd)",
      "jdtojewish(jd)",
      "JDToJulian(jd)",
      "jdtounix(jd)",
      "JewishToJD(month, day, year)",
      "JulianToJD(month, day, year)",
      "unixtojd([timestamp = time()])"
    ],
    "description": "List of calendar functions in PHP"
  },
  "Calendar Constants": {
    "prefix": "php_calendar_constants",
    "body": [
      "CAL_GREGORIAN",
      "CAL_JULIAN",
      "CAL_JEWISH",
      "CAL_FRENCH",
      "CAL_NUM_CALS",
      "CAL_DOW_DAYNO",
      "CAL_DOW_SHORT",
      "CAL_DOW_LONG",
      "CAL_MONTH_GREGORIAN_SHORT",
      "CAL_MONTH_GREGORIAN_LONG",
      "CAL_MONTH_JULIAN_SHORT",
      "CAL_MONTH_JULIAN_LONG",
      "CAL_MONTH_JEWISH",
      "CAL_MONTH_FRENCH",
      "CAL_EASTER_DEFAULT",
      "CAL_EASTER_ROMAN",
      "CAL_EASTER_ALWAYS_GREGORIAN",
      "CAL_EASTER_ALWAYS_JULIAN",
      "CAL_JEWISH_ADD_ALAFIM_GERESH",
      "CAL_JEWISH_ADD_ALAFIM",
      "CAL_JEWISH_ADD_GERESHAYIM"
    ],
    "description": "List of calendar constants in PHP"
  },
  "SimpleXML Functions": {
    "prefix": "php_simplexml_functions",
    "body": [
      "__construct([data], [options = 0], [data_is_url = false], [ns = \"\"], [is_prefix = false])",
      "addAttribute(name, value, [namespace = null])",
      "addChild(name, [value], [namespace = null])",
      "asXML([filename = null])",
      "attributes([namespace = null], [is_prefix = false])",
      "children([namespace = null], [is_prefix = false])",
      "getDocNamespaces([recursive = false])",
      "getName()",
      "getNamespace([prefix = null])",
      "registerXPathNamespace(prefix, namespace)",
      "simplexml_import_dom(DOMNode node, [class_name = \"SimpleXMLElement\"])",
      "simplexml_load_file(filename, [class_name = \"SimpleXMLElement\"], [options = 0], [ns = \"\"], [is_prefix = false])",
      "simplexml_load_string(data, [class_name = \"SimpleXMLElement\"], [options = 0], [ns = \"\"], [is_prefix = false])",
      "xpath(path)"
    ],
    "description": "List of SimpleXML functions in PHP"
  },
  "Directory Functions": {
    "prefix": "php_directory_functions",
    "body": [
      "chdir(directory)",
      "chroot(directory)",
      "dir(directory, context)",
      "closedir(dir_handle)",
      "getcwd()",
      "opendir(path, [context])",
      "readdir(dir_handle)",
      "rewinddir(dir_handle)",
      "scandir(directory, [sorting_order = SCANDIR_SORT_ASCENDING], [context])"
    ],
    "description": "List of directory functions in PHP"
  },

  "Directory Constants": {
    "prefix": "php_directory_constants",
    "body": [
      "DIRECTORY_SEPARATOR",
      "PATH_SEPARATOR"
    ],
    "description": "List of directory constants in PHP"
  },
  "Filesystem Functions": {
    "prefix": "php_filesystem_functions",
    "body": [
      "basename(path, [suffix])",
      "chgrp(filename, group)",
      "chmod(filename, mode)",
      "chown(filename, user)",
      "clearstatcache([clear_realpath_cache = false], filename)",
      "copy(source, destination, [context])",
      "delete(filename, [context])",
      "dirname(path, [levels = 1])",
      "disk_free_space(directory)",
      "disk_total_space(directory)",
      "diskfreespace(directory)",
      "fclose(handle)",
      "feof(handle)",
      "fflush(handle)",
      "fgetc(handle)",
      "fgetcsv(handle, [length = 0], [delimiter = ','], [enclosure = '\"'], [escape = '\\\\'])",
      "fgets(handle, [length])",
      "fgetss(handle, [length], [allowable_tags])",
      "file(filename, [flags = 0], [context])",
      "file_exists(filename)",
      "file_get_contents(filename, [flags = 0], [context], [offset = 0], [max_length])",
      "file_put_contents(filename, data, [flags = 0], [context])",
      "fileatime(filename)",
      "filectime(filename)",
      "filegroup(filename)",
      "fileinode(filename)",
      "filemtime(filename)",
      "fileowner(filename)",
      "fileperms(filename)",
      "filesize(filename)",
      "filetype(filename)",
      "flock(handle, operation)",
      "fnmatch(pattern, string, [flags = 0])",
      "fopen(filename, mode, [use_include_path = false], [context])",
      "fpassthru(handle)",
      "fputcsv(handle, fields, [delimiter = ','], [enclosure = '\"'], [escape_char = '\\\\'])",
      "fputs(handle, string, [length])",
      "fread(handle, length)",
      "fscanf(handle, format, &...vars)",
      "fseek(handle, offset, [whence = SEEK_SET])",
      "fstat(handle)",
      "ftell(handle)",
      "ftruncate(handle, size)",
      "fwrite(handle, string, [length])",
      "glob(pattern, [flags = 0])",
      "is_dir(filename)",
      "is_executable(filename)",
      "is_file(filename)",
      "is_link(filename)",
      "is_readable(filename)",
      "is_uploaded_file(filename)",
      "is_writable(filename)",
      "is_writeable(filename)",
      "link(target, link)",
      "linkinfo(path)",
      "lstat(filename)",
      "mkdir(pathname, [mode = 0777], [recursive = false], [context])",
      "move_uploaded_file(filename, destination)",
      "parse_ini_file(filename, [process_sections = false], [scanner_mode = INI_SCANNER_NORMAL])",
      "pathinfo(path, [options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME])",
      "pclose(handle)",
      "popen(command, mode)",
      "readfile(filename, [use_include_path = false], [context])",
      "readlink(path)",
      "realpath(path)",
      "rename(oldname, newname, [context])",
      "rewind(handle)",
      "rmdir(dirname, [context])",
      "set_file_buffer(handle, buffer)",
      "stat(filename)",
      "symlink(target, link)",
      "tempnam(dir, prefix)",
      "tmpfile()",
      "touch(filename, [time = time()], [atime])",
      "umask([mask])",
      "unlink(filename, [context])"
    ],
    "description": "List of filesystem functions in PHP"
  },

  "Filesystem Constants": {
    "prefix": "php_filesystem_constants",
    "body": [
      "GLOB_BRACE",
      "GLOB_ONLYDIR",
      "GLOB_MARK",
      "GLOB_NOSORT",
      "GLOB_NOCHECK",
      "GLOB_NOESCAPE",
      "PATHINFO_DIRNAME",
      "PATHINFO_BASENAME",
      "PATHINFO_EXTENSION",
      "FILE_USE_INCLUDE_PATH",
      "FILE_APPEND",
      "FILE_IGNORE_NEW_LINES",
      "FILE_SKIP_EMPTY_LINES"
    ],
    "description": "List of filesystem constants in PHP"
  },
  "MySQLi Class": {
    "prefix": "php_mysqli_class",
    "body": [
      "mysqli::affected_rows",
      "mysqli::autocommit(mode)",
      "mysqli::change_user(user, password, database)",
      "mysqli::character_set_name()",
      "mysqli::client_info",
      "mysqli::client_version",
      "mysqli::close()",
      "mysqli::commit()",
      "mysqli::connect_errno",
      "mysqli::connect_error",
      "mysqli::__construct([host = 'localhost'], [username = 'user'], [passwd = 'password'], [dbname = 'database'], [port = 3306], [socket = null])",
      "mysqli::debug([message])",
      "mysqli::dump_debug_info()",
      "mysqli::errno",
      "mysqli::error_list",
      "mysqli::error",
      "mysqli::field_count",
      "mysqli::get_charset()",
      "mysqli::get_client_info()",
      "mysqli_get_client_stats()",
      "mysqli_get_client_version()",
      "mysqli::get_connection_stats()",
      "mysqli::host_info",
      "mysqli::protocol_version",
      "mysqli::server_info",
      "mysqli::server_version",
      "mysqli::get_warnings()",
      "mysqli::info",
      "mysqli::init()",
      "mysqli::insert_id",
      "mysqli::kill(process_id)",
      "mysqli::more_results()",
      "mysqli::multi_query(query)",
      "mysqli::next_result()",
      "mysqli::options(option, value)",
      "mysqli::ping()",
      "mysqli::poll(&...read, &...error, &...reject, sec, [usec])",
      "mysqli::prepare(query)",
      "mysqli::query(query, [resultmode = MYSQLI_STORE_RESULT])",
      "mysqli::real_connect([host = 'localhost'], [username = 'user'], [passwd = 'password'], [dbname = 'database'], [port = 3306], [socket = null], [flags = 0])",
      "mysqli::real_escape_string(escapestr)",
      "mysqli::real_query(query)",
      "mysqli::reap_async_query()",
      "mysqli::refresh([options = MYSQLI_REFRESH_GRANT | MYSQLI_REFRESH_LOG | MYSQLI_REFRESH_STATUS])",
      "mysqli::rollback([flags = MYSQLI_TRANS_COR_AND_CHAIN])",
      "mysqli::rpl_query_type()",
      "mysqli::select_db(dbname)",
      "mysqli::send_query(query)",
      "mysqli::set_charset(charset)",
      "mysqli::set_local_infile_default()",
      "mysqli::set_local_infile_handler(link, read_func)",
      "mysqli::sqlstate",
      "mysqli::ssl_set(key, cert, ca, capath, cipher)",
      "mysqli::stat()",
      "mysqli::stmt_init()",
      "mysqli::store_result([mode = MYSQLI_STORE_RESULT])",
      "mysqli::thread_id",
      "mysqli::thread_safe()",
      "mysqli::use_result()",
      "mysqli::warning_count"
    ],
    "description": "List of MySQLi class methods and properties"
  },

  "MySQLi Stmt Class": {
    "prefix": "php_mysqli_stmt_class",
    "body": [
      "mysqli_stmt::affected_rows",
      "mysqli_stmt::attr_get(attr)",
      "mysqli_stmt::attr_set(attr, mode)",
      "mysqli_stmt::bind_param(types, &...vars)",
      "mysqli_stmt::bind_result(&...vars)",
      "mysqli_stmt::close()",
      "mysqli_stmt::data_seek(offset)",
      "mysqli_stmt::errno",
      "mysqli_stmt::error_list",
      "mysqli_stmt::error",
      "mysqli_stmt::execute()",
      "mysqli_stmt::fetch()",
      "mysqli_stmt::field_count",
      "mysqli_stmt::free_result()",
      "mysqli_stmt::get_result()",
      "mysqli_stmt::get_warnings()",
      "mysqli_stmt::insert_id",
      "mysqli_stmt::more_results()",
      "mysqli_stmt::next_result()",
      "mysqli_stmt::num_rows",
      "mysqli_stmt::param_count",
      "mysqli_stmt::prepare(query)",
      "mysqli_stmt::reset()",
      "mysqli_stmt::result_metadata()",
      "mysqli_stmt::send_long_data(param_num, data)",
      "mysqli_stmt::sqlstate",
      "mysqli_stmt::store_result()"
    ],
    "description": "List of MySQLi Stmt class methods and properties"
  },

  "MySQLi Result Class": {
    "prefix": "php_mysqli_result_class",
    "body": [
      "mysqli_result::current_field",
      "mysqli_result::data_seek(offset)",
      "mysqli_result::fetch_all([resulttype = MYSQLI_NUM])",
      "mysqli_result::fetch_array([resulttype = MYSQLI_BOTH])",
      "mysqli_result::fetch_assoc()",
      "mysqli_result::fetch_field_direct(fieldnr)",
      "mysqli_result::fetch_field()",
      "mysqli_result::fetch_fields()",
      "mysqli_result::fetch_object([class_name], [params])",
      "mysqli_result::fetch_row()",
      "mysqli_result::field_count",
      "mysqli_result::field_seek(fieldnr)",
      "mysqli_result::free()",
      "mysqli_result::lengths",
      "mysqli_result::num_rows"
    ],
    "description": "List of MySQLi Result class methods and properties"
  },

  "MySQLi Driver Class": {
    "prefix": "php_mysqli_driver_class",
    "body": [
      "mysqli_driver::embedded_server_end()",
      "mysqli_driver::embedded_server_start([start, shutdown_options, error_handler])",
      "mysqli_driver::report_mode",
      "mysqli_driver::client_info",
      "mysqli_driver::client_version",
      "mysqli_driver::driver_version",
      "mysqli_driver::embedded",
      "mysqli_driver::reconnect",
      "mysqli_driver::report_mode"
    ],
    "description": "List of MySQLi Driver class properties and methods"
  },

  "MySQLi Warning Class": {
    "prefix": "php_mysqli_warning_class",
    "body": [
      "mysqli_warning::__construct()",
      "mysqli_warning::next()",
      "mysqli_warning::message",
      "mysqli_warning::sqlstate",
      "mysqli_warning::errno"
    ],
    "description": "List of MySQLi Warning class properties and methods"
  },
  "MySQL Constants": {
    "prefix": "php_mysqli_constants",
    "body": [
      "MYSQLI_READ_DEFAULT_GROUP",
      "MYSQLI_READ_DEFAULT_FILE",
      "MYSQLI_OPT_CONNECT_TIMEOUT",
      "MYSQLI_OPT_LOCAL_INFILE",
      "MYSQLI_INIT_COMMAND",
      "MYSQLI_CLIENT_SSL",
      "MYSQLI_CLIENT_COMPRESS",
      "MYSQLI_CLIENT_INTERACTIVE",
      "MYSQLI_CLIENT_IGNORE_SPACE",
      "MYSQLI_CLIENT_NO_SCHEMA",
      "MYSQLI_CLIENT_MULTI_QUERIES",
      "MYSQLI_STORE_RESULT",
      "MYSQLI_USE_RESULT",
      "MYSQLI_ASSOC",
      "MYSQLI_NUM",
      "MYSQLI_BOTH",
      "MYSQLI_NOT_NULL_FLAG",
      "MYSQLI_PRI_KEY_FLAG",
      "MYSQLI_UNIQUE_KEY_FLAG",
      "MYSQLI_MULTIPLE_KEY_FLAG",
      "MYSQLI_BLOB_FLAG",
      "MYSQLI_UNSIGNED_FLAG",
      "MYSQLI_ZEROFILL_FLAG",
      "MYSQLI_AUTO_INCREMENT_FLAG",
      "MYSQLI_TIMESTAMP_FLAG",
      "MYSQLI_SET_FLAG",
      "MYSQLI_NUM_FLAG",
      "MYSQLI_PART_KEY_FLAG",
      "MYSQLI_GROUP_FLAG",
      "MYSQLI_TYPE_DECIMAL",
      "MYSQLI_TYPE_NEWDECIMAL",
      "MYSQLI_TYPE_BIT",
      "MYSQLI_TYPE_TINY",
      "MYSQLI_TYPE_SHORT",
      "MYSQLI_TYPE_LONG",
      "MYSQLI_TYPE_FLOAT",
      "MYSQLI_TYPE_DOUBLE",
      "MYSQLI_TYPE_NULL",
      "MYSQLI_TYPE_TIMESTAMP",
      "MYSQLI_TYPE_LONGLONG",
      "MYSQLI_TYPE_INT24",
      "MYSQLI_TYPE_DATE",
      "MYSQLI_TYPE_TIME",
      "MYSQLI_TYPE_DATETIME",
      "MYSQLI_TYPE_YEAR",
      "MYSQLI_TYPE_NEWDATE",
      "MYSQLI_TYPE_INTERVAL",
      "MYSQLI_TYPE_ENUM",
      "MYSQLI_TYPE_SET",
      "MYSQLI_TYPE_TINY_BLOB",
      "MYSQLI_TYPE_MEDIUM_BLOB",
      "MYSQLI_TYPE_LONG_BLOB",
      "MYSQLI_TYPE_BLOB",
      "MYSQLI_TYPE_VAR_STRING",
      "MYSQLI_TYPE_STRING",
      "MYSQLI_TYPE_CHAR",
      "MYSQLI_TYPE_GEOMETRY",
      "MYSQLI_NEED_DATA",
      "MYSQLI_NO_DATA",
      "MYSQLI_DATA_TRUNCATED",
      "MYSQLI_ENUM_FLAG",
      "MYSQLI_CURSOR_TYPE_FOR_UPDATE",
      "MYSQLI_CURSOR_TYPE_NO_CURSOR",
      "MYSQLI_CURSOR_TYPE_READ_ONLY",
      "MYSQLI_CURSOR_TYPE_SCROLLABLE",
      "MYSQLI_STMT_ATTR_CURSOR_TYPE",
      "MYSQLI_STMT_ATTR_PREFETCH_ROWS",
      "MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH",
      "MYSQLI_SET_CHARSET_NAME",
      "MYSQLI_REPORT_INDEX",
      "MYSQLI_REPORT_ERROR",
      "MYSQLI_REPORT_STRICT",
      "MYSQLI_REPORT_ALL",
      "MYSQLI_REPORT_OFF",
      "MYSQLI_DEBUG_TRACE_ENABLED",
      "MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED",
      "MYSQLI_SERVER_QUERY_NO_INDEX_USED",
      "MYSQLI_REFRESH_GRANT",
      "MYSQLI_REFRESH_LOG",
      "MYSQLI_REFRESH_TABLES",
      "MYSQLI_REFRESH_HOSTS",
      "MYSQLI_REFRESH_STATUS",
      "MYSQLI_REFRESH_THREADS",
      "MYSQLI_REFRESH_SLAVE",
      "MYSQLI_REFRESH_MASTER"
    ],
    "description": "List of MySQL Constants"
  },
  "Error Constants": {
    "prefix": "php_error_constants",
    "body": [
      "E_ERROR",
      "E_WARNING",
      "E_PARSE",
      "E_NOTICE",
      "E_CORE_ERROR",
      "E_CORE_WARNING",
      "E_COMPILE_ERROR",
      "E_COMPILE_WARNING",
      "E_USER_ERROR",
      "E_USER_WARNING",
      "E_USER_NOTICE",
      "E_STRICT",
      "E_RECOVERABLE_ERROR",
      "E_ALL"
    ],
    "description": "List of PHP Error Constants"
  },
  "HTTP Functions": {
    "prefix": "php_http_functions",
    "body": [
      "header(string, replace = true, http_response_code = null);",
      "headers_list();",
      "headers_sent(&file = null, &line = null);",
      "setcookie(name, value = '', expires = 0, path = '', domain = '', secure = false, httponly = false);",
      "setrawcookie(name, value = '', expires = 0, path = '', domain = '', secure = false, httponly = false);"
    ],
    "description": "PHP HTTP Functions"
  },
  "Libxml Functions and Constants": {
    "prefix": "php_libxml_functions_constants",
    "body": [
      "libxml_clear_errors();",
      "libxml_get_errors();",
      "libxml_get_last_error();",
      "libxml_set_streams_context($streams_context);",
      "libxml_use_internal_errors($use_errors = null);",
      "LIBXML_COMPACT",
      "LIBXML_DTDATTR",
      "LIBXML_DTDLOAD",
      "LIBXML_DTDVALID",
      "LIBXML_NOBLANKS",
      "LIBXML_NOCDATA",
      "LIBXML_NOEMPTYTAG",
      "LIBXML_NOENT",
      "LIBXML_NOERROR",
      "LIBXML_NONET",
      "LIBXML_NOWARNING",
      "LIBXML_NOXMLDECL",
      "LIBXML_NSCLEAN",
      "LIBXML_XINCLUDE",
      "LIBXML_ERR_ERROR",
      "LIBXML_ERR_FATAL",
      "LIBXML_ERR_NONE",
      "LIBXML_ERR_WARNING",
      "LIBXML_VERSION",
      "LIBXML_DOTTED_VERSION"
    ],
    "description": "PHP Libxml Functions and Constants"
  }
	}