{
	"TypeScript": {
		"prefix": "TypeScript",
		"body": [
			"TS HOME",
			"",
"TS Introduction",
"",
"TS Get Started",
"",
"TS Simple Types",
"",
"TS Special Types",
"",
"TS Arrays",
"",
"TS Tuples",
"",
"TS Object Types",
"",
"TS Enums",
"",
"TS Aliases & Interfaces",
"",
"TS Union Types",
"",
"TS Functions",
"",
"TS Casting",
"",
"TS Classes",
"",
"TS Basic Generics",
"",
"TS Utility Types",
"",
"TS Keyof",
"",
"TS Null",
"",
"TS Definitely Typed",
"",
"TS 5 Updates"
		],
		"description": "TypeScript tutorial"
	},
	
		" TypeScript Introduction": {
			"prefix": "tsIntro",
			"body": [
			  "// Introduction to TypeScript",
			  "",
			  "TypeScript is a statically-typed superset of JavaScript...",
			 
			  "This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types."
			 
			],
			"description": "TypeScript Introduction"
		  },
		  "Introduction Environment Setup": {
			"prefix": " IntroductionSetup",
			"body": [
				"Installing the Compiler",
				"Configuring the compiler"
			]},
			"Introduction Number in TypeScript": {
				"prefix": "IntroductionNumber",
				"body": [
				  "// Number in TypeScript",
				  "",
				  
				  "const age: number = 30;",
				  "",
				  "// Arithmetic operations:",
				  "const sum: number = 10 + 20;",
				  "const product: number = 5 * 6;",
				  "",
				  "// Common methods and properties:",
				  "const maxNumber: number = Number.MAX_VALUE;",
				  "const minNumber: number = Number.MIN_VALUE;",
				  "const isNaNValue: boolean = isNaN(age);",
				  "",
				  "// Type inference:",
				  "const price = 49.99; // TypeScript infers the type as number",
				  "",
				  "console.log(`Age: ${age}`);",
				  "console.log(`Sum: ${sum}`);",
				  "console.log(`Product: ${product}`);",
				  "console.log(`Max Number: ${maxNumber}`);",
				  "console.log(`Min Number: ${minNumber}`);",
				  "console.log(`Is NaN: ${isNaNValue}`);"
				],
				"description": "Number in TypeScript"
			  },
			  "Introduction String in TypeScript": {
				"prefix": "IntroductionString",
				"body": [
				  "// String in TypeScript",
				  "",
				  "// Declaration and initialization:",
				  "const greeting: string = Hello, TypeScript!;",
				  "",
				  "// String interpolation:",
				  "const name: string = 'Alice';",
				  "const message: string = `Welcome, ${name}!`;",
				  "",
				  "console.log(greeting);",
				  "console.log(message);"
				],
				"description": "String in TypeScript"
			  },
			  "Introduction Boolean in TypeScript": {
				"prefix": "IntroductionBoolean",
				"body": [
				  "// Boolean in TypeScript",
				  "",
				  "// Declaration and initialization:",
				  "const isLogged: boolean = true;",
				  "",
				  "// Logical operators:",
				  "const canEdit: boolean = true;",
				  "const canDelete: boolean = false;",
				  "const canUpdate: boolean = canEdit && !canDelete;",
				  "",
				  "console.log(`Is Logged: ${isLogged}`);",
				  "console.log(`Can Update: ${canUpdate}`);"
				],
				"description": "Boolean in TypeScript"
			  },
			  "TypeScript Special Types": {
				"prefix": "TypeScript Special Types",
				"body": [
             "TypeScript has special types that may not refer to any specific type of data.",
			 "with any",
			 " without any",
			 "Type: never",
			 "unknown",
			 " undefined & null"

				] ,"description":"TypeScript Special Types"},

				" specialtypes with any type": {
					"prefix": "specialtypeswithanytype",
					"body": [
"any is a type that disables type checking and effectively allows all types to be used.",
"let v: any = true;",
"v = 'string'; // no error as it can be 'any' type",
"Math.round(v); // no error as it can be 'any' type"
					],
					"description": "TypeScript with any type"},

					"specialtypes without any type": {
						"prefix": "specialtypeswithoutanytype",
						"body": [
							"let u = true;",
"u = 'string'; // Error: Type 'string' is not assignable to type 'boolean'.",
"Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'."
						],
						"description": "TypeScript without any type"},

						"specialtypes unknown type": {
							"prefix": "specialtypeswithunknowntype",
							"body": [
								"unknown is a similar, but safer alternative to any.",
								"let w: unknown = 1;",
"w = 'string'; // no error",
"w = {",
  "runANonExistentMethod: () => {",
    "console.log('I think therefore I am');",
  "}",
"} as { runANonExistentMethod: () => void}",
"// How can we avoid the error for the code commented out below when we don't know the type?",
"// w.runANonExistentMethod(); // Error: Object is of type 'unknown'.",
"if(typeof w === 'object' && w !== null) {",
  "(w as { runANonExistentMethod: Function }).runANonExistentMethod();",
"}"
							],
							"description": "TypeScript  unknown type"},

							"specialtypes never type": {
								"prefix": "specialtypesnevertype",
								"body": [
									"never effectively throws an error whenever it is defined.",
									"let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'."
								],
								"description": "specialtypes never type"},



	"TypeScript Arrays": {
		"prefix": "TypeScriptArrays",
		"body": [

			"Readonly",
			"Type Inference"
		],
		"description": " TypeScript Arrays"
	},

	
	"Arrays Readonly": {
		"prefix": "ArraysReadonly",
		"body": [
			"The readonly keyword can prevent arrays from being changed.",
			"const names: readonly string[] = ['Dylan'];",
"names.push('Jack'); // Error: Property 'push' does not exist on type 'readonly string[]'."
		],
		"description": " Arrays Readonly"
	},
	
	"Arrays Type Inference": {
		"prefix": "ArraysTypeInference",
		"body": [
			
			"TypeScript can infer the type of an array if it has values.",
			"const numbers = [1, 2, 3]; // inferred to type number[]",
"numbers.push(4); // no error",
"// comment line below out to see the successful assignment",
"numbers.push('2'); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.",
"let head: number = numbers[0];"
		],
		"description": " TypeScript Type Inference"
	},

	"TypeScript Tuples": {
		"prefix": "TypeScriptTuples",
		"body": [
			
			"Typed Arrays",
			"Readonly Tuple"
		],
		"description": " TypeScript Tuples"
	},
	" Tuples Typed Arrays":{

		"prefix": "TuplesTypedArrays",

		"body": [
			"A tuple is a typed array with a pre-defined length and types for each index.",
			"let ourTuple: [number, boolean, string];",

"// initialize correctly",
"ourTuple = [5, false, 'Coding God was here'];"
		],
		"description": " Tuples Typed Arrays"

	},
	" Tuples Readonly Tuple": {
		"prefix": "TuplesReadonlyTuple",
		"body": [
			"Tuples only have strongly defined types for the initial values:",
			"let ourTuple: [number, boolean, string];",
"// initialize correctly",
"ourTuple = [5, false, 'Coding God was here'];",
"// We have no type safety in our tuple for indexes 3+",
"ourTuple.push('Something new and wrong');",
"console.log(ourTuple);"
		],
		"description": " Tuples Readonly Tuple"
	},

	"TypeScript Object Types": {
		"prefix": "TypeScriptObjectTypes",
		"body": [
			"Type Inference",
			"Optional Properties",
			"Index Signatures"

		],
		"description": " TypeScript Object Types"
	},
	" Object Types Type Inference": {
		"prefix": "ObjectTypesTypeInference",
		"body": [
			"TypeScript can infer the types of properties based on their values.",
			"const car = {",
				"type: 'Toyota',",
			 " };",
			  "car.type = 'Ford'; // no error",
			  "car.type = 2; // Error: Type 'number' is not assignable to type 'string'."
		],
		"description": " Object Types Type Inference"
	},
	"Object Types Optional Properties": {
		"prefix": "ObjectTypesOptionalProperties",
		"body": [
			"Optional properties are properties that don't have to be defined in the object definition.",
			"const car: { type: string, mileage?: number } = { // no error",
 " type: 'Toyota'",
"};",
"car.mileage = 2000;"
		],
		"description": " Object Types Optional Properties"
	},
	"Object TypesIndex Signatures": {
		"prefix": "ObjectTypesIndexSignatures",
		"body": [
			"Index signatures can be used for objects without a defined list of properties.",
			"const nameAgeMap: { [index: string]: number } = {};",
"nameAgeMap.Jack = 25; // no error",
"nameAgeMap.Mark = 'Fifty'; // Error: Type 'string' is not assignable to type 'number'."
		],
		"description": " Object Types Index Signatures"
	},
	"TypeScript Enums": {
		"prefix": "TypeScript TypeScript Enums",
		"body": [
			"Numeric Enums - Default",
			"Numeric Enums - Initialized",
			"Numeric Enums - Fully Initialized",
			"String Enums"

		],
		"description": " TypeScript TypeScript Enums"
	},

	"Enums Numeric Enums - Default ": {
		"prefix": "EnumsNumericEnumsDefault",
		"body": [
			"By default, enums will initialize the first value to 0 and add 1 to each additional value:",
			"enum CardinalDirections {",
				"North,",
				"East,",
				"South,",
				"West",
			  "}",
			  "let currentDirection = CardinalDirections.North;",
			 " // logs 0",
			  "console.log(currentDirection);",
			  "// throws error as 'North' is not a valid enum",
			  "currentDirection = 'North'; // Error: North is not assignable to type 'CardinalDirections'."

		],
		"description": " EnumsNumeric Enums - Default"
	},
	"Enums Numeric Enums - Initialized": {
		"prefix": "EnumsNumericEnumsInitialized",
		"body": [
			"enum CardinalDirections {",
				"North = 1,",
				"East,",
				"South,",
				"West",
			  "}",
			  "// logs 1",
			  "console.log(CardinalDirections.North);",
			 " // logs 4",
			  "console.log(CardinalDirections.West);"

		],
		"description": " Enums Numeric Enums - Initialized"
	},
	"Enums Numeric Enums - Fully Initialized": {
		"prefix": "EnumsNumericEnumsFullyInitialized",
		"body": [
			"enum StatusCodes {",
				"NotFound = 404,",
				"Success = 200,",
				"Accepted = 202,",
				"BadRequest = 400",
			  "}",
			 " // logs 404",
			  "console.log(StatusCodes.NotFound);",
			  "// logs 200",
			  "console.log(StatusCodes.Success);"

		],
		"description": "Enums Numeric Enums - Fully Initialized"
	},
	"Enums String Enums": {
		"prefix": "EnumsStringEnums",
		"body": [
			
			"enum CardinalDirections {",
				"North = 'North',",
				"East = 'East',",
				"South = 'South',",
				"West = 'West'",
			 " };",
			 " // logs 'North'",
			  "console.log(CardinalDirections.North);",
			  "// logs 'West'",
			  "console.log(CardinalDirections.West);"
		],
		"description": " Enums String Enums"
	},
	"TypeScript Type Aliases and Interfaces": {
		"prefix": "TypeScript Type Aliases and Interfaces",
		"body": [
			
			"Type Aliases",
			"Interfaces",
			"Extending Interfaces"
		],
		"description": " TypeScript Type Aliases and Interfaces"
	},


	"Type Aliases ": {
		"prefix": "TypeAliases",
		"body": [
			
			"Type Aliases allow defining types with a custom name (an Alias).",
			"type CarYear = number",
"type CarType = string",
"type CarModel = string",
"type Car = {",
  "year: CarYear,",
  "type: CarType,",
  "model: CarModel",
"}",

"const carYear: CarYear = 2001",
"const carType: CarType = 'Toyota'",
"const carModel: CarModel = 'Corolla'",
"const car: Car = {",
 " year: carYear,",
  "type: carType,",
 " model: carModel",
"};"
		],
		"description": " Type Aliases "
	},
	"Type liases Interfaces": {
		"prefix": "TypeAliasesInterfaces",
		"body": [
			"interface Rectangle {",
				"height: number,",
				"width: number",
			  "}",
			  
			  "const rectangle: Rectangle = {",
				"height: 20,",
				"width: 10",
			 " };"
		],
		"description": " TypeAliases Interfaces"
	},"TypeAliases Extending Interfaces": {
		"prefix": "TypeAliasesExtendingInterfaces",
		"body": [
			
			"interface Rectangle {",
				"height: number,",
				"width: number",
			  "}",
			  
			 " interface ColoredRectangle extends Rectangle {",
				"color: string",
			 " }",
			  
			  "const coloredRectangle: ColoredRectangle = {",
				"height: 20,",
				"width: 10,",
				"color: 'red'",
			  "};"
		],
		"description": " TypeAliases Extending Interfaces"
	},
	"TypeScript Union Types": {
		"prefix": "TypeScript Union Types",
		"body": [
			"Union | (OR)",
			"Union Type Errors"

		],
		"description": " TypeScript Union Types"
	},


	"Union Types Union | (OR)": {
		"prefix": "UnionTypesUnion(OR)",
		"body": [
			"function printStatusCode(code: string | number) {",
				"console.log(`My status code is ${code}.`)",
			 " }",
			  "printStatusCode(404);",
			 " printStatusCode('404');"
			
		],
		"description": " Union Types Union | (OR)"
	},
	"Union Types Union Type Errors": {
		"prefix": "UnionTypesUnionTypeErrors",
		"body": [
			"function printStatusCode(code: string | number) {",
				"console.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.",
				"Property 'toUpperCase' does not exist on type 'number'",
			  "}"
			
		],
		"description": " Union Types Union Type Errors"
	},

	"TypeScript Functions": {
		"prefix": "TypeScript Functions",
		"body": [
			"Return Type",
			"Void Return Type",
			"Parameters",
			"Optional Parameters",
			"Default Parameters",
			"Named Parameters",
			"Rest Parameters",
			"Type Alias"

		],
		"description": " TypeScript Functions"
	},
	"Functions Return Type": {
		"prefix": "FunctionsReturnType",
		"body": [
			
			"function getTime(): number {",
				"return new Date().getTime();",
			  "}"
		],
		"description": " Functions Return Type"
	},
	"Functions Void Return Type": {
		"prefix": "FunctionsVoidReturnType",
		"body": [
			
			"function printHello(): void {",
				"console.log('Hello!');",
			  "}"
		],
		"description": " Functions Void Return Type"
	},
	"Functions Parameters": {
		"prefix": "FunctionsParameters",
		"body": [
			
			"function multiply(a: number, b: number) {",
				"return a * b;",
			 " }"
		],
		"description": " Functions Parameters"
	},
	"Functions Optional Parameters": {
		"prefix": "FunctionsOptionalParameters",
		"body": [
			
			"function add(a: number, b: number, c?: number) {",
				"return a + b + (c || 0);",
			 " }"
		],
		"description": " Functions Optional Parameters"
	},
	"Functions Default Parameters": {
		"prefix": "FunctionsDefaultParameters",
		"body": [
			
			"function pow(value: number, exponent: number = 10) {",
				"return value ** exponent;",
			  "}"
		],
		"description": " Functions Default Parameters"
	},
	"Functions Named Parameters": {
		"prefix": "FunctionsNamedParameters",
		"body": [
			"function divide({ dividend, divisor }: { dividend: number, divisor: number }) {",
				"return dividend / divisor;",
			  "}"
		],
		"description": " Functions Named Parameters"
	},
	"Functions Rest Parameters": {
		"prefix": "FunctionsRestParameters",
		"body": [
			"function add(a: number, b: number, ...rest: number[]) {",
				"return a + b + rest.reduce((p, c) => p + c, 0);",
			  "}"
		],
		"description": " Functions Rest Parameters"
	},

	"Functions Type Alias": {
		"prefix": "FunctionsTypeAlias",
		"body": [
			"type Negate = (value: number) => number;",

"// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`",
"const negateFunction: Negate = (value) => value * -1;"
		],
		"description": " Functions Type Alias"
	},

	"TypeScript Casting": {

		"prefix": "TypeScript Casting",

		"body": [
			"Casting with as",
			"Casting with <>",
			"Force casting"
		],
		"description": " TypeScript Casting"

	},
	"Casting Force casting": {

		"prefix": "CastingForcecasting",

		"body": [
			"let x = 'hello';",
"console.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined"
		],
		"description": " Casting Force casting"

	},
	"Casting Casting with as":
 {
		"prefix": "CastingCastingwithas",

		"body": [
			"let x: unknown = 'hello';",
"console.log((x as string).length);"
		],
		"description": " Casting Casting with as"

	},

	"Casting Casting with <>":
 {
		"prefix": "CastingCastingwith<>",

		"body": [
			"let x: unknown = 'hello';",
"console.log((<string>x).length);"
		],
		"description": " Casting Casting with <>"

	},

	"TypeScript  Classes":
	 {
			"prefix": " TypeScriptClasses",
	
			"body": [
				"Members: Types",
				"Members: Visibility",
				
				"Parameter Properties",
				"Readonly",
				"Inheritance: Implements",
				"Inheritance: Extends",
				"Override",
				"Abstract Classes"

			],
			"description": " TypeScript Classes"
	
		},
		"Classes Members: Types":
	 {
			"prefix": "ClassesMembersTypes",
	
			"body": [
				"class Person {",
					"name: string;",
				  "}",
				  
				 " const person = new Person();",
				  "person.name = 'Jane';"
				
			],
			"description": " Classes Members: Types"
	
		},
		"ClassesMembers: Visibility":
	 {
			"prefix": "ClassesMembersVisibility",
	
			"body": [
				"class Person {",
					"private name: string;",
				  
					"public constructor(name: string) {",
					"  this.name = name;",
					"}",
				  
					"public getName(): string {",
					  "return this.name;",
					"}",
				  "}",
				  
				 " const person = new Person('Jane');",
				  "console.log(person.getName()); // person.name isn't accessible from outside the class since it's private"
			],
			"description": " Classes Members: Visibility"
	
		},
	
		"Classes Parameter Properties":
	 {
			"prefix": "ClassesParameterProperties",
	
			"body": [
				"class Person {",
					"// name is a private member variable",
					"public constructor(private name: string) {}",
				  
					"public getName(): string {",
					  "return this.name;",
					"}",
				  "}",
				  
				  "const person = new Person('Jane');",
				  "console.log(person.getName());"
				
			],
			"description": " Classes Parameter Properties"
	
		},
		"Classes Readonly":
	 {
			"prefix": "ClassesReadonly",
	
			"body": [
				"class Person {",
					"private readonly name: string;",
				  
					"public constructor(name: string) {",
					 " // name cannot be changed after this initial definition, which has to be either at it's declaration or in the constructor.",
					  "this.name = name;",
					"}",
				  
					"public getName(): string {",
					 " return this.name;",
					"}",
				  "}",
				  
				  "const person = new Person('Jane');",
				  "console.log(person.getName());"
				
			],
			"description": " Classes Readonly"
	
		},"Classes Inheritance: Implements":
		 {
				"prefix": "ClassesInheritanceImplements",
		
				"body": [
					
					"interface Shape {",
						"getArea: () => number;",
					  "}",
					  
					  "class Rectangle implements Shape {",
						"public constructor(protected readonly width: number, protected readonly height: number) {}",
					  
						"public getArea(): number {",
						  "return this.width * this.height;",
						"}",
					  "}"
				],
				"description": " Classes Inheritance: Implements"
		
			},
			"Classes Inheritance: Extends":
		 {
				"prefix": "ClassesInheritanceExtends",
		
				"body": [
					
					"interface Shape {",
						"getArea: () => number;",
					  "}",
					  
					  "class Rectangle implements Shape {",
						"public constructor(protected readonly width: number, protected readonly height: number) {}",
					  
						"public getArea(): number {",
						  "return this.width * this.height;",
						"}",
					  "}",
					  
					  "class Square extends Rectangle {",
						"public constructor(width: number) {",
						  "super(width, width);",
						"}",
					  
						"// getArea gets inherited from Rectangle",
					  "}"
				],
				"description": " Classes Inheritance: Extends"
		
			},
			"Classes Override":
		 {
				"prefix": "ClassesOverride",
		
				"body": [
					"interface Shape {",
						"getArea: () => number;",
					 " }",
					  
					  "class Rectangle implements Shape {",
						"// using protected for these members allows access from classes that extend from this class, such as Square",
						"public constructor(protected readonly width: number, protected readonly height: number) {}",
					  
						"public getArea(): number {",
						  "return this.width * this.height;",
						"}",
					  
						"public toString(): string {",
						  "return `Rectangle[width=${this.width}, height=${this.height}]`;",
						"}",
					  "}",
					  
					  "class Square extends Rectangle {",
						"public constructor(width: number) {",
						 " super(width, width);",
						"}",
					  
						"// this toString replaces the toString from Rectangle",
						"public override toString(): string {",
						  "return `Square[width=${this.width}]`;",
						"}",
					  "}"
				],
				"description": " Classes Override"
		
			},
			" Classes Required":
		 {
				"prefix": "ClassesRequired",
		
				"body": [
					"interface Car {",
						"make: string;",
						"model: string;",
						"mileage?: number;",
					  "}",
					  
					 " let myCar: Required<Car> = {",
						"make: 'Ford',",
						"model: 'Focus',",
						"mileage: 12000 // `Required` forces mileage to be defined",
					 " };"
				],
				"description": "  Classes Required"
		
			},

			"TypeScript Basic Generics":
		 {
				"prefix": "TypeScriptBasicGenerics",
		
				"body": [
					"Functions",
					"Classes",
					"Type Aliases",
					"Default Value",
					"Extends"

				],
				"description": " TypeScript Basic Generics"
		
			},
			"BasicGenerics Functions"
		: {
				"prefix": "BasicGenericsFunctions"
		,
				"body": [
					"function createPair<S, T>(v1: S, v2: T): [S, T] {",
						"return [v1, v2];",
					  "}",
					  "console.log(createPair<string, number>('hello', 42)); // ['hello', 42]"
				],
				"description": " BasicGenerics Functions"
		
			},
			"BasicGenerics Classes"
		: {
				"prefix": "BasicGenericsClasses"
		,
				"body": [
					"class NamedValue<T> {",
						"private _value: T | undefined;",
					  
						"constructor(private name: string) {}",
					  
						"public setValue(value: T) {",
						  "this._value = value;",
						"}",
					  
						"public getValue(): T | undefined {",
						 " return this._value;",
						"}",
					  
						"public toString(): string {",
						  "return `${this.name}: ${this._value}`;",
						"}",
					  "}",
					  
					  "let value = new NamedValue<number>('myNumber');",
					  "value.setValue(10);",
					  "console.log(value.toString()); // myNumber: 10"
				],
				"description": " BasicGenerics Classes"
		
			},
			"BasicGenerics Type Aliases"
		: {
				"prefix": "BasicGenericsTypeAliases"
		,
				"body": [
					"type Wrapped<T> = { value: T };",

"const wrappedValue: Wrapped<number> = { value: 10 };"
				],
				"description": " BasicGenerics Type Aliases"
		
			},


			"BasicGenerics Default Value"
		: {
				"prefix": "BasicGenericsDefaultValue"
		,
				"body": [
					"class NamedValue<T = string> {",
						"private _value: T | undefined;",
					  
						"constructor(private name: string) {}",
					  
						"public setValue(value: T) {",
						  "this._value = value;",
						"}",
					  
						"public getValue(): T | undefined {",
						 " return this._value;",
						"}",
					  
						"public toString(): string {",
						  "return `${this.name}: ${this._value}`;",
						"}",
					  "}",
					  
					  "let value = new NamedValue('myNumber');",
					  "value.setValue('myValue');",
					  "console.log(value.toString()); // myNumber: myValue"
				],
				"description": " BasicGenerics Default Value"
		
			},
			"BasicGenerics Extends"
		: {
				"prefix": "BasicGenericsExtends",
		
				"body": [
					"function createLoggedPair<S extends string | number, T extends string | number>(v1: S, v2: T): [S, T] {",
						"console.log(`creating pair: v1='${v1}', v2='${v2}'`);",
						"return [v1, v2];",
					 " }"
				],
				"description": " BasicGenerics Extends"
		
			},
			"TypeScript Utility Types"
		: {
				"prefix": "TypeScriptUtilityTypes"
		,
				"body": [
					"Partial",
					"Required",
					"Record",
					"Omit",
					"Pick",
					"ReturnType",
					"Parameters",
					"Readonly"


				],
				"description": " TypeScript Utility Types"
		
			},
			" Utility Types Partial"
		: {
				"prefix": "UtilityTypesPartial"
		,
				"body": [
					"interface Point {",
						"x: number;",
						"y: number;",
					  "}",
					  
					 " let pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional",
					  "pointPart.x = 10;"


				],
				"description": "  Utility Types Partial"
		
			}," Utility Types Required"
			: {
					"prefix": "UtilityTypesRequired"
			,
					"body": [
						"interface Car {",
							"make: string;",
							"model: string;",
							"mileage?: number;",
						  "}",
						  
						  "let myCar: Required<Car> = {",
							"make: 'Ford',",
						"model: 'Focus',",
							"mileage: 12000 // `Required` forces mileage to be defined",
						  "};"
	
	
					],
					"description": "  Utility Types Required"
			
				}," Utility Types Record":
				 {
						"prefix": "UtilityTypesRecord",
				
						"body": [
							
							"const nameAgeMap: Record<string, number> = {",
								"'Alice': 21,",
								"'Bob': 25",
							 " };"
		
						],
						"description": "  Utility Types Record"
				
					}," Utility Types Omit"
					: {
							"prefix": "UtilityTypesOmit"
					,
							"body": [
								"interface Person {",
									"name: string;",
									"age: number;",
									"location?: string;",
								 " }",
								  
								  "const bob: Omit<Person, 'age' | 'location'> = {",
									"name: 'Bob'",
									"// `Omit` has removed age and location from the type and they can't be defined here",
								  "};"
			
			
							],
							"description": "  Utility Types Omit"
					
						}," Utility Types Pick"
						: {
								"prefix": "UtilityTypesPick"
						,
								"body": [
									"interface Person {",
										"name: string;",
										"age: number;",
										"location?: string;",
									  "}",
									  
									  "const bob: Pick<Person, 'name'> = {",
										"name: 'Bob'",
										"// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here",
									 " };"
				
								],
								"description": "  Utility Types Pick"
						
							}," Utility Types ReturnType"
							: {
									"prefix": "UtilityTypesReturnType"
							,
									"body": [
										"type PointGenerator = () => { x: number; y: number; };",
"const point: ReturnType<PointGenerator> = {",
  "x: 10,",
  "y: 20",
"};"
					
					
									],
									"description": "  Utility Types ReturnType"
							
								},
								" Utility Types Exclude"
							: {
									"prefix": "UtilityTypesExclude",
							
									"body": [
										"type Primitive = string | number | boolean",
"const value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type."
									],
									"description": "  Utility Types Exclude"
							
								},
								" Utility Types Parameters"
								: {
										"prefix": "UtilityTypesParameters"
								,
										"body": [
											
											"type PointPrinter = (p: { x: number; y: number; }) => void;",
											"const point: Parameters<PointPrinter>[0] = {",
											"  x: 10,",
											  "y: 20",
											"};"
						
										],
										"description": "  Utility Types Parameters"
								
									},
									
									" Utility Types Readonly"
									: {
											"prefix": "UtilityTypesReadonly",
									
											"body": [
												"interface Person {",
													"name: string;",
													"age: number;",
												  "}",
												  "const person: Readonly = {",
													"name: 'Dylan',",
													"age: 35,",
												  "};",
												 " person.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property."
							
							
											],
											"description": "  Utility Types Readonly"
									
										},
										" TypeScript Keyof"
									: {
											"prefix": "TypeScriptKeyof",
									
											"body": [
												"keyof with explicit keys",
												"keyof with index signatures"
											],
											"description": "  TypeScript Keyof  "
									
										},

										"  Keyof with explicit keys"
									: {
											"prefix": "Keyofwithexplicitkeys",
									
											"body": [
												"interface Person {",
													"name: string;",
													"age: number;",
												 " }",
												 " // `keyof Person` here creates a union type of 'name' and 'age', other strings will not be allowed",
												  "function printPersonProperty(person: Person, property: keyof Person) {",
													"console.log(`Printing person property ${property}: '${person[property]}'`);",
												  "}",
												  "let person = {",
													"name: 'Max',",
													"age: 27",
												  "};",
												 " printPersonProperty(person, 'name'); // Printing person property name: 'Max'"
											],
											"description": "  Keyof with explicit keys "
									
										},
										" Keyof with index signatures"
									: {
											"prefix": "Keyofwithindexsignatures",
									
											"body": [
												"type StringMap = { [key: string]: unknown };",
"// `keyof StringMap` resolves to `string` here",
"function createStringPair(property: keyof StringMap, value: string): StringMap {",
 " return { [property]: value };",
"}"
											],
											"description": "  Keyof with index signatures "
									
										},

										" TypeScript Null & Undefined"
									: {
											"prefix": "TypeScriptNull&Undefined",
									
											"body": [
												"Types",
												"Optional Chaining",
												"Nullish Coalescence",
												"Null Assertion",
												"Array bounds handling"

											],
											"description": "TypeScriptNullUndefined"
									
										},
										" Null & Undefined Types"
									: {
											"prefix": "NullUndefinedTypes",
									
											"body": [
												"let value: string | undefined | null = null;",
"value = 'hello';",
"value = undefined;"
												
											],
											"description": "  Null & Undefined Types"
									
										},
										" Null & Undefined Optional Chaining"
									: {
											"prefix": "NullUndefinedOptionalChaining",
									
											"body": [
												
												"interface House {",
													"sqft: number;",
													"yard?: {",
													 " sqft: number;",
													"};",
												  "}",
												 " function printYardSize(house: House) {",
													"const yardSize = house.yard?.sqft;",
													"if (yardSize === undefined) {",
													  "console.log('No yard');",
													"} else {",
													  "console.log(`Yard is ${yardSize} sqft`);",
													"}",
												  "}",
												  
												 " let home: House = {",
													"sqft: 500",
												  "};",
												  
												 " printYardSize(home); // Prints 'No yard'"
											],
											"description": "  Null & Undefined Optional Chaining"
									
										},
										" Null & Undefined Nullish Coalescence"
									: {
											"prefix": "NullUndefinedNullishCoalescence",
									
											"body": [
												"function printMileage(mileage: number | null | undefined) {",
													"console.log(`Mileage: ${mileage ?? 'Not Available'}`);",
												  "}",
												  
												  "printMileage(null); // Prints 'Mileage: Not Available'",
												 " printMileage(0); // Prints 'Mileage: 0'"
												
											],
											"description": "  Null & Undefined Nullish Coalescence"
									
										},
										" Null & Undefined Null Assertion"
									: {
											"prefix": "NullUndefinedNullAssertion" ,
									
											"body": [
												
												"function getValue(): string | undefined {",
													"return 'hello';",
												 " }",
												  "let value = getValue();",
												  "console.log('value length: ' + value!.length);"
											],
											"description": "  Null & Undefined Null Assertion"
									
										},
										" Null & Undefined Array bounds handling"
									: {
											"prefix": "NullUndefinedArrayboundshandling",
									
											"body": [
												"let array: number[] = [1, 2, 3];",
"let value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`"
												
											],
											"description": "  Null & Undefined Array bounds handling"
									
										},

										" TypeScript Definitely Typed"
									: {
											"prefix": "TypeScriptDefinitelyTyped",
									
											"body": [
												"Using non-typed NPM packages in TypeScript"
											],
											"description": "  TypeScript Definitely Typed"
									
										},
										"  Definitely Typed Using non-typed NPM packages"
									: {
											"prefix": "DefinitelyTypedUsingnontypedNPMpackages",
									
											"body": [
												"npm install --save-dev @types/jquery"
											],
											"description": "  Definitely Typed Using non-typed NPM packages"
									
										},

										"  TypeScript 5.x Updates"
									: {
											"prefix": "TypeScript5.xUpdates",
									
											"body": [
												"Template Literal Types",
												"Index Signature Labels"
											],
											"description": " TypeScript 5.x Updates"
									
										},

										"  5.x Updates Template Literal Types"
									: {
											"prefix": "5.xUpdatesTemplateLiteralTypes",
									
											"body": [
												"type Color = 'red' | 'green' | 'blue';",
"type HexColorextends=' color='> = `#${string}`;",

"// Usage:",
"let myColor: HexColor<'blue'> = '#0000FF';"
											],
											"description": "  5.x Updates Template Literal Types"
									
										},

										" 5.x Updates Index Signature Labels"
									: {
											"prefix": "5.xUpdatesIndexSignatureLabels",
									
											"body": [
												"type DynamicObject = { [key: string as `dynamic_${string}`]: string };",

												"// Usage:",
												"let obj: DynamicObject = { dynamic_key: 'value' };"
											],
											"description": " TypeScript 5.x Updates"
									
										}






}